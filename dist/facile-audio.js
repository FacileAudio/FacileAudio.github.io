/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nglobal.facile = {\n  Tx: __webpack_require__(1),\n  Rx: __webpack_require__(5)\n};\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbImdsb2JhbCIsImZhY2lsZSIsIlR4IiwicmVxdWlyZSIsIlJ4Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsTUFBUCxHQUFnQjtBQUNkQyxNQUFJLG1CQUFBQyxDQUFRLENBQVIsQ0FEVTtBQUVkQyxNQUFJLG1CQUFBRCxDQUFRLENBQVI7QUFGVSxDQUFoQixDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmdsb2JhbC5mYWNpbGUgPSB7XG4gIFR4OiByZXF1aXJlKCcuL21vZHVsZXMvdHJhbnNtaXR0ZXInKSxcbiAgUng6IHJlcXVpcmUoJy4vbW9kdWxlcy9yZWNlaXZlcicpXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(2);\n\nfunction q2b(q) {\n  if (typeof q !== 'string') return 96000;\n  switch (q) {\n    case 'worst':\n      return 32000;\n    case 'low':\n      return 64000;\n    case 'medium':\n      return 96000;\n    case 'high':\n      return 128000;\n    case 'best':\n      return 192000;\n    default:\n      return 96000;\n  }\n}\n\nvar Transmitter = function (_EventEmitter) {\n  _inherits(Transmitter, _EventEmitter);\n\n  function Transmitter(options) {\n    _classCallCheck(this, Transmitter);\n\n    var _this = _possibleConstructorReturn(this, (Transmitter.__proto__ || Object.getPrototypeOf(Transmitter)).call(this));\n\n    _this.audioCtx = null;\n    _this.mediaStream = null;\n    _this.srcNode = null;\n    _this.procNode = null;\n    _this.muteNode = null;\n    _this.worker = null;\n    _this.initialized = false;\n    _this.started = false;\n    _this.events = ['error', 'connect', 'disconnect'];\n    _this.quality = 'medium';\n    _this.server = 'https://tx.facile.audio/tx';\n\n    _this.nsamples = 2048;\n    _this.frameSize = 480 * 4;\n    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n      _this.server = options.server || _this.server;\n      _this.quality = options.quality || _this.quality;\n    }\n    return _this;\n  }\n\n  _createClass(Transmitter, [{\n    key: '_capture',\n    value: function _capture() {\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        return navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        });\n      }\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n      if (!navigator.getUserMedia) {\n        return Promise.reject(new Error('unsupported'));\n      }\n      return new Promise(function (res, rej) {\n        navigator.getUserMedia({\n          audio: true,\n          video: false\n        }, function (stream) {\n          res(stream);\n        }, function (e) {\n          rej(e);\n        });\n      });\n    }\n  }, {\n    key: '_initAudio',\n    value: function _initAudio() {\n      var _this2 = this;\n\n      var AudioContext = window.AudioContext || window.webkitAudioContext;\n      if (!AudioContext) {\n        return Promise.reject(new Error('unsupported'));\n      }\n      this.audioCtx = new AudioContext();\n      return this._capture().then(function (stream) {\n        _this2.mediaStream = stream;\n        _this2.srcNode = _this2.audioCtx.createMediaStreamSource(stream);\n        if (_this2.srcNode.channelCount !== 2) {\n          throw 'Source: input is not stereo!';\n        }\n      });\n    }\n  }, {\n    key: '_audioProcess',\n    value: function _audioProcess(e) {\n      var left = e.inputBuffer.getChannelData(0);\n      var right = e.inputBuffer.getChannelData(1);\n      var samples = new Float32Array(this.srcNode.channelCount * this.nsamples);\n      var i = 0;\n      var j = 0;\n      for (i = 0; i < this.nsamples; ++i) {\n        samples[j++] = left[i];\n        samples[j++] = right[i];\n      }\n      if (this.worker) {\n        this.worker.postMessage(samples, [samples.buffer]);\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this3 = this;\n\n      if (this.started !== false) {\n        return Promise.reject(new Error('receiver is running'));\n      }\n      return this._initAudio().then(function () {\n        _this3.initialized = true;\n        _this3.procNode = _this3.audioCtx.createScriptProcessor(_this3.nsamples, _this3.srcNode.channelCount, 2);\n        _this3.srcNode.connect(_this3.procNode);\n        _this3.procNode.onaudioprocess = function (e) {\n          _this3._audioProcess(e);\n        };\n        _this3.muteNode = _this3.audioCtx.createGain();\n        _this3.muteNode.gain.value = 0.0;\n        _this3.procNode.connect(_this3.muteNode);\n        _this3.muteNode.connect(_this3.audioCtx.destination);\n        return _this3._startWorker();\n      });\n    }\n  }, {\n    key: '_startWorker',\n    value: function _startWorker() {\n      var _this4 = this;\n\n      return new Promise(function (res, rej) {\n        var Worker = __webpack_require__(3);\n        var worker = new Worker();\n        worker.onmessage = function (e) {\n          if (e.data.channel) {\n            console.log('Trasmitter Worker initialized');\n            worker.postMessage({\n              ctl: {\n                req: 'OPUS_SET_BITRATE',\n                val: q2b(_this4.quality)\n              }\n            });\n            _this4.worker = worker;\n            _this4.started = true;\n            res(e.data.channel);\n          } else if (e.data.type === 'connect') {\n            _this4.emit('connect');\n          } else if (e.data.type === 'disconnect') {\n            _this4.emit('disconnect', e.data.msg);\n          } else if (e.data.type === 'error') {\n            _this4.emit('error', e.data.err);\n          }\n        };\n        worker.onerror = function (e) {\n          _this4.emit('error', e);\n        };\n        worker.postMessage({\n          setup: {\n            sampleRate: _this4.audioCtx.sampleRate,\n            nsamples: _this4.nsamples,\n            frameSize: _this4.frameSize,\n            channels: _this4.srcNode.channelCount,\n            server: _this4.server\n          }\n        });\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this.initialized !== true) return;\n      this.srcNode.disconnect(this.procNode);\n      this.procNode.disconnect(this.muteNode);\n      this.muteNode.disconnect(this.audioCtx.destination);\n      this.mediaStream.getTracks()[0].stop();\n      this.initialized = false;\n      if (this.started !== true) return;\n      if (this.worker) {\n        this.worker.terminate();\n        this.worker = null;\n      }\n      this.started = false;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this5 = this;\n\n      this.stop();\n      this.events.forEach(function (ev) {\n        _this5.removeAllListeners(ev);\n      });\n    }\n  }]);\n\n  return Transmitter;\n}(EventEmitter);\n\nmodule.exports = Transmitter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	eval("module.exports = function() {\n\treturn __webpack_require__(4)(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId])\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\texports: {},\\n/******/ \\t\\t\\tid: moduleId,\\n/******/ \\t\\t\\tloaded: false\\n/******/ \\t\\t};\\n\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.loaded = true;\\n\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n\\n\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"/dist/\\\";\\n\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(0);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\\\n\\\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\"); } }\\\\n\\\\nvar Util = __webpack_require__(1);\\\\nvar Resampler = __webpack_require__(2);\\\\nvar OpusEncoder = __webpack_require__(3);\\\\n\\\\nvar tw = null;\\\\n\\\\nvar TransmitterWorker = function () {\\\\n  function TransmitterWorker() {\\\\n    _classCallCheck(this, TransmitterWorker);\\\\n\\\\n    this.encoder = null;\\\\n    this.resampler = null;\\\\n    this.tx = null;\\\\n  }\\\\n\\\\n  _createClass(TransmitterWorker, [{\\\\n    key: 'init',\\\\n    value: function init(setup) {\\\\n      var _this = this;\\\\n\\\\n      if (isNaN(setup.sampleRate)) {\\\\n        throw 'Transmitter Worker: invalid rate ' + setup.sampleRate;\\\\n      }\\\\n      if (setup.channels !== 2) {\\\\n        throw 'Transmitter Worker: invalid channel count ' + setup.channels;\\\\n      }\\\\n      if (isNaN(setup.nsamples)) {\\\\n        throw 'Transmitter Worker: invalid samples count ' + setup.nsamples;\\\\n      }\\\\n      if (isNaN(setup.frameSize)) {\\\\n        throw 'Transmitter Worker: invalid frame size ' + setup.frameSize;\\\\n      }\\\\n      if (typeof setup.server !== 'string') {\\\\n        throw 'Transmitter Worker: invalid server ' + setup.server;\\\\n      }\\\\n      if (setup.sampleRate !== 48000) {\\\\n        console.log('Transmitter Worker: need to resample ' + setup.sampleRate + ' ---> 48000');\\\\n        this.resampler = new Resampler(setup.sampleRate, 48000, setup.channels, Math.ceil(setup.nsamples * setup.channels * 48000 / setup.sampleRate), 0);\\\\n      }\\\\n      try {\\\\n        this.encoder = new OpusEncoder(48000, setup.channels, setup.frameSize);\\\\n      } catch (e) {\\\\n        this.error(e);\\\\n      }\\\\n      var ioURL = 'https://facile.audio/dist/socket.io-1.4.5.js';\\\\n      Util.loadScript(ioURL).then(function (libURL) {\\\\n        importScripts(libURL);\\\\n        _this._initIO(setup);\\\\n      }).catch(function (e) {\\\\n        postMessage({ type: 'error', err: e.message });\\\\n      });\\\\n    }\\\\n  }, {\\\\n    key: 'process',\\\\n    value: function process(samples) {\\\\n      var packets = null;\\\\n      if (this.resampler) {\\\\n        samples = this.resampler.resample(samples, samples.length);\\\\n      }\\\\n      try {\\\\n        packets = this.encoder.encode(samples);\\\\n      } catch (e) {\\\\n        tw.error(e);\\\\n        return;\\\\n      }\\\\n      if (this.tx) {\\\\n        this.tx.compress(false).emit('audio', packets);\\\\n      }\\\\n    }\\\\n  }, {\\\\n    key: 'error',\\\\n    value: function error(e) {\\\\n      postMessage({ type: 'error', err: 'Transmitter Worker: ' + e });\\\\n    }\\\\n  }, {\\\\n    key: '_initIO',\\\\n    value: function _initIO(setup) {\\\\n      var _this2 = this;\\\\n\\\\n      var tx = io(setup.server);\\\\n      tx.on('connect', function () {\\\\n        _this2.tx = tx;\\\\n        postMessage({ type: 'connect' });\\\\n        tx.emit('config', {\\\\n          sampleRate: setup.sampleRate,\\\\n          frameSize: setup.frameSize,\\\\n          channels: setup.channels\\\\n        });\\\\n      });\\\\n      tx.on('channel', function (channel) {\\\\n        postMessage({ channel: channel });\\\\n      });\\\\n      tx.on('disconnect', function (msg) {\\\\n        postMessage({ type: 'disconnect' });\\\\n      });\\\\n      tx.on('err', function (e) {\\\\n        postMessage({ type: 'error', err: e });\\\\n      });\\\\n    }\\\\n  }]);\\\\n\\\\n  return TransmitterWorker;\\\\n}();\\\\n\\\\nself.onmessage = function (ev) {\\\\n  if (ev.data instanceof Float32Array) {\\\\n    if (tw !== null) {\\\\n      tw.process(ev.data);\\\\n    } else {\\\\n      postMessage({ type: 'error',\\\\n        err: 'Transmitter Worker: not initialized' });\\\\n    }\\\\n  } else if (ev.data.setup) {\\\\n    console.log('Transmitter Worker: initializing..');\\\\n    if (tw !== null) {\\\\n      tw.error('Transmitter Worker: already initialized');\\\\n      return;\\\\n    }\\\\n    var encURL = 'https://facile.audio/dist/libopus_enc.js';\\\\n    Util.loadScript(encURL).then(function (libURL) {\\\\n      importScripts(libURL);\\\\n      tw = new TransmitterWorker();\\\\n      tw.init(ev.data.setup);\\\\n    }).catch(function (e) {\\\\n      postMessage({ type: 'error', err: e.message });\\\\n    });\\\\n  } else if (ev.data.ctl) {\\\\n    if (tw !== null) {\\\\n      try {\\\\n        tw.encoder.ctl(ev.data.ctl.req, ev.data.ctl.val);\\\\n      } catch (err) {\\\\n        tw.error(err);\\\\n      }\\\\n    } else {\\\\n      postMessage({ type: 'error',\\\\n        err: 'Transmitter Worker: not initialized' });\\\\n    }\\\\n  } else {\\\\n    if (tw === null) {\\\\n      postMessage({ type: 'error',\\\\n        err: 'Transmitter Worker: not initialized' });\\\\n      return;\\\\n    }\\\\n    tw.error('Transmitter Worker: invalid message');\\\\n  }\\\\n};\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\");\\n\\n/***/ }),\\n/* 1 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nfunction loadScript(url) {\\\\n  return new Promise(function (res, rej) {\\\\n    var req = new XMLHttpRequest();\\\\n    req.open('GET', url, true);\\\\n    req.responseType = 'blob';\\\\n    req.onload = function () {\\\\n      var blob = req.response;\\\\n      var blobURL = URL.createObjectURL(blob);\\\\n      res(blobURL);\\\\n    };\\\\n    req.onerror = function (e) {\\\\n      rej(e);\\\\n    };\\\\n    req.send();\\\\n  });\\\\n}\\\\n\\\\nmodule.exports = {\\\\n  loadScript: loadScript\\\\n};\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy91dGlsLmpzP2FmOTkiXSwibmFtZXMiOlsibG9hZFNjcmlwdCIsInVybCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXEiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJvbmxvYWQiLCJibG9iIiwicmVzcG9uc2UiLCJibG9iVVJMIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwib25lcnJvciIsImUiLCJzZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDdkIsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDL0IsUUFBTUMsTUFBTSxJQUFJQyxjQUFKLEVBQVo7QUFDQUQsUUFBSUUsSUFBSixDQUFTLEtBQVQsRUFBZ0JOLEdBQWhCLEVBQXFCLElBQXJCO0FBQ0FJLFFBQUlHLFlBQUosR0FBbUIsTUFBbkI7QUFDQUgsUUFBSUksTUFBSixHQUFhLFlBQU07QUFDakIsVUFBTUMsT0FBT0wsSUFBSU0sUUFBakI7QUFDQSxVQUFNQyxVQUFVQyxJQUFJQyxlQUFKLENBQW9CSixJQUFwQixDQUFoQjtBQUNBUCxVQUFJUyxPQUFKO0FBQ0QsS0FKRDtBQUtBUCxRQUFJVSxPQUFKLEdBQWMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ25CWixVQUFJWSxDQUFKO0FBQ0QsS0FGRDtBQUdBWCxRQUFJWSxJQUFKO0FBQ0QsR0FiTSxDQUFQO0FBY0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZm5CO0FBRGUsQ0FBakIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHJlcS5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGJsb2IgPSByZXEucmVzcG9uc2U7XG4gICAgICBjb25zdCBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHJlcyhibG9iVVJMKTtcbiAgICB9O1xuICAgIHJlcS5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgIHJlaihlKTtcbiAgICB9O1xuICAgIHJlcS5zZW5kKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9hZFNjcmlwdFxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3V0aWwuanMiXSwic291cmNlUm9vdCI6IiJ9\\\");\\n\\n/***/ }),\\n/* 2 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nfunction Resampler(fromSampleRate, toSampleRate, channels, outputBufferSize, noReturn) {\\\\n  this.fromSampleRate = fromSampleRate;\\\\n  this.toSampleRate = toSampleRate;\\\\n  this.channels = channels | 0;\\\\n  this.outputBufferSize = outputBufferSize;\\\\n  this.noReturn = !!noReturn;\\\\n  this.initialize();\\\\n}\\\\n\\\\nResampler.prototype.initialize = function () {\\\\n  if (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\\\\n    if (this.fromSampleRate == this.toSampleRate) {\\\\n      this.resample = this.bypassResampler;\\\\n      this.ratioWeight = 1;\\\\n    } else {\\\\n      this.ratioWeight = this.fromSampleRate / this.toSampleRate;\\\\n      if (this.fromSampleRate < this.toSampleRate) {\\\\n        this.compileLinearInterpolationFunction();\\\\n        this.lastWeight = 1;\\\\n      } else {\\\\n        this.compileMultiTapFunction();\\\\n        this.tailExists = false;\\\\n        this.lastWeight = 0;\\\\n      }\\\\n      this.initializeBuffers();\\\\n    }\\\\n  } else {\\\\n    throw new Error('Invalid settings specified for the resampler.');\\\\n  }\\\\n};\\\\n\\\\nResampler.prototype.compileLinearInterpolationFunction = function () {\\\\n  var channel = void 0;\\\\n\\\\n  var toCompile = 'var bufferLength = Math.min(buffer.length, upTo);\\\\\\\\\\\\n  var outLength = this.outputBufferSize;\\\\\\\\\\\\n  if ((bufferLength % ' + this.channels + ') == 0) {\\\\\\\\\\\\n    if (bufferLength > 0) {\\\\\\\\\\\\n      var weight = this.lastWeight;\\\\\\\\\\\\n      var firstWeight = 0;\\\\\\\\\\\\n      var secondWeight = 0;\\\\\\\\\\\\n      var sourceOffset = 0;\\\\\\\\\\\\n      var outputOffset = 0;\\\\\\\\\\\\n      var outputBuffer = this.outputBuffer;\\\\\\\\\\\\n      for (; weight < 1; weight += ' + this.ratioWeight + ') {\\\\\\\\\\\\n        secondWeight = weight % 1;\\\\\\\\\\\\n        firstWeight = 1 - secondWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = (this.lastOutput[' + channel + '] * firstWeight) + (buffer[' + channel + '] * secondWeight);';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n      weight -= 1;\\\\\\\\\\\\n      for (bufferLength -= ' + this.channels + ', sourceOffset = Math.floor(weight) * ' + this.channels + '; outputOffset < outLength && sourceOffset < bufferLength;) {\\\\\\\\\\\\n        secondWeight = weight % 1;\\\\\\\\\\\\n        firstWeight = 1 - secondWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = (buffer[sourceOffset' + (channel > 0 ? ' + ' + channel : '') + '] * firstWeight) + (buffer[sourceOffset + ' + (this.channels + channel) + '] * secondWeight);';\\\\n  }\\\\n  toCompile += 'weight += ' + this.ratioWeight + ';\\\\\\\\\\\\n        sourceOffset = Math.floor(weight) * ' + this.channels + ';\\\\\\\\\\\\n      }';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'this.lastOutput[' + channel + '] = buffer[sourceOffset++];';\\\\n  }\\\\n  toCompile += 'this.lastWeight = weight % 1;\\\\\\\\\\\\n      return this.bufferSlice(outputOffset);\\\\\\\\\\\\n    }\\\\\\\\\\\\n    else {\\\\\\\\\\\\n      return (this.noReturn) ? 0 : [];\\\\\\\\\\\\n    }\\\\\\\\\\\\n  }\\\\\\\\\\\\n  else {\\\\\\\\\\\\n    throw(new Error(\\\\\\\"Buffer was of incorrect sample length.\\\\\\\"));\\\\\\\\\\\\n  }';\\\\n\\\\n  this.resample = Function('buffer', 'upTo', toCompile);\\\\n};\\\\n\\\\nResampler.prototype.compileMultiTapFunction = function () {\\\\n  var channel = void 0;\\\\n\\\\n  var toCompile = 'var bufferLength = Math.min(buffer.length, upTo);\\\\\\\\\\\\n  var outLength = this.outputBufferSize;\\\\\\\\\\\\n  if ((bufferLength % ' + this.channels + ') == 0) {\\\\\\\\\\\\n    if (bufferLength > 0) {\\\\\\\\\\\\n      var weight = 0;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'var output' + channel + ' = 0;';\\\\n  }\\\\n  toCompile += 'var actualPosition = 0;\\\\\\\\\\\\n      var amountToNext = 0;\\\\\\\\\\\\n      var alreadyProcessedTail = !this.tailExists;\\\\\\\\\\\\n      this.tailExists = false;\\\\\\\\\\\\n      var outputBuffer = this.outputBuffer;\\\\\\\\\\\\n      var outputOffset = 0;\\\\\\\\\\\\n      var currentPosition = 0;\\\\\\\\\\\\n      do {\\\\\\\\\\\\n        if (alreadyProcessedTail) {\\\\\\\\\\\\n          weight = ' + this.ratioWeight + ';';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' = 0;';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n        else {\\\\\\\\\\\\n          weight = this.lastWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' = this.lastOutput[' + channel + '];';\\\\n  }\\\\n  toCompile += 'alreadyProcessedTail = true;\\\\\\\\\\\\n        }\\\\\\\\\\\\n        while (weight > 0 && actualPosition < bufferLength) {\\\\\\\\\\\\n          amountToNext = 1 + actualPosition - currentPosition;\\\\\\\\\\\\n          if (weight >= amountToNext) {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' += buffer[actualPosition++] * amountToNext;';\\\\n  }\\\\n  toCompile += 'currentPosition = actualPosition;\\\\\\\\\\\\n            weight -= amountToNext;\\\\\\\\\\\\n          }\\\\\\\\\\\\n          else {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' += buffer[actualPosition' + (channel > 0 ? ' + ' + channel : '') + '] * weight;';\\\\n  }\\\\n  toCompile += 'currentPosition += weight;\\\\\\\\\\\\n            weight = 0;\\\\\\\\\\\\n            break;\\\\\\\\\\\\n          }\\\\\\\\\\\\n        }\\\\\\\\\\\\n        if (weight <= 0) {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = output' + channel + ' / ' + this.ratioWeight + ';';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n        else {\\\\\\\\\\\\n          this.lastWeight = weight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'this.lastOutput[' + channel + '] = output' + channel + ';';\\\\n  }\\\\n  toCompile += 'this.tailExists = true;\\\\\\\\\\\\n          break;\\\\\\\\\\\\n        }\\\\\\\\\\\\n      } while (actualPosition < bufferLength && outputOffset < outLength);\\\\\\\\\\\\n      return this.bufferSlice(outputOffset);\\\\\\\\\\\\n    }\\\\\\\\\\\\n    else {\\\\\\\\\\\\n      return (this.noReturn) ? 0 : [];\\\\\\\\\\\\n    }\\\\\\\\\\\\n  }\\\\\\\\\\\\n  else {\\\\\\\\\\\\n    throw(new Error(\\\\\\\"Buffer was of incorrect sample length.\\\\\\\"));\\\\\\\\\\\\n  }';\\\\n\\\\n  this.resample = Function('buffer', 'upTo', toCompile);\\\\n};\\\\n\\\\nResampler.prototype.bypassResampler = function (buffer, upTo) {\\\\n  this.outputBuffer = buffer;\\\\n  return this.bufferSlice(upTo);\\\\n};\\\\n\\\\nResampler.prototype.bufferSlice = function (sliceAmount) {\\\\n  if (this.noReturn) {\\\\n    return sliceAmount;\\\\n  } else {\\\\n    try {\\\\n      return this.outputBuffer.subarray(0, sliceAmount);\\\\n    } catch (error) {\\\\n      try {\\\\n        this.outputBuffer.length = sliceAmount;\\\\n        return this.outputBuffer;\\\\n      } catch (error) {\\\\n        return this.outputBuffer.slice(0, sliceAmount);\\\\n      }\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nResampler.prototype.initializeBuffers = function () {\\\\n  try {\\\\n    this.outputBuffer = new Float32Array(this.outputBufferSize);\\\\n    this.lastOutput = new Float32Array(this.channels);\\\\n  } catch (error) {\\\\n    this.outputBuffer = [];\\\\n    this.lastOutput = [];\\\\n  }\\\\n};\\\\n\\\\nmodule.exports = Resampler;\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\");\\n\\n/***/ }),\\n/* 3 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\\\n\\\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\"); } }\\\\n\\\\nvar OpusEncoder = function () {\\\\n  function OpusEncoder(rate, channels, frameSize) {\\\\n    _classCallCheck(this, OpusEncoder);\\\\n\\\\n    if (rate !== 48000) throw 'OpusEnc: wrong rate ' + rate;\\\\n    this.rate = rate;\\\\n    this.channels = channels;\\\\n    this.frameSize = frameSize;\\\\n    var err_ptr = _malloc(4);\\\\n    this.ctx = _opus_encoder_create(this.rate, this.channels, 2049, err);\\\\n    var err = getValue(err_ptr, 'i32');\\\\n    if (err !== 0) throw 'OpusEnc: opus_encoder_create failed: ' + err;\\\\n    _free(err_ptr);\\\\n    this.raw_ptr = _malloc(this.frameSize * this.channels * 4);\\\\n    this.raw_len = this.frameSize * this.channels;\\\\n    this.raw = HEAPF32.subarray(this.raw_ptr >> 2, (this.raw_ptr >> 2) + this.raw_len);\\\\n    var max_coded_sz = 4096;\\\\n    this.coded_sz = max_coded_sz;\\\\n    this.coded_ptr = _malloc(this.coded_sz);\\\\n    this.coded = HEAPU8.subarray(this.coded_ptr, this.coded_ptr + this.coded_sz);\\\\n    this.raw_off = 0;\\\\n  }\\\\n\\\\n  _createClass(OpusEncoder, [{\\\\n    key: 'encode',\\\\n    value: function encode(samples) {\\\\n      var packets = [];\\\\n      var off = 0;\\\\n      while (samples.length - off >= this.raw_len - this.raw_off) {\\\\n        if (this.raw_off > 0) {\\\\n          this.raw.set(samples.subarray(off, off + this.raw_len - this.raw_off), this.raw_off);\\\\n          off += this.raw_len - this.raw_off;\\\\n          this.raw_off = 0;\\\\n        } else {\\\\n          this.raw.set(samples.subarray(off, off + this.raw_len));\\\\n          off += this.raw_len;\\\\n        }\\\\n        var ret = _opus_encode_float(this.ctx, this.raw_ptr, this.frameSize, this.coded_ptr, this.coded_sz);\\\\n        if (ret <= 0) throw 'OpusEnc: opus_encode_float failed: ' + ret;\\\\n        var packet = new ArrayBuffer(ret);\\\\n        new Uint8Array(packet).set(this.coded.subarray(0, ret));\\\\n        packets.push(packet);\\\\n      }\\\\n      if (off < samples.length) {\\\\n        this.raw.set(samples.subarray(off));\\\\n        this.raw_off = samples.length - off;\\\\n      }\\\\n      return packets;\\\\n    }\\\\n  }, {\\\\n    key: 'ctl',\\\\n    value: function ctl(_ctl, value) {\\\\n      if (_ctl === 'OPUS_SET_BITRATE') {\\\\n        if (isNaN(value)) throw 'OpusEnc: NaN value ' + value;\\\\n        if (value < 500 || value > 512000) {\\\\n          throw 'OpusEnc: invalid value ' + value;\\\\n        }\\\\n        var ptr = _malloc(4);\\\\n        setValue(ptr, value, 'i32');\\\\n        var ret = _opus_encoder_ctl(this.ctx, 4002, ptr);\\\\n        if (ret < 0) throw 'OpusEnc: opus_encoder_ctl failed: ' + ret;\\\\n        _free(ptr);\\\\n        return;\\\\n      }\\\\n      throw 'OpusEnc: invalid control ' + _ctl;\\\\n    }\\\\n  }, {\\\\n    key: 'destroy',\\\\n    value: function destroy() {\\\\n      if (!this.ctx) return;\\\\n      _opus_encoder_destroy(this.ctx);\\\\n      _free(this.raw_ptr);\\\\n      _free(this.coded_ptr);\\\\n      this.ctx = null;\\\\n      this.coded_ptr = null;\\\\n      this.raw_ptr = null;\\\\n    }\\\\n  }]);\\\\n\\\\n  return OpusEncoder;\\\\n}();\\\\n\\\\nmodule.exports = OpusEncoder;\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9lbmNvZGVyLmpzPzgwY2YiXSwibmFtZXMiOlsiT3B1c0VuY29kZXIiLCJyYXRlIiwiY2hhbm5lbHMiLCJmcmFtZVNpemUiLCJlcnJfcHRyIiwiX21hbGxvYyIsImN0eCIsIl9vcHVzX2VuY29kZXJfY3JlYXRlIiwiZXJyIiwiZ2V0VmFsdWUiLCJfZnJlZSIsInJhd19wdHIiLCJyYXdfbGVuIiwicmF3IiwiSEVBUEYzMiIsInN1YmFycmF5IiwibWF4X2NvZGVkX3N6IiwiY29kZWRfc3oiLCJjb2RlZF9wdHIiLCJjb2RlZCIsIkhFQVBVOCIsInJhd19vZmYiLCJzYW1wbGVzIiwicGFja2V0cyIsIm9mZiIsImxlbmd0aCIsInNldCIsInJldCIsIl9vcHVzX2VuY29kZV9mbG9hdCIsInBhY2tldCIsIkFycmF5QnVmZmVyIiwiVWludDhBcnJheSIsInB1c2giLCJjdGwiLCJ2YWx1ZSIsImlzTmFOIiwicHRyIiwic2V0VmFsdWUiLCJfb3B1c19lbmNvZGVyX2N0bCIsIl9vcHVzX2VuY29kZXJfZGVzdHJveSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7SUFFTUEsVztBQUNKLHVCQUFZQyxJQUFaLEVBQWtCQyxRQUFsQixFQUE0QkMsU0FBNUIsRUFBdUM7QUFBQTs7QUFDckMsUUFBSUYsU0FBUyxLQUFiLEVBQW9CLE1BQU0seUJBQXlCQSxJQUEvQjtBQUNwQixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsUUFBTUMsVUFBVUMsUUFBUSxDQUFSLENBQWhCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXQyxxQkFBcUIsS0FBS04sSUFBMUIsRUFBZ0MsS0FBS0MsUUFBckMsRUFBK0MsSUFBL0MsRUFBcURNLEdBQXJELENBQVg7QUFDQSxRQUFNQSxNQUFNQyxTQUFTTCxPQUFULEVBQWtCLEtBQWxC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S2hDLEdBQXZCLEVBQTRCLElBQTVCLEVBQWtDOEIsR0FBbEMsQ0FBWjtBQUNBLFlBQUlULE1BQU0sQ0FBVixFQUFhLE1BQU0sdUNBQXVDQSxHQUE3QztBQUNiakIsY0FBTTBCLEdBQU47QUFDQTtBQUNEO0FBQ0QsWUFBTSw4QkFBOEJILElBQXBDO0FBQ0Q7Ozs4QkFFUztBQUNSLFVBQUksQ0FBQyxLQUFLM0IsR0FBVixFQUFlO0FBQ2ZpQyw0QkFBc0IsS0FBS2pDLEdBQTNCO0FBQ0FJLFlBQU0sS0FBS0MsT0FBWDtBQUNBRCxZQUFNLEtBQUtRLFNBQVg7QUFDQSxXQUFLWixHQUFMLEdBQVcsSUFBWDtBQUNBLFdBQUtZLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxXQUFLUCxPQUFMLEdBQWUsSUFBZjtBQUNEOzs7Ozs7QUFJSDZCLE9BQU9DLE9BQVAsR0FBaUJ6QyxXQUFqQiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBPcHVzRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yKHJhdGUsIGNoYW5uZWxzLCBmcmFtZVNpemUpIHtcbiAgICBpZiAocmF0ZSAhPT0gNDgwMDApIHRocm93ICdPcHVzRW5jOiB3cm9uZyByYXRlICcgKyByYXRlO1xuICAgIHRoaXMucmF0ZSA9IHJhdGU7XG4gICAgdGhpcy5jaGFubmVscyA9IGNoYW5uZWxzO1xuICAgIHRoaXMuZnJhbWVTaXplID0gZnJhbWVTaXplO1xuICAgIGNvbnN0IGVycl9wdHIgPSBfbWFsbG9jKDQpO1xuICAgIHRoaXMuY3R4ID0gX29wdXNfZW5jb2Rlcl9jcmVhdGUodGhpcy5yYXRlLCB0aGlzLmNoYW5uZWxzLCAyMDQ5LCBlcnIpO1xuICAgIGNvbnN0IGVyciA9IGdldFZhbHVlKGVycl9wdHIsICdpMzInKTtcbiAgICBpZiAoZXJyICE9PSAwKSB0aHJvdyAnT3B1c0VuYzogb3B1c19lbmNvZGVyX2NyZWF0ZSBmYWlsZWQ6ICcgKyBlcnI7XG4gICAgX2ZyZWUoZXJyX3B0cik7XG4gICAgdGhpcy5yYXdfcHRyID0gX21hbGxvYyh0aGlzLmZyYW1lU2l6ZSAqIHRoaXMuY2hhbm5lbHMgKiA0KTtcbiAgICB0aGlzLnJhd19sZW4gPSB0aGlzLmZyYW1lU2l6ZSAqIHRoaXMuY2hhbm5lbHM7XG4gICAgdGhpcy5yYXcgPSBIRUFQRjMyLnN1YmFycmF5KHRoaXMucmF3X3B0ciA+PiAyLFxuICAgICAodGhpcy5yYXdfcHRyID4+IDIpICsgdGhpcy5yYXdfbGVuKTtcbiAgICBjb25zdCBtYXhfY29kZWRfc3ogPSA0MDk2O1xuICAgIHRoaXMuY29kZWRfc3ogPSBtYXhfY29kZWRfc3o7XG4gICAgdGhpcy5jb2RlZF9wdHIgPSBfbWFsbG9jKHRoaXMuY29kZWRfc3opO1xuICAgIHRoaXMuY29kZWQgPSBIRUFQVTguc3ViYXJyYXkodGhpcy5jb2RlZF9wdHIsXG4gICAgIHRoaXMuY29kZWRfcHRyICsgdGhpcy5jb2RlZF9zeik7XG4gICAgdGhpcy5yYXdfb2ZmID0gMDtcbiAgfVxuXG4gIGVuY29kZShzYW1wbGVzKSB7XG4gICAgY29uc3QgcGFja2V0cyA9IFtdO1xuICAgIGxldCBvZmYgPSAwO1xuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCAtIG9mZiA+PSB0aGlzLnJhd19sZW4gLSB0aGlzLnJhd19vZmYpIHtcbiAgICAgIGlmICh0aGlzLnJhd19vZmYgPiAwKSB7XG4gICAgICAgIHRoaXMucmF3LnNldChzYW1wbGVzLnN1YmFycmF5KG9mZixcbiAgICAgICAgIG9mZiArIHRoaXMucmF3X2xlbiAtIHRoaXMucmF3X29mZiksIHRoaXMucmF3X29mZik7XG4gICAgICAgIG9mZiArPSB0aGlzLnJhd19sZW4gLSB0aGlzLnJhd19vZmY7XG4gICAgICAgIHRoaXMucmF3X29mZiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhdy5zZXQoc2FtcGxlcy5zdWJhcnJheShvZmYsIG9mZiArIHRoaXMucmF3X2xlbikpO1xuICAgICAgICBvZmYgKz0gdGhpcy5yYXdfbGVuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmV0ID0gX29wdXNfZW5jb2RlX2Zsb2F0KHRoaXMuY3R4LCB0aGlzLnJhd19wdHIsXG4gICAgICAgdGhpcy5mcmFtZVNpemUsIHRoaXMuY29kZWRfcHRyLCB0aGlzLmNvZGVkX3N6KTtcbiAgICAgIGlmIChyZXQgPD0gMCkgdGhyb3cgJ09wdXNFbmM6IG9wdXNfZW5jb2RlX2Zsb2F0IGZhaWxlZDogJyArIHJldDtcbiAgICAgIGNvbnN0IHBhY2tldCA9IG5ldyBBcnJheUJ1ZmZlcihyZXQpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocGFja2V0KS5zZXQodGhpcy5jb2RlZC5zdWJhcnJheSgwLCByZXQpKTtcbiAgICAgIHBhY2tldHMucHVzaChwYWNrZXQpO1xuICAgIH1cbiAgICBpZiAob2ZmIDwgc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucmF3LnNldChzYW1wbGVzLnN1YmFycmF5KG9mZikpO1xuICAgICAgdGhpcy5yYXdfb2ZmID0gc2FtcGxlcy5sZW5ndGggLSBvZmY7XG4gICAgfVxuICAgIHJldHVybiBwYWNrZXRzO1xuICB9XG5cbiAgY3RsKGN0bCwgdmFsdWUpIHtcbiAgICBpZiAoY3RsID09PSAnT1BVU19TRVRfQklUUkFURScpIHtcbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHRocm93ICdPcHVzRW5jOiBOYU4gdmFsdWUgJyArIHZhbHVlO1xuICAgICAgaWYgKHZhbHVlIDwgNTAwIHx8IHZhbHVlID4gNTEyMDAwKSB7XG4gICAgICAgIHRocm93ICdPcHVzRW5jOiBpbnZhbGlkIHZhbHVlICcgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHB0ciA9IF9tYWxsb2MoNCk7XG4gICAgICBzZXRWYWx1ZShwdHIsIHZhbHVlLCAnaTMyJyk7XG4gICAgICBjb25zdCByZXQgPSBfb3B1c19lbmNvZGVyX2N0bCh0aGlzLmN0eCwgNDAwMiwgcHRyKTtcbiAgICAgIGlmIChyZXQgPCAwKSB0aHJvdyAnT3B1c0VuYzogb3B1c19lbmNvZGVyX2N0bCBmYWlsZWQ6ICcgKyByZXQ7XG4gICAgICBfZnJlZShwdHIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyAnT3B1c0VuYzogaW52YWxpZCBjb250cm9sICcgKyBjdGw7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5jdHgpIHJldHVybjtcbiAgICBfb3B1c19lbmNvZGVyX2Rlc3Ryb3kodGhpcy5jdHgpO1xuICAgIF9mcmVlKHRoaXMucmF3X3B0cik7XG4gICAgX2ZyZWUodGhpcy5jb2RlZF9wdHIpO1xuICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICB0aGlzLmNvZGVkX3B0ciA9IG51bGw7XG4gICAgdGhpcy5yYXdfcHRyID0gbnVsbDtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gT3B1c0VuY29kZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9lbmNvZGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\\");\\n\\n/***/ })\\n/******/ ]);\", __webpack_require__.p + \"a3d9a6f75db8802dd0a0.worker.js\");\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90cmFuc21pdHRlci53b3JrZXIuanM/ODA0MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLDZEQUFpSSwyRkFBMkYsMkZBQTJGLHVKQUF1Siw2SEFBNkgsNEJBQTRCLDhFQUE4RSxrSkFBa0osaUZBQWlGLHlGQUF5RixjQUFjLGdIQUFnSCwrRkFBK0YseUZBQXlGLGlHQUFpRyxZQUFZLDRKQUE0SiwwQkFBMEIsc0NBQXNDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsNkRBQTZELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRSxHQUFHLHVEQUF1RCwwQ0FBMEMsZ0VBQWdFLEVBQUUsRUFBRSx3Q0FBd0MsMENBQTBDLDRDQUE0QyxvQkFBb0IsMkNBQTJDLG1DQUFtQyxnREFBZ0QsOEJBQThCLDZCQUE2QixzQkFBc0IsTUFBTSwwQ0FBMEMsdURBQXVELDBCQUEwQiwwQ0FBMEMsd0VBQXdFLFVBQVUsb0NBQW9DLCtFQUErRSxVQUFVLHFDQUFxQywrRUFBK0UsVUFBVSxzQ0FBc0MsNkVBQTZFLFVBQVUsZ0RBQWdELHNFQUFzRSxVQUFVLDBDQUEwQyxtR0FBbUcsNkpBQTZKLFVBQVUsY0FBYyxrRkFBa0YsVUFBVSxZQUFZLHlCQUF5QixVQUFVLG9FQUFvRSx3REFBd0QsaUNBQWlDLGdDQUFnQyxVQUFVLHNCQUFzQix3QkFBd0IsZ0NBQWdDLEVBQUUsVUFBVSxFQUFFLFFBQVEsTUFBTSxHQUFHLCtEQUErRCw0QkFBNEIsOEJBQThCLHNFQUFzRSxVQUFVLGNBQWMsa0RBQWtELFVBQVUsWUFBWSx1QkFBdUIsa0JBQWtCLFVBQVUsdUJBQXVCLDBEQUEwRCxVQUFVLFFBQVEsTUFBTSxHQUFHLHFEQUFxRCxzQkFBc0IsaURBQWlELEVBQUUsUUFBUSxNQUFNLEdBQUcsNkRBQTZELDJCQUEyQixzQ0FBc0MsdUNBQXVDLDBC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REFBMkQsMkNBQTJDLGlFQUFpRSwrQ0FBK0MscURBQXFELFlBQVksZ0NBQWdDLHVDQUF1Qyw0REFBNEQseUVBQXlFLHNCQUFzQixrQkFBa0IsVUFBVSxrREFBa0QsUUFBUSxNQUFNLEdBQUcsd0RBQXdELCtCQUErQix5Q0FBeUMsNkJBQTZCLCtCQUErQix5QkFBeUIsK0JBQStCLDZCQUE2QixRQUFRLE1BQU0sR0FBRywyQkFBMkIsSUFBSSxHQUFHLG1DQUFtQyw4Q0FBOEMsY0FBYyxtbVBBQW1tUCxXQUFXLGVBQWU7QUFDcjhzRCIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHJlcXVpcmUoXCIhIS9ob21lL3N0cmVhbWVyNDUvY29kZS9mYWNpbGUvbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvY3JlYXRlSW5saW5lV29ya2VyLmpzXCIpKFwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxcbi8qKioqKiovIFxcdC8vIFRoZSBtb2R1bGUgY2FjaGVcXG4vKioqKioqLyBcXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xcblxcbi8qKioqKiovIFxcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXFxuLyoqKioqKi8gXFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xcblxcbi8qKioqKiovIFxcdFxcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxcbi8qKioqKiovIFxcdFxcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxcbi8qKioqKiovIFxcdFxcdFxcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xcblxcbi8qKioqKiovIFxcdFxcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXFxuLyoqKioqKi8gXFx0XFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xcbi8qKioqKiovIFxcdFxcdFxcdGV4cG9ydHM6IHt9LFxcbi8qKioqKiovIFxcdFxcdFxcdGlkOiBtb2R1bGVJZCxcXG4vKioqKioqLyBcXHRcXHRcXHRsb2FkZWQ6IGZhbHNlXFxuLyoqKioqKi8gXFx0XFx0fTtcXG5cXG4vKioqKioqLyBcXHRcXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cXG4vKioqKioqLyBcXHRcXHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcXG5cXG4vKioqKioqLyBcXHRcXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXFxuLyoqKioqKi8gXFx0XFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XFxuXFxuLyoqKioqKi8gXFx0XFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcXG4vKioqKioqLyBcXHRcXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XFxuLyoqKioqKi8gXFx0fVxcblxcblxcbi8qKioqKiovIFxcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXFxuLyoqKioqKi8gXFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcXG5cXG4vKioqKioqLyBcXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxcbi8qKioqKiovIFxcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XFxuXFxuLyoqKioqKi8gXFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cXG4vKioqKioqLyBcXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcXFwiL2Rpc3QvXFxcIjtcXG5cXG4vKioqKioqLyBcXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcXG4vKioqKioqLyBcXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcXG4vKioqKioqLyB9KVxcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLyoqKioqKi8gKFtcXG4vKiAwICovXFxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xcblxcblxcdGV2YWwoXFxcIid1c2Ugc3RyaWN0JztcXFxcblxcXFxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcXFxcXFxcInZhbHVlXFxcXFxcXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcXFxcblxcXFxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXFxcXFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXFxcXFxcXCIpOyB9IH1cXFxcblxcXFxudmFyIFV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xcXFxudmFyIFJlc2FtcGxlciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XFxcXG52YXIgT3B1c0VuY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xcXFxuXFxcXG52YXIgdHcgPSBudWxsO1xcXFxuXFxcXG52YXIgVHJhbnNtaXR0ZXJXb3JrZXIgPSBmdW5jdGlvbiAoKSB7XFxcXG4gIGZ1bmN0aW9uIFRyYW5zbWl0dGVyV29ya2VyKCkge1xcXFxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc21pdHRlcldvcmtlcik7XFxcXG5cXFxcbiAgICB0aGlzLmVuY29kZXIgPSBudWxsO1xcXFxuICAgIHRoaXMucmVzYW1wbGVyID0gbnVsbDtcXFxcbiAgICB0aGlzLnR4ID0gbnVsbDtcXFxcbiAgfVxcXFxuXFxcXG4gIF9jcmVhdGVDbGFzcyhUcmFuc21pdHRlcldvcmtlciwgW3tcXFxcbiAgICBrZXk6ICdpbml0JyxcXFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChzZXR1cCkge1xcXFxuICAgICAgdmFyIF90aGlzID0gdGhpcztcXFxcblxcXFxuICAgICAgaWYgKGlzTmFOKHNldHVwLnNhbXBsZVJhdGUpKSB7XFxcXG4gICAgICAgIHRocm93ICdUcmFuc21pdHRlciBXb3JrZXI6IGludmFsaWQgcmF0ZSAnICsgc2V0dXAuc2FtcGxlUmF0ZTtcXFxcbiAgICAgIH1cXFxcbiAgICAgIGlmIChzZXR1cC5jaGFubmVscyAhPT0gMikge1xcXFxuICAgICAgICB0aHJvdyAnVHJhbnNtaXR0ZXIgV29ya2VyOiBpbnZhbGlkIGNoYW5uZWwgY291bnQgJyArIHNldHVwLmNoYW5uZWxzO1xcXFxuICAgICAgfVxcXFxuICAgICAgaWYgKGlzTmFOKHNldHVwLm5zYW1wbGVzKSkge1xcXFxuICAgICAgICB0aHJvdyAnVHJhbnNtaXR0ZXIgV29ya2VyOiBpbnZhbGlkIHNhbXBsZXMgY291bnQgJyArIHNldHVwLm5zYW1wbGVzO1xcXFxuICAgICAgfVxcXFxuICAgICAgaWYgKGlzTmFOKHNldHVwLmZyYW1lU2l6ZSkpIHtcXFxcbiAgICAgICAgdGhyb3cgJ1RyYW5zbWl0dGVyIFdvcmtlcjogaW52YWxpZCBmcmFtZSBzaXplICcgKyBzZXR1cC5mcmFtZVNpemU7XFxcXG4gICAgICB9XFxcXG4gICAgICBpZiAodHlwZW9mIHNldHVwLnNlcnZlciAhPT0gJ3N0cmluZycpIHtcXFxcbiAgICAgICAgdGhyb3cgJ1RyYW5zbWl0dGVyIFdvcmtlcjogaW52YWxpZCBzZXJ2ZXIgJyArIHNldHVwLnNlcnZlcjtcXFxcbiAgICAgIH1cXFxcbiAgICAgIGlmIChzZXR1cC5zYW1wbGVSYXRlICE9PSA0ODAwMCkge1xcXFxuICAgICAgICBjb25zb2xlLmxvZygnVHJhbnNtaXR0ZXIgV29ya2VyOiBuZWVkIHRvIHJlc2FtcGxlICcgKyBzZXR1cC5zYW1wbGVSYXRlICsgJyAtLS0+IDQ4MDAwJyk7XFxcXG4gICAgICAgIHRoaXMucmVzYW1wbGVyID0gbmV3IFJlc2FtcGxlcihzZXR1cC5zYW1wbGVSYXRlLCA0ODAwMCwgc2V0dXAuY2hhbm5lbHMsIE1hdGguY2VpbChzZXR1cC5uc2FtcGxlcyAqIHNldHVwLmNoYW5uZWxzICogNDgwMDAgLyBzZXR1cC5zYW1wbGVSYXRlKSwgMCk7XFxcXG4gICAgICB9XFxcXG4gICAgICB0cnkge1xcXFxuICAgICAgICB0aGlzLmVuY29kZXIgPSBuZXcgT3B1c0VuY29kZXIoNDgwMDAsIHNldHVwLmNoYW5uZWxzLCBzZXR1cC5mcmFtZVNpemUpO1xcXFxuICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICB0aGlzLmVycm9yKGUpO1xcXFxuICAgICAgfVxcXFxuICAgICAgdmFyIGlvVVJMID0gJ2h0dHBzOi8vZmFjaWxlLmF1ZGlvL2Rpc3Qvc29ja2V0LmlvLTEuNC41LmpzJztcXFxcbiAgICAgIFV0aWwubG9hZFNjcmlwdChpb1VSTCkudGhlbihmdW5jdGlvbiAobGliVVJMKSB7XFxcXG4gICAgICAgIGltcG9ydFNjcmlwdHMobGliVVJMKTtcXFxcbiAgICAgICAgX3RoaXMuX2luaXRJTyhzZXR1cCk7XFxcXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xcXFxuICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6ICdlcnJvcicsIGVycjogZS5tZXNzYWdlIH0pO1xcXFxuICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICB9LCB7XFxcXG4gICAga2V5OiAncHJvY2VzcycsXFxcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3Moc2FtcGxlcykge1xcXFxuICAgICAgdmFyIHBhY2tldHMgPSBudWxsO1xcXFxuICAgICAgaWYgKHRoaXMucmVzYW1wbGVyKSB7XFxcXG4gICAgICAgIHNhbXBsZXMgPSB0aGlzLnJlc2FtcGxlci5yZXNhbXBsZShzYW1wbGVzLCBzYW1wbGVzLmxlbmd0aCk7XFxcXG4gICAgICB9XFxcXG4gICAgICB0cnkge1xcXFxuICAgICAgICBwYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShzYW1wbGVzKTtcXFxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgdHcuZXJyb3IoZSk7XFxcXG4gICAgICAgIHJldHVybjtcXFxcbiAgICAgIH1cXFxcbiAgICAgIGlmICh0aGlzLnR4KSB7XFxcXG4gICAgICAgIHRoaXMudHguY29tcHJlc3MoZmFsc2UpLmVtaXQoJ2F1ZGlvJywgcGFja2V0cyk7XFxcXG4gICAgICB9XFxcXG4gICAgfVxcXFxuICB9LCB7XFxcXG4gICAga2V5OiAnZXJyb3InLFxcXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcihlKSB7XFxcXG4gICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6ICdlcnJvcicsIGVycjogJ1RyYW5zbWl0dGVyIFdvcmtlcjogJyArIGUgfSk7XFxcXG4gICAgfVxcXFxuICB9LCB7XFxcXG4gICAga2V5OiAnX2luaXRJTycsXFxcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0SU8oc2V0dXApIHtcXFxcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcXFxuXFxcXG4gICAgICB2YXIgdHggPSBpbyhzZXR1cC5zZXJ2ZXIpO1xcXFxuICAgICAgdHgub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICAgIF90aGlzMi50eCA9IHR4O1xcXFxuICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6ICdjb25uZWN0JyB9KTtcXFxcbiAgICAgICAgdHguZW1pdCgnY29uZmlnJywge1xcXFxuICAgICAgICAgIHNhbXBsZVJhdGU6IHNldHVwLnNhbXBsZVJhdGUsXFxcXG4gICAgICAgICAgZnJhbWVTaXplOiBzZXR1cC5mcmFtZVNpemUsXFxcXG4gICAgICAgICAgY2hhbm5lbHM6IHNldHVwLmNoYW5uZWxzXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgfSk7XFxcXG4gICAgICB0eC5vbignY2hhbm5lbCcsIGZ1bmN0aW9uIChjaGFubmVsKSB7XFxcXG4gICAgICAgIHBvc3RNZXNzYWdlKHsgY2hhbm5lbDogY2hhbm5lbCB9KTtcXFxcbiAgICAgIH0pO1xcXFxuICAgICAgdHgub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbiAobXNnKSB7XFxcXG4gICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogJ2Rpc2Nvbm5lY3QnIH0pO1xcXFxuICAgICAgfSk7XFxcXG4gICAgICB0eC5vbignZXJyJywgZnVuY3Rpb24gKGUpIHtcXFxcbiAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAnZXJyb3InLCBlcnI6IGUgfSk7XFxcXG4gICAgICB9KTtcXFxcbiAgICB9XFxcXG4gIH1dKTtcXFxcblxcXFxuICByZXR1cm4gVHJhbnNtaXR0ZXJXb3JrZXI7XFxcXG59KCk7XFxcXG5cXFxcbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XFxcXG4gIGlmIChldi5kYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XFxcXG4gICAgaWYgKHR3ICE9PSBudWxsKSB7XFxcXG4gICAgICB0dy5wcm9jZXNzKGV2LmRhdGEpO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6ICdlcnJvcicsXFxcXG4gICAgICAgIGVycjogJ1RyYW5zbWl0dGVyIFdvcmtlcjogbm90IGluaXRpYWxpemVkJyB9KTtcXFxcbiAgICB9XFxcXG4gIH0gZWxzZSBpZiAoZXYuZGF0YS5zZXR1cCkge1xcXFxuICAgIGNvbnNvbGUubG9nKCdUcmFuc21pdHRlciBXb3JrZXI6IGluaXRpYWxpemluZy4uJyk7XFxcXG4gICAgaWYgKHR3ICE9PSBudWxsKSB7XFxcXG4gICAgICB0dy5lcnJvcignVHJhbnNtaXR0ZXIgV29ya2VyOiBhbHJlYWR5IGluaXRpYWxpemVkJyk7XFxcXG4gICAgICByZXR1cm47XFxcXG4gICAgfVxcXFxuICAgIHZhciBlbmNVUkwgPSAnaHR0cHM6Ly9mYWNpbGUuYXVkaW8vZGlzdC9saWJvcHVzX2VuYy5qcyc7XFxcXG4gICAgVXRpbC5sb2FkU2NyaXB0KGVuY1VSTCkudGhlbihmdW5jdGlvbiAobGliVVJMKSB7XFxcXG4gICAgICBpbXBvcnRTY3JpcHRzKGxpYlVSTCk7XFxcXG4gICAgICB0dyA9IG5ldyBUcmFuc21pdHRlcldvcmtlcigpO1xcXFxuICAgICAgdHcuaW5pdChldi5kYXRhLnNldHVwKTtcXFxcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xcXFxuICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAnZXJyb3InLCBlcnI6IGUubWVzc2FnZSB9KTtcXFxcbiAgICB9KTtcXFxcbiAgfSBlbHNlIGlmIChldi5kYXRhLmN0bCkge1xcXFxuICAgIGlmICh0dyAhPT0gbnVsbCkge1xcXFxuICAgICAgdHJ5IHtcXFxcbiAgICAgICAgdHcuZW5jb2Rlci5jdGwoZXYuZGF0YS5jdGwucmVxLCBldi5kYXRhLmN0bC52YWwpO1xcXFxuICAgICAgfSBjYXRjaCAoZXJyKSB7XFxcXG4gICAgICAgIHR3LmVycm9yKGVycik7XFxcXG4gICAgICB9XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogJ2Vycm9yJyxcXFxcbiAgICAgICAgZXJyOiAnVHJhbnNtaXR0ZXIgV29ya2VyOiBub3QgaW5pdGlhbGl6ZWQnIH0pO1xcXFxuICAgIH1cXFxcbiAgfSBlbHNlIHtcXFxcbiAgICBpZiAodHcgPT09IG51bGwpIHtcXFxcbiAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogJ2Vycm9yJyxcXFxcbiAgICAgICAgZXJyOiAnVHJhbnNtaXR0ZXIgV29ya2VyOiBub3QgaW5pdGlhbGl6ZWQnIH0pO1xcXFxuICAgICAgcmV0dXJuO1xcXFxuICAgIH1cXFxcbiAgICB0dy5lcnJvcignVHJhbnNtaXR0ZXIgV29ya2VyOiBpbnZhbGlkIG1lc3NhZ2UnKTtcXFxcbiAgfVxcXFxufTtcXFxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmJXOWtkV3hsY3k5MGNtRnVjMjFwZEhSbGNpNTNiM0pyWlhJdWFuTS9PRFptTXlKZExDSnVZVzFsY3lJNld5SlZkR2xzSWl3aWNtVnhkV2x5WlNJc0lsSmxjMkZ0Y0d4bGNpSXNJazl3ZFhORmJtTnZaR1Z5SWl3aWRIY2lMQ0pVY21GdWMyMXBkSFJsY2xkdmNtdGxjaUlzSW1WdVkyOWtaWElpTENKeVpYTmhiWEJzWlhJaUxDSjBlQ0lzSW5ObGRIVndJaXdpYVhOT1lVNGlMQ0p6WVcxd2JHVlNZWFJsSWl3aVkyaGhibTVsYkhNaUxDSnVjMkZ0Y0d4bGN5SXNJbVp5WVcxbFUybDZaU0lzSW5ObGNuWmxjaUlzSW1OdmJuTnZiR1VpTENKc2IyY2lMQ0pOWVhSb0lpd2lZMlZwYkNJc0ltVWlMQ0psY25KdmNpSXNJbWx2VlZKTUlpd2liRzloWkZOamNtbHdkQ0lzSW5Sb1pXNGlMQ0pzYVdKVlVrd2lMQ0pwYlhCdmNuUlRZM0pwY0hSeklpd2lYMmx1YVhSSlR5SXNJbU5oZEdOb0lpd2ljRzl6ZEUxbGMzTmhaMlVpTENKMGVYQmxJaXdpWlhKeUlpd2liV1Z6YzJGblpTSXNJbk5oYlhCc1pYTWlMQ0p3WVdOclpYUnpJaXdpY21WellXMXdiR1VpTENKc1pXNW5kR2dpTENKbGJtTnZaR1VpTENKamIyMXdjbVZ6Y3lJc0ltVnRhWFFpTENKcGJ5SXNJbTl1SWl3aVkyaGhibTVsYkNJc0ltMXpaeUlzSW5ObGJHWWlMQ0p2Ym0xbGMzTmhaMlVpTENKbGRpSXNJbVJoZEdFaUxDSkdiRzloZERNeVFYSnlZWGtpTENKd2NtOWpaWE56SWl3aVpXNWpWVkpNSWl3aWFXNXBkQ0lzSW1OMGJDSXNJbkpsY1NJc0luWmhiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096dEJRVVZCTEVsQlFVMUJMRTlCUVU4c2JVSkJRVUZETEVOQlFWRXNRMEZCVWl4RFFVRmlPMEZCUTBFc1NVRkJUVU1zV1VGQldTeHRRa0ZCUVVRc1EwRkJVU3hEUVVGU0xFTkJRV3hDTzBGQlEwRXNTVUZCVFVVc1kwRkJZeXh0UWtGQlFVWXNRMEZCVVN4RFFVRlNMRU5CUVhCQ096dEJRVVZCTEVsQlFVbEhMRXRCUVVzc1NVRkJWRHM3U1VGRlRVTXNhVUk3UVVGRFNpd3JRa0ZCWXp0QlFVRkJPenRCUVVOYUxGTkJRVXRETEU5QlFVd3NSMEZCWlN4SlFVRm1PMEZCUTBFc1UwRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxGTkJRVXRETEVWQlFVd3NSMEZCVlN4SlFVRldPMEZCUTBRN096czdlVUpCUlVsRExFc3NSVUZCVHp0QlFVRkJPenRCUVVOV0xGVkJRVWxETEUxQlFVMUVMRTFCUVUxRkxGVkJRVm9zUTBGQlNpeEZRVUUyUWp0QlFVTXpRaXhqUVVGTkxITkRRVUZ6UTBZc1RVRkJUVVVzVlVGQmJFUTdRVUZEUkR0QlFVTkVMRlZCUVVsR0xFMUJRVTFITEZGQlFVNHNTMEZCYlVJc1EwRkJka0lzUlVGQk1FSTdRVUZEZUVJc1kwRkJUU3dyUTBGQkswTklMRTFCUVUxSExGRkJRVE5FTzBGQlEwUTdRVUZEUkN4VlFVRkpSaXhOUVVGTlJDeE5RVUZOU1N4UlFVRmFMRU5CUVVvc1JVRkJNa0k3UVVGRGVrSXNZMEZCVFN3clEwRkJLME5LTEUxQlFVMUpMRkZCUVRORU8wRkJRMFE3UVVGRFJDeFZRVUZKU0N4TlFVRk5SQ3hOUVVGTlN5eFRRVUZhTEVOQlFVb3NSVUZCTkVJN1FVRkRNVUlzWTBGQlRTdzBRMEZCTkVOTUxFMUJRVTFMTEZOQlFYaEVPMEZCUTBRN1FVRkRSQ3hWUVVGSkxFOUJRVTlNTEUxQlFVMU5MRTFCUVdJc1MwRkJkMElzVVVGQk5VSXNSVUZCYzBNN1FVRkRjRU1zWTBGQlRTeDNRMEZCZDBOT0xFMUJRVTFOTEUxQlFYQkVPMEZCUTBRN1FVRkRSQ3hWUVVGSlRpeE5RVUZOUlN4VlFVRk9MRXRCUVhGQ0xFdEJRWHBDTEVWQlFXZERPMEZCUXpsQ1N5eG5Ra0ZCVVVNc1IwRkJVaXhEUVVGWkxEQkRRVU5ZVWl4TlFVRk5SU3hWUVVSTExFZEJRMUVzWVVGRWNFSTdRVUZGUVN4aFFVRkxTaXhUUVVGTUxFZEJRV2xDTEVsQlFVbE1MRk5CUVVvc1EwRkJZMDhzVFVGQlRVVXNWVUZCY0VJc1JVRkJaME1zUzBGQmFFTXNSVUZCZFVOR0xFMUJRVTFITEZGQlFUZERMRVZCUTJaTkxFdEJRVXRETEVsQlFVd3NRMEZCVlZZc1RVRkJUVWtzVVVGQlRpeEhRVUZwUWtvc1RVRkJUVWNzVVVGQmRrSXNSMEZEVkN4TFFVUlRMRWRCUTBSSUxFMUJRVTFGTEZWQlJHWXNRMEZFWlN4RlFVVmhMRU5CUm1Jc1EwRkJha0k3UVVGSFJEdEJRVU5FTEZWQlFVazdRVUZEUml4aFFVRkxUQ3hQUVVGTUxFZEJRV1VzU1VGQlNVZ3NWMEZCU2l4RFFVRm5RaXhMUVVGb1FpeEZRVUYxUWswc1RVRkJUVWNzVVVGQk4wSXNSVUZCZFVOSUxFMUJRVTFMTEZOQlFUZERMRU5CUVdZN1FVRkRSQ3hQUVVaRUxFTkJSVVVzVDBGQlQwMHNRMEZCVUN4RlFVRlZPMEZCUTFZc1lVRkJTME1zUzBGQlRDeERRVUZYUkN4RFFVRllPMEZCUTBRN1FVRkRSQ3hWUVVGTlJTeFJRVUZSTERoRFFVRmtPMEZCUTBGMFFpeFhRVUZMZFVJc1ZVRkJUQ3hEUVVGblFrUXNTMEZCYUVJc1JVRkJkVUpGTEVsQlFYWkNMRU5CUVRSQ0xGVkJRVU5ETEUxQlFVUXNSVUZCV1R0QlFVTjBRME1zYzBKQlFXTkVMRTFCUVdRN1FVRkRRU3hqUVVGTFJTeFBRVUZNTEVOQlFXRnNRaXhMUVVGaU8wRkJRMFFzVDBGSVJDeEZRVWRIYlVJc1MwRklTQ3hEUVVkVExGVkJRVU5TTEVOQlFVUXNSVUZCVHp0QlFVTmtVeXh2UWtGQldTeEZRVUZEUXl4TlFVRk5MRTlCUVZBc1JVRkJaMEpETEV0QlFVdFlMRVZCUVVWWkxFOUJRWFpDTEVWQlFWbzdRVUZEUkN4UFFVeEVPMEZCVFVRN096czBRa0ZGVDBNc1R5eEZRVUZUTzBGQlEyWXNWVUZCU1VNc1ZVRkJWU3hKUVVGa08wRkJRMEVzVlVGQlNTeExRVUZMTTBJc1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWpCQ0xHdENRVUZWTEV0QlFVc3hRaXhUUVVGTUxFTkJRV1UwUWl4UlFVRm1MRU5CUVhkQ1JpeFBRVUY0UWl4RlFVRnBRMEVzVVVGQlVVY3NUVUZCZWtNc1EwRkJWanRCUVVORU8wRkJRMFFzVlVGQlNUdEJRVU5HUml4clFrRkJWU3hMUVVGTE5VSXNUMEZCVEN4RFFVRmhLMElzVFVGQllpeERRVUZ2UWtvc1QwRkJjRUlzUTBGQlZqdEJRVU5FTEU5QlJrUXNRMEZGUlN4UFFVRlBZaXhEUVVGUUxFVkJRVlU3UVVGRFZtaENMRmRCUVVkcFFpeExRVUZJTEVOQlFWTkVMRU5CUVZRN1FVRkRRVHRCUVVORU8wRkJRMFFzVlVGQlNTeExRVUZMV2l4RlFVRlVMRVZCUVdFN1FVRkRXQ3hoUVVGTFFTeEZRVUZNTEVOQlFWRTRRaXhSUVVGU0xFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ1F5eEpRVUY0UWl4RFFVRTJRaXhQUVVFM1FpeEZRVUZ6UTB3c1QwRkJkRU03UVVGRFJEdEJRVU5HT3pzN01FSkJSVXRrTEVNc1JVRkJSenRCUVVOUVV5eHJRa0ZCV1N4RlFVRkRReXhOUVVGTkxFOUJRVkFzUlVGQlowSkRMRXRCUVVzc2VVSkJRWGxDV0N4RFFVRTVReXhGUVVGYU8wRkJRMFE3T3pzMFFrRkZUMWdzU3l4RlFVRlBPMEZCUVVFN08wRkJRMklzVlVGQlRVUXNTMEZCUzJkRExFZEJRVWN2UWl4TlFVRk5UU3hOUVVGVUxFTkJRVmc3UVVGRFFWQXNVMEZCUjJsRExFVkJRVWdzUTBGQlRTeFRRVUZPTEVWQlFXbENMRmxCUVUwN1FVRkRja0lzWlVGQlMycERMRVZCUVV3c1IwRkJWVUVzUlVGQlZqdEJRVU5CY1VJc2IwSkJRVmtzUlVGQlEwTXNUVUZCVFN4VFFVRlFMRVZCUVZvN1FVRkRRWFJDTEZkQlFVY3JRaXhKUVVGSUxFTkJRVkVzVVVGQlVpeEZRVUZyUWp0QlFVTm9RalZDTEhOQ1FVRlpSaXhOUVVGTlJTeFZRVVJHTzBGQlJXaENSeXh4UWtGQlYwd3NUVUZCVFVzc1UwRkdSRHRCUVVkb1FrWXNiMEpCUVZWSUxFMUJRVTFITzBGQlNFRXNVMEZCYkVJN1FVRkxSQ3hQUVZKRU8wRkJVMEZLTEZOQlFVZHBReXhGUVVGSUxFTkJRVTBzVTBGQlRpeEZRVUZwUWl4VlFVRkRReXhQUVVGRUxFVkJRV0U3UVVGRE5VSmlMRzlDUVVGWkxFVkJRVU5oTEZOQlFWTkJMRTlCUVZZc1JVRkJXanRCUVVORUxFOUJSa1E3UVVGSFFXeERMRk5CUVVkcFF5eEZRVUZJTEVOQlFVMHNXVUZCVGl4RlFVRnZRaXhWUVVGRFJTeEhRVUZFTEVWQlFWTTdRVUZETTBKa0xHOUNRVUZaTEVWQlFVTkRMRTFCUVUwc1dVRkJVQ3hGUVVGYU8wRkJRMFFzVDBGR1JEdEJRVWRCZEVJc1UwRkJSMmxETEVWQlFVZ3NRMEZCVFN4TFFVRk9MRVZCUVdFc1ZVRkJRM0pDTEVOQlFVUXNSVUZCVHp0QlFVTnNRbE1zYjBKQlFWa3NSVUZCUTBNc1RVRkJUU3hQUVVGUUxFVkJRV2RDUXl4TFFVRkxXQ3hEUVVGeVFpeEZRVUZhTzBGQlEwUXNUMEZHUkR0QlFVZEVPenM3T3pzN1FVRkpTSGRDTEV0QlFVdERMRk5CUVV3c1IwRkJhVUlzVlVGQlEwTXNSVUZCUkN4RlFVRlJPMEZCUTNaQ0xFMUJRVWxCTEVkQlFVZERMRWxCUVVnc1dVRkJiVUpETEZsQlFYWkNMRVZCUVhGRE8wRkJRMjVETEZGQlFVazFReXhQUVVGUExFbEJRVmdzUlVGQmFVSTdRVUZEWmtFc1UwRkJSelpETEU5QlFVZ3NRMEZCVjBnc1IwRkJSME1zU1VGQlpEdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1iRUlzYTBKQlFWa3NSVUZCUTBNc1RVRkJUU3hQUVVGUU8wRkJRMWhETEdGQlFVc3NjVU5CUkUwc1JVRkJXanRCUVVWRU8wRkJRMFlzUjBGUVJDeE5RVTlQTEVsQlFVbGxMRWRCUVVkRExFbEJRVWdzUTBGQlVYUkRMRXRCUVZvc1JVRkJiVUk3UVVGRGVFSlBMRmxCUVZGRExFZEJRVklzUTBGQldTeHZRMEZCV2p0QlFVTkJMRkZCUVVsaUxFOUJRVThzU1VGQldDeEZRVUZwUWp0QlFVTm1RU3hUUVVGSGFVSXNTMEZCU0N4RFFVRlRMSGxEUVVGVU8wRkJRMEU3UVVGRFJEdEJRVU5FTEZGQlFVMDJRaXhUUVVGVExEQkRRVUZtTzBGQlEwRnNSQ3hUUVVGTGRVSXNWVUZCVEN4RFFVRm5RakpDTEUxQlFXaENMRVZCUVhkQ01VSXNTVUZCZUVJc1EwRkJOa0lzVlVGQlEwTXNUVUZCUkN4RlFVRlpPMEZCUTNaRFF5eHZRa0ZCWTBRc1RVRkJaRHRCUVVOQmNrSXNWMEZCU3l4SlFVRkpReXhwUWtGQlNpeEZRVUZNTzBGQlEwRkVMRk5CUVVjclF5eEpRVUZJTEVOQlFWRk1MRWRCUVVkRExFbEJRVWdzUTBGQlVYUkRMRXRCUVdoQ08wRkJRMFFzUzBGS1JDeEZRVWxIYlVJc1MwRktTQ3hEUVVsVExGVkJRVU5TTEVOQlFVUXNSVUZCVHp0QlFVTmtVeXhyUWtGQldTeEZRVUZEUXl4TlFVRk5MRTlCUVZBc1JVRkJaMEpETEV0QlFVdFlMRVZCUVVWWkxFOUJRWFpDTEVWQlFWbzdRVUZEUkN4TFFVNUVPMEZCVDBRc1IwRmtUU3hOUVdOQkxFbEJRVWxqTEVkQlFVZERMRWxCUVVnc1EwRkJVVXNzUjBGQldpeEZRVUZwUWp0QlFVTjBRaXhSUVVGSmFFUXNUMEZCVHl4SlFVRllMRVZCUVdsQ08wRkJRMllzVlVGQlNUdEJRVU5HUVN4WFFVRkhSU3hQUVVGSUxFTkJRVmM0UXl4SFFVRllMRU5CUVdWT0xFZEJRVWRETEVsQlFVZ3NRMEZCVVVzc1IwRkJVaXhEUVVGWlF5eEhRVUV6UWl4RlFVRm5RMUFzUjBGQlIwTXNTVUZCU0N4RFFVRlJTeXhIUVVGU0xFTkJRVmxGTEVkQlFUVkRPMEZCUTBRc1QwRkdSQ3hEUVVWRkxFOUJRVTkyUWl4SFFVRlFMRVZCUVZrN1FVRkRXak5DTEZkQlFVZHBRaXhMUVVGSUxFTkJRVk5WTEVkQlFWUTdRVUZEUkR0QlFVTkdMRXRCVGtRc1RVRk5UenRCUVVOTVJpeHJRa0ZCV1N4RlFVRkRReXhOUVVGTkxFOUJRVkE3UVVGRFdFTXNZVUZCU3l4eFEwRkVUU3hGUVVGYU8wRkJSVVE3UVVGRFJpeEhRVmhOTEUxQlYwRTdRVUZEVEN4UlFVRkpNMElzVDBGQlR5eEpRVUZZTEVWQlFXbENPMEZCUTJaNVFpeHJRa0ZCV1N4RlFVRkRReXhOUVVGTkxFOUJRVkE3UVVGRFdFTXNZVUZCU3l4eFEwRkVUU3hGUVVGYU8wRkJSVUU3UVVGRFJEdEJRVU5FTTBJc1QwRkJSMmxDTEV0QlFVZ3NRMEZCVXl4eFEwRkJWRHRCUVVORU8wRkJRMFlzUTBGNlEwUWlMQ0ptYVd4bElqb2lNQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVkyOXVjM1FnVlhScGJDQTlJSEpsY1hWcGNtVW9KeTR2ZFhScGJDY3BPMXh1WTI5dWMzUWdVbVZ6WVcxd2JHVnlJRDBnY21WeGRXbHlaU2duTGk5eVpYTmhiWEJzWlhJbktUdGNibU52Ym5OMElFOXdkWE5GYm1OdlpHVnlJRDBnY21WeGRXbHlaU2duTGk5bGJtTnZaR1Z5SnlrN1hHNWNibXhsZENCMGR5QTlJRzUxYkd3N1hHNWNibU5zWVhOeklGUnlZVzV6YldsMGRHVnlWMjl5YTJWeUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2RHaHBjeTVsYm1OdlpHVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbkpsYzJGdGNHeGxjaUE5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTUwZUNBOUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCcGJtbDBLSE5sZEhWd0tTQjdYRzRnSUNBZ2FXWWdLR2x6VG1GT0tITmxkSFZ3TG5OaGJYQnNaVkpoZEdVcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlBblZISmhibk50YVhSMFpYSWdWMjl5YTJWeU9pQnBiblpoYkdsa0lISmhkR1VnSnlBcklITmxkSFZ3TG5OaGJYQnNaVkpoZEdVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoelpYUjFjQzVqYUdGdWJtVnNjeUFoUFQwZ01pa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ0oxUnlZVzV6YldsMGRHVnlJRmR2Y210bGNqb2dhVzUyWVd4cFpDQmphR0Z1Ym1Wc0lHTnZkVzUwSUNjZ0t5QnpaWFIxY0M1amFHRnVibVZzY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselRtRk9LSE5sZEhWd0xtNXpZVzF3YkdWektTa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ0oxUnlZVzV6YldsMGRHVnlJRmR2Y210bGNqb2dhVzUyWVd4cFpDQnpZVzF3YkdWeklHTnZkVzUwSUNjZ0t5QnpaWFIxY0M1dWMyRnRjR3hsY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselRtRk9LSE5sZEhWd0xtWnlZVzFsVTJsNlpTa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lDZFVjbUZ1YzIxcGRIUmxjaUJYYjNKclpYSTZJR2x1ZG1Gc2FXUWdabkpoYldVZ2MybDZaU0FuSUNzZ2MyVjBkWEF1Wm5KaGJXVlRhWHBsTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sZEhWd0xuTmxjblpsY2lBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJSFJvY205M0lDZFVjbUZ1YzIxcGRIUmxjaUJYYjNKclpYSTZJR2x1ZG1Gc2FXUWdjMlZ5ZG1WeUlDY2dLeUJ6WlhSMWNDNXpaWEoyWlhJN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoelpYUjFjQzV6WVcxd2JHVlNZWFJsSUNFOVBTQTBPREF3TUNrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMVJ5WVc1emJXbDBkR1Z5SUZkdmNtdGxjam9nYm1WbFpDQjBieUJ5WlhOaGJYQnNaU0FuSUN0Y2JpQWdJQ0FnSUNCelpYUjFjQzV6WVcxd2JHVlNZWFJsSUNzZ0p5QXRMUzArSURRNE1EQXdKeWs3WEc0Z0lDQWdJQ0IwYUdsekxuSmxjMkZ0Y0d4bGNpQTlJRzVsZHlCU1pYTmhiWEJzWlhJb2MyVjBkWEF1YzJGdGNHeGxVbUYwWlN3Z05EZ3dNREFzSUhObGRIVndMbU5vWVc1dVpXeHpMRnh1SUNBZ0lDQWdJQ0JOWVhSb0xtTmxhV3dvYzJWMGRYQXVibk5oYlhCc1pYTWdLaUJ6WlhSMWNDNWphR0Z1Ym1Wc2N5QXFYRzRnSUNBZ0lDQWdJQ0EwT0RBd01DQXZJSE5sZEhWd0xuTmhiWEJzWlZKaGRHVXBMQ0F3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhSb2FYTXVaVzVqYjJSbGNpQTlJRzVsZHlCUGNIVnpSVzVqYjJSbGNpZzBPREF3TUN3Z2MyVjBkWEF1WTJoaGJtNWxiSE1zSUhObGRIVndMbVp5WVcxbFUybDZaU2s3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWxjbkp2Y2lobEtUdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdhVzlWVWt3Z1BTQW5hSFIwY0hNNkx5OW1ZV05wYkdVdVlYVmthVzh2WkdsemRDOXpiMk5yWlhRdWFXOHRNUzQwTGpVdWFuTW5PMXh1SUNBZ0lGVjBhV3d1Ykc5aFpGTmpjbWx3ZENocGIxVlNUQ2t1ZEdobGJpZ29iR2xpVlZKTUtTQTlQaUI3WEc0Z0lDQWdJQ0JwYlhCdmNuUlRZM0pwY0hSektHeHBZbFZTVENrN1hHNGdJQ0FnSUNCMGFHbHpMbDlwYm1sMFNVOG9jMlYwZFhBcE8xeHVJQ0FnSUgwcExtTmhkR05vS0NobEtTQTlQaUI3WEc0Z0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJWeWNtOXlKeXdnWlhKeU9pQmxMbTFsYzNOaFoyVjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhCeWIyTmxjM01vYzJGdGNHeGxjeWtnZTF4dUlDQWdJR3hsZENCd1lXTnJaWFJ6SUQwZ2JuVnNiRHRjYmlBZ0lDQnBaaUFvZEdocGN5NXlaWE5oYlhCc1pYSXBJSHRjYmlBZ0lDQWdJSE5oYlhCc1pYTWdQU0IwYUdsekxuSmxjMkZ0Y0d4bGNpNXlaWE5oYlhCc1pTaHpZVzF3YkdWekxDQnpZVzF3YkdWekxteGxibWQwYUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCd1lXTnJaWFJ6SUQwZ2RHaHBjeTVsYm1OdlpHVnlMbVZ1WTI5a1pTaHpZVzF3YkdWektUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQjBkeTVsY25KdmNpaGxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhncElIdGNiaUFnSUNBZ0lIUm9hWE11ZEhndVkyOXRjSEpsYzNNb1ptRnNjMlVwTG1WdGFYUW9KMkYxWkdsdkp5d2djR0ZqYTJWMGN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaWEp5YjNJb1pTa2dlMXh1SUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5aWEp5YjNJbkxDQmxjbkk2SUNkVWNtRnVjMjFwZEhSbGNpQlhiM0pyWlhJNklDY2dLeUJsZlNrN1hHNGdJSDFjYmx4dUlDQmZhVzVwZEVsUEtITmxkSFZ3S1NCN1hHNGdJQ0FnWTI5dWMzUWdkSGdnUFNCcGJ5aHpaWFIxY0M1elpYSjJaWElwTzF4dUlDQWdJSFI0TG05dUtDZGpiMjV1WldOMEp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUwZUNBOUlIUjRPMXh1SUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RqYjI1dVpXTjBKMzBwTzF4dUlDQWdJQ0FnZEhndVpXMXBkQ2duWTI5dVptbG5KeXdnZTF4dUlDQWdJQ0FnSUNCellXMXdiR1ZTWVhSbE9pQnpaWFIxY0M1ellXMXdiR1ZTWVhSbExGeHVJQ0FnSUNBZ0lDQm1jbUZ0WlZOcGVtVTZJSE5sZEhWd0xtWnlZVzFsVTJsNlpTeGNiaUFnSUNBZ0lDQWdZMmhoYm01bGJITTZJSE5sZEhWd0xtTm9ZVzV1Wld4elhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCMGVDNXZiaWduWTJoaGJtNWxiQ2NzSUNoamFHRnVibVZzS1NBOVBpQjdYRzRnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3WTJoaGJtNWxiRG9nWTJoaGJtNWxiSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFI0TG05dUtDZGthWE5qYjI1dVpXTjBKeXdnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNka2FYTmpiMjV1WldOMEozMHBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUjRMbTl1S0NkbGNuSW5MQ0FvWlNrZ1BUNGdlMXh1SUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RsY25KdmNpY3NJR1Z5Y2pvZ1pYMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNibjFjYmx4dWMyVnNaaTV2Ym0xbGMzTmhaMlVnUFNBb1pYWXBJRDArSUh0Y2JpQWdhV1lnS0dWMkxtUmhkR0VnYVc1emRHRnVZMlZ2WmlCR2JHOWhkRE15UVhKeVlYa3BJSHRjYmlBZ0lDQnBaaUFvZEhjZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lIUjNMbkJ5YjJObGMzTW9aWFl1WkdGMFlTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBblpYSnliM0luTEZ4dUlDQWdJQ0FnSUdWeWNqb2dKMVJ5WVc1emJXbDBkR1Z5SUZkdmNtdGxjam9nYm05MElHbHVhWFJwWVd4cGVtVmtKMzBwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaGxkaTVrWVhSaExuTmxkSFZ3S1NCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxUnlZVzV6YldsMGRHVnlJRmR2Y210bGNqb2dhVzVwZEdsaGJHbDZhVzVuTGk0bktUdGNiaUFnSUNCcFppQW9kSGNnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUhSM0xtVnljbTl5S0NkVWNtRnVjMjFwZEhSbGNpQlhiM0pyWlhJNklHRnNjbVZoWkhrZ2FXNXBkR2xoYkdsNlpXUW5LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdaVzVqVlZKTUlEMGdKMmgwZEhCek9pOHZabUZqYVd4bExtRjFaR2x2TDJScGMzUXZiR2xpYjNCMWMxOWxibU11YW5Nbk8xeHVJQ0FnSUZWMGFXd3ViRzloWkZOamNtbHdkQ2hsYm1OVlVrd3BMblJvWlc0b0tHeHBZbFZTVENrZ1BUNGdlMXh1SUNBZ0lDQWdhVzF3YjNKMFUyTnlhWEIwY3loc2FXSlZVa3dwTzF4dUlDQWdJQ0FnZEhjZ1BTQnVaWGNnVkhKaGJuTnRhWFIwWlhKWGIzSnJaWElvS1R0Y2JpQWdJQ0FnSUhSM0xtbHVhWFFvWlhZdVpHRjBZUzV6WlhSMWNDazdYRzRnSUNBZ2ZTa3VZMkYwWTJnb0tHVXBJRDArSUh0Y2JpQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBblpYSnliM0luTENCbGNuSTZJR1V1YldWemMyRm5aWDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR1YyTG1SaGRHRXVZM1JzS1NCN1hHNGdJQ0FnYVdZZ0tIUjNJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQjBkeTVsYm1OdlpHVnlMbU4wYkNobGRpNWtZWFJoTG1OMGJDNXlaWEVzSUdWMkxtUmhkR0V1WTNSc0xuWmhiQ2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdkSGN1WlhKeWIzSW9aWEp5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RsY25KdmNpY3NYRzRnSUNBZ0lDQWdaWEp5T2lBblZISmhibk50YVhSMFpYSWdWMjl5YTJWeU9pQnViM1FnYVc1cGRHbGhiR2w2WldRbmZTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2gwZHlBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lM1I1Y0dVNklDZGxjbkp2Y2ljc1hHNGdJQ0FnSUNBZ1pYSnlPaUFuVkhKaGJuTnRhWFIwWlhJZ1YyOXlhMlZ5T2lCdWIzUWdhVzVwZEdsaGJHbDZaV1FuZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIUjNMbVZ5Y205eUtDZFVjbUZ1YzIxcGRIUmxjaUJYYjNKclpYSTZJR2x1ZG1Gc2FXUWdiV1Z6YzJGblpTY3BPMXh1SUNCOVhHNTlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDIxdlpIVnNaWE12ZEhKaGJuTnRhWFIwWlhJdWQyOXlhMlZ5TG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXFwiKTtcXG5cXG4vKioqLyB9KSxcXG4vKiAxICovXFxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xcblxcblxcdGV2YWwoXFxcIid1c2Ugc3RyaWN0JztcXFxcblxcXFxuZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwpIHtcXFxcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xcXFxuICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcXFxcbiAgICByZXEub3BlbignR0VUJywgdXJsLCB0cnVlKTtcXFxcbiAgICByZXEucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xcXFxuICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICB2YXIgYmxvYiA9IHJlcS5yZXNwb25zZTtcXFxcbiAgICAgIHZhciBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcXFxcbiAgICAgIHJlcyhibG9iVVJMKTtcXFxcbiAgICB9O1xcXFxuICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcXFxcbiAgICAgIHJlaihlKTtcXFxcbiAgICB9O1xcXFxuICAgIHJlcS5zZW5kKCk7XFxcXG4gIH0pO1xcXFxufVxcXFxuXFxcXG5tb2R1bGUuZXhwb3J0cyA9IHtcXFxcbiAgbG9hZFNjcmlwdDogbG9hZFNjcmlwdFxcXFxufTtcXFxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmJXOWtkV3hsY3k5MWRHbHNMbXB6UDJGbU9Ua2lYU3dpYm1GdFpYTWlPbHNpYkc5aFpGTmpjbWx3ZENJc0luVnliQ0lzSWxCeWIyMXBjMlVpTENKeVpYTWlMQ0p5WldvaUxDSnlaWEVpTENKWVRVeElkSFJ3VW1WeGRXVnpkQ0lzSW05d1pXNGlMQ0p5WlhOd2IyNXpaVlI1Y0dVaUxDSnZibXh2WVdRaUxDSmliRzlpSWl3aWNtVnpjRzl1YzJVaUxDSmliRzlpVlZKTUlpd2lWVkpNSWl3aVkzSmxZWFJsVDJKcVpXTjBWVkpNSWl3aWIyNWxjbkp2Y2lJc0ltVWlMQ0p6Wlc1a0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPMEZCUlVFc1UwRkJVMEVzVlVGQlZDeERRVUZ2UWtNc1IwRkJjRUlzUlVGQmVVSTdRVUZEZGtJc1UwRkJUeXhKUVVGSlF5eFBRVUZLTEVOQlFWa3NWVUZCUTBNc1IwRkJSQ3hGUVVGTlF5eEhRVUZPTEVWQlFXTTdRVUZETDBJc1VVRkJUVU1zVFVGQlRTeEpRVUZKUXl4alFVRktMRVZCUVZvN1FVRkRRVVFzVVVGQlNVVXNTVUZCU2l4RFFVRlRMRXRCUVZRc1JVRkJaMEpPTEVkQlFXaENMRVZCUVhGQ0xFbEJRWEpDTzBGQlEwRkpMRkZCUVVsSExGbEJRVW9zUjBGQmJVSXNUVUZCYmtJN1FVRkRRVWdzVVVGQlNVa3NUVUZCU2l4SFFVRmhMRmxCUVUwN1FVRkRha0lzVlVGQlRVTXNUMEZCVDB3c1NVRkJTVTBzVVVGQmFrSTdRVUZEUVN4VlFVRk5ReXhWUVVGVlF5eEpRVUZKUXl4bFFVRktMRU5CUVc5Q1NpeEpRVUZ3UWl4RFFVRm9RanRCUVVOQlVDeFZRVUZKVXl4UFFVRktPMEZCUTBRc1MwRktSRHRCUVV0QlVDeFJRVUZKVlN4UFFVRktMRWRCUVdNc1ZVRkJRME1zUTBGQlJDeEZRVUZQTzBGQlEyNUNXaXhWUVVGSldTeERRVUZLTzBGQlEwUXNTMEZHUkR0QlFVZEJXQ3hSUVVGSldTeEpRVUZLTzBGQlEwUXNSMEZpVFN4RFFVRlFPMEZCWTBRN08wRkJSVVJETEU5QlFVOURMRTlCUVZBc1IwRkJhVUk3UVVGRFptNUNPMEZCUkdVc1EwRkJha0lpTENKbWFXeGxJam9pTVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVablZ1WTNScGIyNGdiRzloWkZOamNtbHdkQ2gxY213cElIdGNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTXNJSEpsYWlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhKbGNTQTlJRzVsZHlCWVRVeElkSFJ3VW1WeGRXVnpkQ2dwTzF4dUlDQWdJSEpsY1M1dmNHVnVLQ2RIUlZRbkxDQjFjbXdzSUhSeWRXVXBPMXh1SUNBZ0lISmxjUzV5WlhOd2IyNXpaVlI1Y0dVZ1BTQW5ZbXh2WWljN1hHNGdJQ0FnY21WeExtOXViRzloWkNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0pzYjJJZ1BTQnlaWEV1Y21WemNHOXVjMlU3WEc0Z0lDQWdJQ0JqYjI1emRDQmliRzlpVlZKTUlEMGdWVkpNTG1OeVpXRjBaVTlpYW1WamRGVlNUQ2hpYkc5aUtUdGNiaUFnSUNBZ0lISmxjeWhpYkc5aVZWSk1LVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxjUzV2Ym1WeWNtOXlJRDBnS0dVcElEMCtJSHRjYmlBZ0lDQWdJSEpsYWlobEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGNTNXpaVzVrS0NrN1hHNGdJSDBwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ2JHOWhaRk5qY21sd2RGeHVmVHRjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMM055WXk5dGIyUjFiR1Z6TDNWMGFXd3Vhbk1pWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxcIik7XFxuXFxuLyoqKi8gfSksXFxuLyogMiAqL1xcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcXG5cXG5cXHRldmFsKFxcXCIndXNlIHN0cmljdCc7XFxcXG5cXFxcbmZ1bmN0aW9uIFJlc2FtcGxlcihmcm9tU2FtcGxlUmF0ZSwgdG9TYW1wbGVSYXRlLCBjaGFubmVscywgb3V0cHV0QnVmZmVyU2l6ZSwgbm9SZXR1cm4pIHtcXFxcbiAgdGhpcy5mcm9tU2FtcGxlUmF0ZSA9IGZyb21TYW1wbGVSYXRlO1xcXFxuICB0aGlzLnRvU2FtcGxlUmF0ZSA9IHRvU2FtcGxlUmF0ZTtcXFxcbiAgdGhpcy5jaGFubmVscyA9IGNoYW5uZWxzIHwgMDtcXFxcbiAgdGhpcy5vdXRwdXRCdWZmZXJTaXplID0gb3V0cHV0QnVmZmVyU2l6ZTtcXFxcbiAgdGhpcy5ub1JldHVybiA9ICEhbm9SZXR1cm47XFxcXG4gIHRoaXMuaW5pdGlhbGl6ZSgpO1xcXFxufVxcXFxuXFxcXG5SZXNhbXBsZXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XFxcXG4gIGlmICh0aGlzLmZyb21TYW1wbGVSYXRlID4gMCAmJiB0aGlzLnRvU2FtcGxlUmF0ZSA+IDAgJiYgdGhpcy5jaGFubmVscyA+IDApIHtcXFxcbiAgICBpZiAodGhpcy5mcm9tU2FtcGxlUmF0ZSA9PSB0aGlzLnRvU2FtcGxlUmF0ZSkge1xcXFxuICAgICAgdGhpcy5yZXNhbXBsZSA9IHRoaXMuYnlwYXNzUmVzYW1wbGVyO1xcXFxuICAgICAgdGhpcy5yYXRpb1dlaWdodCA9IDE7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgIHRoaXMucmF0aW9XZWlnaHQgPSB0aGlzLmZyb21TYW1wbGVSYXRlIC8gdGhpcy50b1NhbXBsZVJhdGU7XFxcXG4gICAgICBpZiAodGhpcy5mcm9tU2FtcGxlUmF0ZSA8IHRoaXMudG9TYW1wbGVSYXRlKSB7XFxcXG4gICAgICAgIHRoaXMuY29tcGlsZUxpbmVhckludGVycG9sYXRpb25GdW5jdGlvbigpO1xcXFxuICAgICAgICB0aGlzLmxhc3RXZWlnaHQgPSAxO1xcXFxuICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgdGhpcy5jb21waWxlTXVsdGlUYXBGdW5jdGlvbigpO1xcXFxuICAgICAgICB0aGlzLnRhaWxFeGlzdHMgPSBmYWxzZTtcXFxcbiAgICAgICAgdGhpcy5sYXN0V2VpZ2h0ID0gMDtcXFxcbiAgICAgIH1cXFxcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUJ1ZmZlcnMoKTtcXFxcbiAgICB9XFxcXG4gIH0gZWxzZSB7XFxcXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNldHRpbmdzIHNwZWNpZmllZCBmb3IgdGhlIHJlc2FtcGxlci4nKTtcXFxcbiAgfVxcXFxufTtcXFxcblxcXFxuUmVzYW1wbGVyLnByb3RvdHlwZS5jb21waWxlTGluZWFySW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xcXFxuICB2YXIgY2hhbm5lbCA9IHZvaWQgMDtcXFxcblxcXFxuICB2YXIgdG9Db21waWxlID0gJ3ZhciBidWZmZXJMZW5ndGggPSBNYXRoLm1pbihidWZmZXIubGVuZ3RoLCB1cFRvKTtcXFxcXFxcXFxcXFxuICB2YXIgb3V0TGVuZ3RoID0gdGhpcy5vdXRwdXRCdWZmZXJTaXplO1xcXFxcXFxcXFxcXG4gIGlmICgoYnVmZmVyTGVuZ3RoICUgJyArIHRoaXMuY2hhbm5lbHMgKyAnKSA9PSAwKSB7XFxcXFxcXFxcXFxcbiAgICBpZiAoYnVmZmVyTGVuZ3RoID4gMCkge1xcXFxcXFxcXFxcXG4gICAgICB2YXIgd2VpZ2h0ID0gdGhpcy5sYXN0V2VpZ2h0O1xcXFxcXFxcXFxcXG4gICAgICB2YXIgZmlyc3RXZWlnaHQgPSAwO1xcXFxcXFxcXFxcXG4gICAgICB2YXIgc2Vjb25kV2VpZ2h0ID0gMDtcXFxcXFxcXFxcXFxuICAgICAgdmFyIHNvdXJjZU9mZnNldCA9IDA7XFxcXFxcXFxcXFxcbiAgICAgIHZhciBvdXRwdXRPZmZzZXQgPSAwO1xcXFxcXFxcXFxcXG4gICAgICB2YXIgb3V0cHV0QnVmZmVyID0gdGhpcy5vdXRwdXRCdWZmZXI7XFxcXFxcXFxcXFxcbiAgICAgIGZvciAoOyB3ZWlnaHQgPCAxOyB3ZWlnaHQgKz0gJyArIHRoaXMucmF0aW9XZWlnaHQgKyAnKSB7XFxcXFxcXFxcXFxcbiAgICAgICAgc2Vjb25kV2VpZ2h0ID0gd2VpZ2h0ICUgMTtcXFxcXFxcXFxcXFxuICAgICAgICBmaXJzdFdlaWdodCA9IDEgLSBzZWNvbmRXZWlnaHQ7JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAnb3V0cHV0QnVmZmVyW291dHB1dE9mZnNldCsrXSA9ICh0aGlzLmxhc3RPdXRwdXRbJyArIGNoYW5uZWwgKyAnXSAqIGZpcnN0V2VpZ2h0KSArIChidWZmZXJbJyArIGNoYW5uZWwgKyAnXSAqIHNlY29uZFdlaWdodCk7JztcXFxcbiAgfVxcXFxuICB0b0NvbXBpbGUgKz0gJ31cXFxcXFxcXFxcXFxuICAgICAgd2VpZ2h0IC09IDE7XFxcXFxcXFxcXFxcbiAgICAgIGZvciAoYnVmZmVyTGVuZ3RoIC09ICcgKyB0aGlzLmNoYW5uZWxzICsgJywgc291cmNlT2Zmc2V0ID0gTWF0aC5mbG9vcih3ZWlnaHQpICogJyArIHRoaXMuY2hhbm5lbHMgKyAnOyBvdXRwdXRPZmZzZXQgPCBvdXRMZW5ndGggJiYgc291cmNlT2Zmc2V0IDwgYnVmZmVyTGVuZ3RoOykge1xcXFxcXFxcXFxcXG4gICAgICAgIHNlY29uZFdlaWdodCA9IHdlaWdodCAlIDE7XFxcXFxcXFxcXFxcbiAgICAgICAgZmlyc3RXZWlnaHQgPSAxIC0gc2Vjb25kV2VpZ2h0Oyc7XFxcXG4gIGZvciAoY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCB0aGlzLmNoYW5uZWxzOyArK2NoYW5uZWwpIHtcXFxcbiAgICB0b0NvbXBpbGUgKz0gJ291dHB1dEJ1ZmZlcltvdXRwdXRPZmZzZXQrK10gPSAoYnVmZmVyW3NvdXJjZU9mZnNldCcgKyAoY2hhbm5lbCA+IDAgPyAnICsgJyArIGNoYW5uZWwgOiAnJykgKyAnXSAqIGZpcnN0V2VpZ2h0KSArIChidWZmZXJbc291cmNlT2Zmc2V0ICsgJyArICh0aGlzLmNoYW5uZWxzICsgY2hhbm5lbCkgKyAnXSAqIHNlY29uZFdlaWdodCk7JztcXFxcbiAgfVxcXFxuICB0b0NvbXBpbGUgKz0gJ3dlaWdodCArPSAnICsgdGhpcy5yYXRpb1dlaWdodCArICc7XFxcXFxcXFxcXFxcbiAgICAgICAgc291cmNlT2Zmc2V0ID0gTWF0aC5mbG9vcih3ZWlnaHQpICogJyArIHRoaXMuY2hhbm5lbHMgKyAnO1xcXFxcXFxcXFxcXG4gICAgICB9JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAndGhpcy5sYXN0T3V0cHV0WycgKyBjaGFubmVsICsgJ10gPSBidWZmZXJbc291cmNlT2Zmc2V0KytdOyc7XFxcXG4gIH1cXFxcbiAgdG9Db21waWxlICs9ICd0aGlzLmxhc3RXZWlnaHQgPSB3ZWlnaHQgJSAxO1xcXFxcXFxcXFxcXG4gICAgICByZXR1cm4gdGhpcy5idWZmZXJTbGljZShvdXRwdXRPZmZzZXQpO1xcXFxcXFxcXFxcXG4gICAgfVxcXFxcXFxcXFxcXG4gICAgZWxzZSB7XFxcXFxcXFxcXFxcbiAgICAgIHJldHVybiAodGhpcy5ub1JldHVybikgPyAwIDogW107XFxcXFxcXFxcXFxcbiAgICB9XFxcXFxcXFxcXFxcbiAgfVxcXFxcXFxcXFxcXG4gIGVsc2Uge1xcXFxcXFxcXFxcXG4gICAgdGhyb3cobmV3IEVycm9yKFxcXFxcXFwiQnVmZmVyIHdhcyBvZiBpbmNvcnJlY3Qgc2FtcGxlIGxlbmd0aC5cXFxcXFxcIikpO1xcXFxcXFxcXFxcXG4gIH0nO1xcXFxuXFxcXG4gIHRoaXMucmVzYW1wbGUgPSBGdW5jdGlvbignYnVmZmVyJywgJ3VwVG8nLCB0b0NvbXBpbGUpO1xcXFxufTtcXFxcblxcXFxuUmVzYW1wbGVyLnByb3RvdHlwZS5jb21waWxlTXVsdGlUYXBGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgdmFyIGNoYW5uZWwgPSB2b2lkIDA7XFxcXG5cXFxcbiAgdmFyIHRvQ29tcGlsZSA9ICd2YXIgYnVmZmVyTGVuZ3RoID0gTWF0aC5taW4oYnVmZmVyLmxlbmd0aCwgdXBUbyk7XFxcXFxcXFxcXFxcbiAgdmFyIG91dExlbmd0aCA9IHRoaXMub3V0cHV0QnVmZmVyU2l6ZTtcXFxcXFxcXFxcXFxuICBpZiAoKGJ1ZmZlckxlbmd0aCAlICcgKyB0aGlzLmNoYW5uZWxzICsgJykgPT0gMCkge1xcXFxcXFxcXFxcXG4gICAgaWYgKGJ1ZmZlckxlbmd0aCA+IDApIHtcXFxcXFxcXFxcXFxuICAgICAgdmFyIHdlaWdodCA9IDA7JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAndmFyIG91dHB1dCcgKyBjaGFubmVsICsgJyA9IDA7JztcXFxcbiAgfVxcXFxuICB0b0NvbXBpbGUgKz0gJ3ZhciBhY3R1YWxQb3NpdGlvbiA9IDA7XFxcXFxcXFxcXFxcbiAgICAgIHZhciBhbW91bnRUb05leHQgPSAwO1xcXFxcXFxcXFxcXG4gICAgICB2YXIgYWxyZWFkeVByb2Nlc3NlZFRhaWwgPSAhdGhpcy50YWlsRXhpc3RzO1xcXFxcXFxcXFxcXG4gICAgICB0aGlzLnRhaWxFeGlzdHMgPSBmYWxzZTtcXFxcXFxcXFxcXFxuICAgICAgdmFyIG91dHB1dEJ1ZmZlciA9IHRoaXMub3V0cHV0QnVmZmVyO1xcXFxcXFxcXFxcXG4gICAgICB2YXIgb3V0cHV0T2Zmc2V0ID0gMDtcXFxcXFxcXFxcXFxuICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IDA7XFxcXFxcXFxcXFxcbiAgICAgIGRvIHtcXFxcXFxcXFxcXFxuICAgICAgICBpZiAoYWxyZWFkeVByb2Nlc3NlZFRhaWwpIHtcXFxcXFxcXFxcXFxuICAgICAgICAgIHdlaWdodCA9ICcgKyB0aGlzLnJhdGlvV2VpZ2h0ICsgJzsnO1xcXFxuICBmb3IgKGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgdGhpcy5jaGFubmVsczsgKytjaGFubmVsKSB7XFxcXG4gICAgdG9Db21waWxlICs9ICdvdXRwdXQnICsgY2hhbm5lbCArICcgPSAwOyc7XFxcXG4gIH1cXFxcbiAgdG9Db21waWxlICs9ICd9XFxcXFxcXFxcXFxcbiAgICAgICAgZWxzZSB7XFxcXFxcXFxcXFxcbiAgICAgICAgICB3ZWlnaHQgPSB0aGlzLmxhc3RXZWlnaHQ7JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAnb3V0cHV0JyArIGNoYW5uZWwgKyAnID0gdGhpcy5sYXN0T3V0cHV0WycgKyBjaGFubmVsICsgJ107JztcXFxcbiAgfVxcXFxuICB0b0NvbXBpbGUgKz0gJ2FscmVhZHlQcm9jZXNzZWRUYWlsID0gdHJ1ZTtcXFxcXFxcXFxcXFxuICAgICAgICB9XFxcXFxcXFxcXFxcbiAgICAgICAgd2hpbGUgKHdlaWdodCA+IDAgJiYgYWN0dWFsUG9zaXRpb24gPCBidWZmZXJMZW5ndGgpIHtcXFxcXFxcXFxcXFxuICAgICAgICAgIGFtb3VudFRvTmV4dCA9IDEgKyBhY3R1YWxQb3NpdGlvbiAtIGN1cnJlbnRQb3NpdGlvbjtcXFxcXFxcXFxcXFxuICAgICAgICAgIGlmICh3ZWlnaHQgPj0gYW1vdW50VG9OZXh0KSB7JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAnb3V0cHV0JyArIGNoYW5uZWwgKyAnICs9IGJ1ZmZlclthY3R1YWxQb3NpdGlvbisrXSAqIGFtb3VudFRvTmV4dDsnO1xcXFxuICB9XFxcXG4gIHRvQ29tcGlsZSArPSAnY3VycmVudFBvc2l0aW9uID0gYWN0dWFsUG9zaXRpb247XFxcXFxcXFxcXFxcbiAgICAgICAgICAgIHdlaWdodCAtPSBhbW91bnRUb05leHQ7XFxcXFxcXFxcXFxcbiAgICAgICAgICB9XFxcXFxcXFxcXFxcbiAgICAgICAgICBlbHNlIHsnO1xcXFxuICBmb3IgKGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgdGhpcy5jaGFubmVsczsgKytjaGFubmVsKSB7XFxcXG4gICAgdG9Db21waWxlICs9ICdvdXRwdXQnICsgY2hhbm5lbCArICcgKz0gYnVmZmVyW2FjdHVhbFBvc2l0aW9uJyArIChjaGFubmVsID4gMCA/ICcgKyAnICsgY2hhbm5lbCA6ICcnKSArICddICogd2VpZ2h0Oyc7XFxcXG4gIH1cXFxcbiAgdG9Db21waWxlICs9ICdjdXJyZW50UG9zaXRpb24gKz0gd2VpZ2h0O1xcXFxcXFxcXFxcXG4gICAgICAgICAgICB3ZWlnaHQgPSAwO1xcXFxcXFxcXFxcXG4gICAgICAgICAgICBicmVhaztcXFxcXFxcXFxcXFxuICAgICAgICAgIH1cXFxcXFxcXFxcXFxuICAgICAgICB9XFxcXFxcXFxcXFxcbiAgICAgICAgaWYgKHdlaWdodCA8PSAwKSB7JztcXFxcbiAgZm9yIChjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7ICsrY2hhbm5lbCkge1xcXFxuICAgIHRvQ29tcGlsZSArPSAnb3V0cHV0QnVmZmVyW291dHB1dE9mZnNldCsrXSA9IG91dHB1dCcgKyBjaGFubmVsICsgJyAvICcgKyB0aGlzLnJhdGlvV2VpZ2h0ICsgJzsnO1xcXFxuICB9XFxcXG4gIHRvQ29tcGlsZSArPSAnfVxcXFxcXFxcXFxcXG4gICAgICAgIGVsc2Uge1xcXFxcXFxcXFxcXG4gICAgICAgICAgdGhpcy5sYXN0V2VpZ2h0ID0gd2VpZ2h0Oyc7XFxcXG4gIGZvciAoY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCB0aGlzLmNoYW5uZWxzOyArK2NoYW5uZWwpIHtcXFxcbiAgICB0b0NvbXBpbGUgKz0gJ3RoaXMubGFzdE91dHB1dFsnICsgY2hhbm5lbCArICddID0gb3V0cHV0JyArIGNoYW5uZWwgKyAnOyc7XFxcXG4gIH1cXFxcbiAgdG9Db21waWxlICs9ICd0aGlzLnRhaWxFeGlzdHMgPSB0cnVlO1xcXFxcXFxcXFxcXG4gICAgICAgICAgYnJlYWs7XFxcXFxcXFxcXFxcbiAgICAgICAgfVxcXFxcXFxcXFxcXG4gICAgICB9IHdoaWxlIChhY3R1YWxQb3NpdGlvbiA8IGJ1ZmZlckxlbmd0aCAmJiBvdXRwdXRPZmZzZXQgPCBvdXRMZW5ndGgpO1xcXFxcXFxcXFxcXG4gICAgICByZXR1cm4gdGhpcy5idWZmZXJTbGljZShvdXRwdXRPZmZzZXQpO1xcXFxcXFxcXFxcXG4gICAgfVxcXFxcXFxcXFxcXG4gICAgZWxzZSB7XFxcXFxcXFxcXFxcbiAgICAgIHJldHVybiAodGhpcy5ub1JldHVybikgPyAwIDogW107XFxcXFxcXFxcXFxcbiAgICB9XFxcXFxcXFxcXFxcbiAgfVxcXFxcXFxcXFxcXG4gIGVsc2Uge1xcXFxcXFxcXFxcXG4gICAgdGhyb3cobmV3IEVycm9yKFxcXFxcXFwiQnVmZmVyIHdhcyBvZiBpbmNvcnJlY3Qgc2FtcGxlIGxlbmd0aC5cXFxcXFxcIikpO1xcXFxcXFxcXFxcXG4gIH0nO1xcXFxuXFxcXG4gIHRoaXMucmVzYW1wbGUgPSBGdW5jdGlvbignYnVmZmVyJywgJ3VwVG8nLCB0b0NvbXBpbGUpO1xcXFxufTtcXFxcblxcXFxuUmVzYW1wbGVyLnByb3RvdHlwZS5ieXBhc3NSZXNhbXBsZXIgPSBmdW5jdGlvbiAoYnVmZmVyLCB1cFRvKSB7XFxcXG4gIHRoaXMub3V0cHV0QnVmZmVyID0gYnVmZmVyO1xcXFxuICByZXR1cm4gdGhpcy5idWZmZXJTbGljZSh1cFRvKTtcXFxcbn07XFxcXG5cXFxcblJlc2FtcGxlci5wcm90b3R5cGUuYnVmZmVyU2xpY2UgPSBmdW5jdGlvbiAoc2xpY2VBbW91bnQpIHtcXFxcbiAgaWYgKHRoaXMubm9SZXR1cm4pIHtcXFxcbiAgICByZXR1cm4gc2xpY2VBbW91bnQ7XFxcXG4gIH0gZWxzZSB7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgIHJldHVybiB0aGlzLm91dHB1dEJ1ZmZlci5zdWJhcnJheSgwLCBzbGljZUFtb3VudCk7XFxcXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcXFxcbiAgICAgIHRyeSB7XFxcXG4gICAgICAgIHRoaXMub3V0cHV0QnVmZmVyLmxlbmd0aCA9IHNsaWNlQW1vdW50O1xcXFxuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRCdWZmZXI7XFxcXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xcXFxuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRCdWZmZXIuc2xpY2UoMCwgc2xpY2VBbW91bnQpO1xcXFxuICAgICAgfVxcXFxuICAgIH1cXFxcbiAgfVxcXFxufTtcXFxcblxcXFxuUmVzYW1wbGVyLnByb3RvdHlwZS5pbml0aWFsaXplQnVmZmVycyA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgdHJ5IHtcXFxcbiAgICB0aGlzLm91dHB1dEJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5vdXRwdXRCdWZmZXJTaXplKTtcXFxcbiAgICB0aGlzLmxhc3RPdXRwdXQgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuY2hhbm5lbHMpO1xcXFxuICB9IGNhdGNoIChlcnJvcikge1xcXFxuICAgIHRoaXMub3V0cHV0QnVmZmVyID0gW107XFxcXG4gICAgdGhpcy5sYXN0T3V0cHV0ID0gW107XFxcXG4gIH1cXFxcbn07XFxcXG5cXFxcbm1vZHVsZS5leHBvcnRzID0gUmVzYW1wbGVyO1xcXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12Ylc5a2RXeGxjeTl5WlhOaGJYQnNaWEl1YW5NL1lXVTRNaUpkTENKdVlXMWxjeUk2V3lKU1pYTmhiWEJzWlhJaUxDSm1jbTl0VTJGdGNHeGxVbUYwWlNJc0luUnZVMkZ0Y0d4bFVtRjBaU0lzSW1Ob1lXNXVaV3h6SWl3aWIzVjBjSFYwUW5WbVptVnlVMmw2WlNJc0ltNXZVbVYwZFhKdUlpd2lhVzVwZEdsaGJHbDZaU0lzSW5CeWIzUnZkSGx3WlNJc0luSmxjMkZ0Y0d4bElpd2lZbmx3WVhOelVtVnpZVzF3YkdWeUlpd2ljbUYwYVc5WFpXbG5hSFFpTENKamIyMXdhV3hsVEdsdVpXRnlTVzUwWlhKd2IyeGhkR2x2YmtaMWJtTjBhVzl1SWl3aWJHRnpkRmRsYVdkb2RDSXNJbU52YlhCcGJHVk5kV3gwYVZSaGNFWjFibU4wYVc5dUlpd2lkR0ZwYkVWNGFYTjBjeUlzSW1sdWFYUnBZV3hwZW1WQ2RXWm1aWEp6SWl3aVJYSnliM0lpTENKamFHRnVibVZzSWl3aWRHOURiMjF3YVd4bElpd2lSblZ1WTNScGIyNGlMQ0ppZFdabVpYSWlMQ0oxY0ZSdklpd2liM1YwY0hWMFFuVm1abVZ5SWl3aVluVm1abVZ5VTJ4cFkyVWlMQ0p6YkdsalpVRnRiM1Z1ZENJc0luTjFZbUZ5Y21GNUlpd2laWEp5YjNJaUxDSnNaVzVuZEdnaUxDSnpiR2xqWlNJc0lrWnNiMkYwTXpKQmNuSmhlU0lzSW14aGMzUlBkWFJ3ZFhRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVdEJMRk5CUVZOQkxGTkJRVlFzUTBGQmJVSkRMR05CUVc1Q0xFVkJRVzFEUXl4WlFVRnVReXhGUVVGcFJFTXNVVUZCYWtRc1JVRkJNa1JETEdkQ1FVRXpSQ3hGUVVFMlJVTXNVVUZCTjBVc1JVRkJkVVk3UVVGRGNrWXNUMEZCUzBvc1kwRkJUQ3hIUVVGelFrRXNZMEZCZEVJN1FVRkRRU3hQUVVGTFF5eFpRVUZNTEVkQlFXOUNRU3haUVVGd1FqdEJRVU5CTEU5QlFVdERMRkZCUVV3c1IwRkJaMEpCTEZkQlFWY3NRMEZCTTBJN1FVRkRRU3hQUVVGTFF5eG5Ra0ZCVEN4SFFVRjNRa0VzWjBKQlFYaENPMEZCUTBFc1QwRkJTME1zVVVGQlRDeEhRVUZuUWl4RFFVRkRMRU5CUVVOQkxGRkJRV3hDTzBGQlEwRXNUMEZCUzBNc1ZVRkJURHRCUVVORU96dEJRVVZFVGl4VlFVRlZUeXhUUVVGV0xFTkJRVzlDUkN4VlFVRndRaXhIUVVGcFF5eFpRVUZYTzBGQlJURkRMRTFCUVVrc1MwRkJTMHdzWTBGQlRDeEhRVUZ6UWl4RFFVRjBRaXhKUVVFeVFpeExRVUZMUXl4WlFVRk1MRWRCUVc5Q0xFTkJRUzlETEVsQlFXOUVMRXRCUVV0RExGRkJRVXdzUjBGQlowSXNRMEZCZUVVc1JVRkJNa1U3UVVGRGVrVXNVVUZCU1N4TFFVRkxSaXhqUVVGTUxFbEJRWFZDTEV0QlFVdERMRmxCUVdoRExFVkJRVGhETzBGQlJUVkRMRmRCUVV0TkxGRkJRVXdzUjBGQlowSXNTMEZCUzBNc1pVRkJja0k3UVVGRFFTeFhRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFTkJRVzVDTzBGQlEwUXNTMEZLUkN4TlFVdExPMEZCUTBnc1YwRkJTMEVzVjBGQlRDeEhRVUZ0UWl4TFFVRkxWQ3hqUVVGTUxFZEJRWE5DTEV0QlFVdERMRmxCUVRsRE8wRkJRMEVzVlVGQlNTeExRVUZMUkN4alFVRk1MRWRCUVhOQ0xFdEJRVXRETEZsQlFTOUNMRVZCUVRaRE8wRkJUVE5ETEdGQlFVdFRMR3REUVVGTU8wRkJRMEVzWVVGQlMwTXNWVUZCVEN4SFFVRnJRaXhEUVVGc1FqdEJRVU5FTEU5QlVrUXNUVUZUU3p0QlFVMUlMR0ZCUVV0RExIVkNRVUZNTzBGQlEwRXNZVUZCUzBNc1ZVRkJUQ3hIUVVGclFpeExRVUZzUWp0QlFVTkJMR0ZCUVV0R0xGVkJRVXdzUjBGQmEwSXNRMEZCYkVJN1FVRkRSRHRCUVVORUxGZEJRVXRITEdsQ1FVRk1PMEZCUTBRN1FVRkRSaXhIUVRkQ1JDeE5RVGhDU3p0QlFVTklMRlZCUVU4c1NVRkJTVU1zUzBGQlNpeERRVUZWTEN0RFFVRldMRU5CUVZBN1FVRkRSRHRCUVVOR0xFTkJia05FT3p0QlFYRkRRV2hDTEZWQlFWVlBMRk5CUVZZc1EwRkJiMEpKTEd0RFFVRndRaXhIUVVGNVJDeFpRVUZYTzBGQlEyeEZMRTFCUVVsTkxHZENRVUZLT3p0QlFVVkJMRTFCUVVsRExGbEJRVms3TzNWQ1FVRkJMRWRCUlZFc1MwRkJTMllzVVVGR1lpeEhRVVYzUWpzN096czdPenM3YjBOQlJuaENMRWRCVlhGQ0xFdEJRVXRQTEZkQlZqRkNMRWRCVlhkRE96dDNRMEZXZUVRN1FVRmhRU3hQUVVGTFR5eFZRVUZWTEVOQlFXWXNSVUZCYTBKQkxGVkJRVlVzUzBGQlMyUXNVVUZCYWtNc1JVRkJNa01zUlVGQlJXTXNUMEZCTjBNc1JVRkJjMFE3UVVGRGNFUkRMR2xDUVVGaExIRkVRVUZ4UkVRc1QwRkJja1FzUjBGQkswUXNOa0pCUVM5RUxFZEJRU3RHUVN4UFFVRXZSaXhIUVVGNVJ5eHZRa0ZCZEVnN1FVRkRSRHRCUVVORVF5eGxRVUZoT3pzMFFrRkJRU3hIUVVWblFpeExRVUZMWml4UlFVWnlRaXhIUVVWblF5eDNRMEZHYUVNc1IwRkZNa1VzUzBGQlMwRXNVVUZHYUVZc1IwRkZNa1k3TzNkRFFVWjRSenRCUVV0QkxFOUJRVXRqTEZWQlFWVXNRMEZCWml4RlFVRnJRa0VzVlVGQlZTeExRVUZMWkN4UlFVRnFReXhGUVVFeVF5eEZRVUZGWXl4UFFVRTNReXhGUVVGelJEdEJRVU53UkVNc2FVSkJRV0VzZVVSQlFUQkVSQ3hWUVVGVkxFTkJRVmdzUjBGQmFVSXNVVUZCVVVFc1QwRkJla0lzUjBGQmIwTXNSVUZCTjBZc1NVRkJiVWNzTkVOQlFXNUhMRWxCUVcxS0xFdEJRVXRrTEZGQlFVd3NSMEZCWjBKakxFOUJRVzVMTEVsQlFUaExMRzlDUVVFelREdEJRVU5FTzBGQlEwUkRMR1ZCUVdFc1pVRkJaU3hMUVVGTFVpeFhRVUZ3UWl4SFFVRnJRenMyUTBGQmJFTXNSMEZEYVVNc1MwRkJTMUFzVVVGRWRFTXNSMEZEYVVRN1VVRkVPVVE3UVVGSFFTeFBRVUZMWXl4VlFVRlZMRU5CUVdZc1JVRkJhMEpCTEZWQlFWVXNTMEZCUzJRc1VVRkJha01zUlVGQk1rTXNSVUZCUldNc1QwRkJOME1zUlVGQmMwUTdRVUZEY0VSRExHbENRVUZoTEhGQ1FVRnhRa1FzVDBGQmNrSXNSMEZCSzBJc05rSkJRVFZETzBGQlEwUTdRVUZEUkVNc1pVRkJZVHM3T3pzN096czdPMGxCUVdJN08wRkJWMEVzVDBGQlMxWXNVVUZCVEN4SFFVRm5RbGNzVTBGQlV5eFJRVUZVTEVWQlFXMUNMRTFCUVc1Q0xFVkJRVEpDUkN4VFFVRXpRaXhEUVVGb1FqdEJRVVZFTEVOQk9VTkVPenRCUVdkRVFXeENMRlZCUVZWUExGTkJRVllzUTBGQmIwSk5MSFZDUVVGd1FpeEhRVUU0UXl4WlFVRlhPMEZCUTNaRUxFMUJRVWxKTEdkQ1FVRktPenRCUVVWQkxFMUJRVWxETEZsQlFWazdPM1ZDUVVGQkxFZEJSVkVzUzBGQlMyWXNVVUZHWWl4SFFVVjNRanM3YzBKQlJuaERPMEZCUzBFc1QwRkJTMk1zVlVGQlZTeERRVUZtTEVWQlFXdENRU3hWUVVGVkxFdEJRVXRrTEZGQlFXcERMRVZCUVRKRExFVkJRVVZqTEU5QlFUZERMRVZCUVhORU8wRkJRM0JFUXl4cFFrRkJZU3hsUVVGbFJDeFBRVUZtTEVkQlFYbENMRTlCUVhSRE8wRkJRMFE3UVVGRFJFTXNaVUZCWVRzN096czdPenM3TzI5Q1FVRkJMRWRCVTFFc1MwRkJTMUlzVjBGVVlpeEhRVk15UWl4SFFWUjRRenRCUVZWQkxFOUJRVXRQTEZWQlFWVXNRMEZCWml4RlFVRnJRa0VzVlVGQlZTeExRVUZMWkN4UlFVRnFReXhGUVVFeVF5eEZRVUZGWXl4UFFVRTNReXhGUVVGelJEdEJRVU53UkVNc2FVSkJRV0VzVjBGQlYwUXNUMEZCV0N4SFFVRnhRaXhQUVVGc1F6dEJRVU5FTzBGQlEwUkRMR1ZCUVdFN08yOURRVUZpTzBGQlIwRXNUMEZCUzBRc1ZVRkJWU3hEUVVGbUxFVkJRV3RDUVN4VlFVRlZMRXRCUVV0a0xGRkJRV3BETEVWQlFUSkRMRVZCUVVWakxFOUJRVGRETEVWQlFYTkVPMEZCUTNCRVF5eHBRa0ZCWVN4WFFVRlhSQ3hQUVVGWUxFZEJRWEZDTEhGQ1FVRnlRaXhIUVVFMlEwRXNUMEZCTjBNc1IwRkJkVVFzU1VGQmNFVTdRVUZEUkR0QlFVTkVReXhsUVVGaE96czdPM2REUVVGaU8wRkJTMEVzVDBGQlMwUXNWVUZCVlN4RFFVRm1MRVZCUVd0Q1FTeFZRVUZWTEV0QlFVdGtMRkZCUVdwRExFVkJRVEpETEVWQlFVVmpMRTlCUVRkRExFVkJRWE5FTzBGQlEzQkVReXhwUWtGQllTeFhRVUZYUkN4UFFVRllMRWRCUVhGQ0xEaERRVUZzUXp0QlFVTkVPMEZCUTBSRExHVkJRV0U3T3p0cFFrRkJZanRCUVVsQkxFOUJRVXRFTEZWQlFWVXNRMEZCWml4RlFVRnJRa0VzVlVGQlZTeExRVUZMWkN4UlFVRnFReXhGUVVFeVF5eEZRVUZGWXl4UFFVRTNReXhGUVVGelJEdEJRVU53UkVNc2FVSkJRV0VzVjBGQlYwUXNUMEZCV0N4SFFVRnhRaXd5UWtGQmNrSXNTVUZCY1VSQkxGVkJRVlVzUTBGQldDeEhRVUZwUWl4UlFVRlJRU3hQUVVGNlFpeEhRVUZ2UXl4RlFVRjRSaXhKUVVFNFJpeGhRVUV6Unp0QlFVTkVPMEZCUTBSRExHVkJRV0U3T3pzN096SkNRVUZpTzBGQlRVRXNUMEZCUzBRc1ZVRkJWU3hEUVVGbUxFVkJRV3RDUVN4VlFVRlZMRXRCUVV0a0xGRkJRV3BETEVWQlFUSkRMRVZCUVVWakxFOUJRVGRETEVWQlFYTkVPMEZCUTNCRVF5eHBRa0ZCWVN3d1EwRkJNRU5FTEU5QlFURkRMRWRCUVc5RUxFdEJRWEJFTEVkQlFUUkVMRXRCUVV0UUxGZEJRV3BGTEVkQlFTdEZMRWRCUVRWR08wRkJRMFE3UVVGRFJGRXNaVUZCWVRzN2IwTkJRV0k3UVVGSFFTeFBRVUZMUkN4VlFVRlZMRU5CUVdZc1JVRkJhMEpCTEZWQlFWVXNTMEZCUzJRc1VVRkJha01zUlVGQk1rTXNSVUZCUldNc1QwRkJOME1zUlVGQmMwUTdRVUZEY0VSRExHbENRVUZoTEhGQ1FVRnhRa1FzVDBGQmNrSXNSMEZCSzBJc1dVRkJMMElzUjBGQk9FTkJMRTlCUVRsRExFZEJRWGRFTEVkQlFYSkZPMEZCUTBRN1FVRkRSRU1zWlVGQllUczdPenM3T3pzN096czdPMGxCUVdJN08wRkJZMEVzVDBGQlMxWXNVVUZCVEN4SFFVRm5RbGNzVTBGQlV5eFJRVUZVTEVWQlFXMUNMRTFCUVc1Q0xFVkJRVEpDUkN4VFFVRXpRaXhEUVVGb1FqdEJRVVZFTEVOQk5VVkVPenRCUVRoRlFXeENMRlZCUVZWUExGTkJRVllzUTBGQmIwSkZMR1ZCUVhCQ0xFZEJRWE5ETEZWQlFWTlhMRTFCUVZRc1JVRkJhVUpETEVsQlFXcENMRVZCUVhWQ08wRkJRek5FTEU5QlFVdERMRmxCUVV3c1IwRkJiMEpHTEUxQlFYQkNPMEZCUTBFc1UwRkJUeXhMUVVGTFJ5eFhRVUZNTEVOQlFXbENSaXhKUVVGcVFpeERRVUZRTzBGQlEwUXNRMEZJUkRzN1FVRkxRWEpDTEZWQlFWVlBMRk5CUVZZc1EwRkJiMEpuUWl4WFFVRndRaXhIUVVGclF5eFZRVUZUUXl4WFFVRlVMRVZCUVhOQ08wRkJRM1JFTEUxQlFVa3NTMEZCUzI1Q0xGRkJRVlFzUlVGQmJVSTdRVUZGYWtJc1YwRkJUMjFDTEZkQlFWQTdRVUZEUkN4SFFVaEVMRTFCU1VzN1FVRkZTQ3hSUVVGSk8wRkJRMFlzWVVGQlR5eExRVUZMUml4WlFVRk1MRU5CUVd0Q1J5eFJRVUZzUWl4RFFVRXlRaXhEUVVFelFpeEZRVUU0UWtRc1YwRkJPVUlzUTBGQlVEdEJRVU5FTEV0QlJrUXNRMEZIUVN4UFFVRlBSU3hMUVVGUUxFVkJRV003UVVGRFdpeFZRVUZKTzBGQlJVWXNZVUZCUzBvc1dVRkJUQ3hEUVVGclFrc3NUVUZCYkVJc1IwRkJNa0pJTEZkQlFUTkNPMEZCUTBFc1pVRkJUeXhMUVVGTFJpeFpRVUZhTzBGQlEwUXNUMEZLUkN4RFFVdEJMRTlCUVU5SkxFdEJRVkFzUlVGQll6dEJRVVZhTEdWQlFVOHNTMEZCUzBvc1dVRkJUQ3hEUVVGclFrMHNTMEZCYkVJc1EwRkJkMElzUTBGQmVFSXNSVUZCTWtKS0xGZEJRVE5DTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkRSaXhEUVhSQ1JEczdRVUYzUWtGNFFpeFZRVUZWVHl4VFFVRldMRU5CUVc5Q1VTeHBRa0ZCY0VJc1IwRkJkME1zV1VGQlZ6dEJRVVZxUkN4TlFVRkpPMEZCUTBZc1UwRkJTMDhzV1VGQlRDeEhRVUZ2UWl4SlFVRkpUeXhaUVVGS0xFTkJRV2xDTEV0QlFVdDZRaXhuUWtGQmRFSXNRMEZCY0VJN1FVRkRRU3hUUVVGTE1FSXNWVUZCVEN4SFFVRnJRaXhKUVVGSlJDeFpRVUZLTEVOQlFXbENMRXRCUVVzeFFpeFJRVUYwUWl4RFFVRnNRanRCUVVORUxFZEJTRVFzUTBGSlFTeFBRVUZQZFVJc1MwRkJVQ3hGUVVGak8wRkJRMW9zVTBGQlMwb3NXVUZCVEN4SFFVRnZRaXhGUVVGd1FqdEJRVU5CTEZOQlFVdFJMRlZCUVV3c1IwRkJhMElzUlVGQmJFSTdRVUZEUkR0QlFVTkdMRU5CVmtRN08wRkJXVUZETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpvUXl4VFFVRnFRaUlzSW1acGJHVWlPaUl5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdLaTljYmx4dUx5OUtZWFpoVTJOeWFYQjBJRUYxWkdsdklGSmxjMkZ0Y0d4bGNseHVMeTlEYjNCNWNtbG5hSFFnS0VNcElESXdNVEV0TWpBeE5TQkhjbUZ1ZENCSFlXeHBkSHBjYmk4dlVtVnNaV0Z6WldRZ2RHOGdVSFZpYkdsaklFUnZiV0ZwYmx4dVpuVnVZM1JwYjI0Z1VtVnpZVzF3YkdWeUtHWnliMjFUWVcxd2JHVlNZWFJsTENCMGIxTmhiWEJzWlZKaGRHVXNJR05vWVc1dVpXeHpMQ0J2ZFhSd2RYUkNkV1ptWlhKVGFYcGxMQ0J1YjFKbGRIVnliaWtnZTF4dUlDQjBhR2x6TG1aeWIyMVRZVzF3YkdWU1lYUmxJRDBnWm5KdmJWTmhiWEJzWlZKaGRHVTdYRzRnSUhSb2FYTXVkRzlUWVcxd2JHVlNZWFJsSUQwZ2RHOVRZVzF3YkdWU1lYUmxPMXh1SUNCMGFHbHpMbU5vWVc1dVpXeHpJRDBnWTJoaGJtNWxiSE1nZkNBd08xeHVJQ0IwYUdsekxtOTFkSEIxZEVKMVptWmxjbE5wZW1VZ1BTQnZkWFJ3ZFhSQ2RXWm1aWEpUYVhwbE8xeHVJQ0IwYUdsekxtNXZVbVYwZFhKdUlEMGdJU0Z1YjFKbGRIVnlianRjYmlBZ2RHaHBjeTVwYm1sMGFXRnNhWHBsS0NrN1hHNTlYRzVjYmxKbGMyRnRjR3hsY2k1d2NtOTBiM1I1Y0dVdWFXNXBkR2xoYkdsNlpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQXZMMUJsY21admNtMGdjMjl0WlNCamFHVmphM002WEc0Z0lHbG1JQ2gwYUdsekxtWnliMjFUWVcxd2JHVlNZWFJsSUQ0Z01DQW1KaUIwYUdsekxuUnZVMkZ0Y0d4bFVtRjBaU0ErSURBZ0ppWWdkR2hwY3k1amFHRnVibVZzY3lBK0lEQXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NW1jbTl0VTJGdGNHeGxVbUYwWlNBOVBTQjBhR2x6TG5SdlUyRnRjR3hsVW1GMFpTa2dlMXh1SUNBZ0lDQWdMeTlUWlhSMWNDQmhJSEpsYzJGdGNHeGxjaUJpZVhCaGMzTTZYRzRnSUNBZ0lDQjBhR2x6TG5KbGMyRnRjR3hsSUQwZ2RHaHBjeTVpZVhCaGMzTlNaWE5oYlhCc1pYSTdJQ0FnSUM4dlVtVnpZVzF3YkdWeUlHcDFjM1FnY21WMGRYSnVjeUIzYUdGMElIZGhjeUJ3WVhOelpXUWdkR2h5YjNWbmFDNWNiaUFnSUNBZ0lIUm9hWE11Y21GMGFXOVhaV2xuYUhRZ1BTQXhPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWNtRjBhVzlYWldsbmFIUWdQU0IwYUdsekxtWnliMjFUWVcxd2JHVlNZWFJsSUM4Z2RHaHBjeTUwYjFOaGJYQnNaVkpoZEdVN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1bWNtOXRVMkZ0Y0d4bFVtRjBaU0E4SUhSb2FYTXVkRzlUWVcxd2JHVlNZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDOHFYRzRnSUNBZ0lDQWdJQ0FnVlhObElHZGxibVZ5YVdNZ2JHbHVaV0Z5SUdsdWRHVnljRzlzWVhScGIyNGdhV1lnZFhCellXMXdiR2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQmhjeUJzYVc1bFlYSWdhVzUwWlhKd2IyeGhkR2x2YmlCd2NtOWtkV05sY3lCaElHZHlZV1JwWlc1MElIUm9ZWFFnZDJVZ2QyRnVkRnh1SUNBZ0lDQWdJQ0FnSUdGdVpDQjNiM0pyY3lCbWFXNWxJSGRwZEdnZ2RIZHZJR2x1Y0hWMElITmhiWEJzWlNCd2IybHVkSE1nY0dWeUlHOTFkSEIxZENCcGJpQjBhR2x6SUdOaGMyVXVYRzRnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl0Y0dsc1pVeHBibVZoY2tsdWRHVnljRzlzWVhScGIyNUdkVzVqZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhjM1JYWldsbmFIUWdQU0F4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzhxWEc0Z0lDQWdJQ0FnSUNBZ1EzVnpkRzl0SUhKbGMyRnRjR3hsY2lCSklIZHliM1JsSUhSb1lYUWdaRzlsYzI0bmRDQnphMmx3SUhOaGJYQnNaWE5jYmlBZ0lDQWdJQ0FnSUNCc2FXdGxJSE4wWVc1a1lYSmtJR3hwYm1WaGNpQnBiblJsY25CdmJHRjBhVzl1SUdsdUlHaHBaMmdnWkc5M2JuTmhiWEJzYVc1bkxseHVJQ0FnSUNBZ0lDQWdJRlJvYVhNZ2FYTWdiVzl5WlNCaFkyTjFjbUYwWlNCMGFHRnVJR3hwYm1WaGNpQnBiblJsY25CdmJHRjBhVzl1SUc5dUlHUnZkMjV6WVcxd2JHbHVaeTVjYmlBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxd2FXeGxUWFZzZEdsVVlYQkdkVzVqZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUmhhV3hGZUdsemRITWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c1lYTjBWMlZwWjJoMElEMGdNRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWFXNXBkR2xoYkdsNlpVSjFabVpsY25Nb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ0tHNWxkeUJGY25KdmNpZ25TVzUyWVd4cFpDQnpaWFIwYVc1bmN5QnpjR1ZqYVdacFpXUWdabTl5SUhSb1pTQnlaWE5oYlhCc1pYSXVKeWtwTzF4dUlDQjlYRzU5TzF4dVhHNVNaWE5oYlhCc1pYSXVjSEp2ZEc5MGVYQmxMbU52YlhCcGJHVk1hVzVsWVhKSmJuUmxjbkJ2YkdGMGFXOXVSblZ1WTNScGIyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdiR1YwSUdOb1lXNXVaV3c3WEc0Z0lDOHFhbk5vYVc1MElHMTFiSFJwYzNSeU9pQjBjblZsSUNvdlhHNGdJR3hsZENCMGIwTnZiWEJwYkdVZ1BTQW5kbUZ5SUdKMVptWmxja3hsYm1kMGFDQTlJRTFoZEdndWJXbHVLR0oxWm1abGNpNXNaVzVuZEdnc0lIVndWRzhwTzF4Y1hHNGdJSFpoY2lCdmRYUk1aVzVuZEdnZ1BTQjBhR2x6TG05MWRIQjFkRUoxWm1abGNsTnBlbVU3WEZ4Y2JpQWdhV1lnS0NoaWRXWm1aWEpNWlc1bmRHZ2dKU0FuSUNzZ2RHaHBjeTVqYUdGdWJtVnNjeUFySUNjcElEMDlJREFwSUh0Y1hGeHVJQ0FnSUdsbUlDaGlkV1ptWlhKTVpXNW5kR2dnUGlBd0tTQjdYRnhjYmlBZ0lDQWdJSFpoY2lCM1pXbG5hSFFnUFNCMGFHbHpMbXhoYzNSWFpXbG5hSFE3WEZ4Y2JpQWdJQ0FnSUhaaGNpQm1hWEp6ZEZkbGFXZG9kQ0E5SURBN1hGeGNiaUFnSUNBZ0lIWmhjaUJ6WldOdmJtUlhaV2xuYUhRZ1BTQXdPMXhjWEc0Z0lDQWdJQ0IyWVhJZ2MyOTFjbU5sVDJabWMyVjBJRDBnTUR0Y1hGeHVJQ0FnSUNBZ2RtRnlJRzkxZEhCMWRFOW1abk5sZENBOUlEQTdYRnhjYmlBZ0lDQWdJSFpoY2lCdmRYUndkWFJDZFdabVpYSWdQU0IwYUdsekxtOTFkSEIxZEVKMVptWmxjanRjWEZ4dUlDQWdJQ0FnWm05eUlDZzdJSGRsYVdkb2RDQThJREU3SUhkbGFXZG9kQ0FyUFNBbklDc2dkR2hwY3k1eVlYUnBiMWRsYVdkb2RDQXJJQ2NwSUh0Y1hGeHVJQ0FnSUNBZ0lDQnpaV052Ym1SWFpXbG5hSFFnUFNCM1pXbG5hSFFnSlNBeE8xeGNYRzRnSUNBZ0lDQWdJR1pwY25OMFYyVnBaMmgwSUQwZ01TQXRJSE5sWTI5dVpGZGxhV2RvZERzbk8xeHVJQ0JtYjNJZ0tHTm9ZVzV1Wld3Z1BTQXdPeUJqYUdGdWJtVnNJRHdnZEdocGN5NWphR0Z1Ym1Wc2N6c2dLeXRqYUdGdWJtVnNLU0I3WEc0Z0lDQWdkRzlEYjIxd2FXeGxJQ3M5SUNkdmRYUndkWFJDZFdabVpYSmJiM1YwY0hWMFQyWm1jMlYwS3l0ZElEMGdLSFJvYVhNdWJHRnpkRTkxZEhCMWRGc25JQ3NnWTJoaGJtNWxiQ0FySUNkZElDb2dabWx5YzNSWFpXbG5hSFFwSUNzZ0tHSjFabVpsY2xzbklDc2dZMmhoYm01bGJDQXJJQ2RkSUNvZ2MyVmpiMjVrVjJWcFoyaDBLVHNuTzF4dUlDQjlYRzRnSUhSdlEyOXRjR2xzWlNBclBTQW5mVnhjWEc0Z0lDQWdJQ0IzWldsbmFIUWdMVDBnTVR0Y1hGeHVJQ0FnSUNBZ1ptOXlJQ2hpZFdabVpYSk1aVzVuZEdnZ0xUMGdKeUFySUhSb2FYTXVZMmhoYm01bGJITWdLeUFuTENCemIzVnlZMlZQWm1aelpYUWdQU0JOWVhSb0xtWnNiMjl5S0hkbGFXZG9kQ2tnS2lBbklDc2dkR2hwY3k1amFHRnVibVZzY3lBcklDYzdJRzkxZEhCMWRFOW1abk5sZENBOElHOTFkRXhsYm1kMGFDQW1KaUJ6YjNWeVkyVlBabVp6WlhRZ1BDQmlkV1ptWlhKTVpXNW5kR2c3S1NCN1hGeGNiaUFnSUNBZ0lDQWdjMlZqYjI1a1YyVnBaMmgwSUQwZ2QyVnBaMmgwSUNVZ01UdGNYRnh1SUNBZ0lDQWdJQ0JtYVhKemRGZGxhV2RvZENBOUlERWdMU0J6WldOdmJtUlhaV2xuYUhRN0p6dGNiaUFnWm05eUlDaGphR0Z1Ym1Wc0lEMGdNRHNnWTJoaGJtNWxiQ0E4SUhSb2FYTXVZMmhoYm01bGJITTdJQ3NyWTJoaGJtNWxiQ2tnZTF4dUlDQWdJSFJ2UTI5dGNHbHNaU0FyUFNBbmIzVjBjSFYwUW5WbVptVnlXMjkxZEhCMWRFOW1abk5sZENzclhTQTlJQ2hpZFdabVpYSmJjMjkxY21ObFQyWm1jMlYwSnlBcklDZ29ZMmhoYm01bGJDQStJREFwSUQ4Z0tDY2dLeUFuSUNzZ1kyaGhibTVsYkNrZ09pQW5KeWtnS3lBblhTQXFJR1pwY25OMFYyVnBaMmgwS1NBcklDaGlkV1ptWlhKYmMyOTFjbU5sVDJabWMyVjBJQ3NnSnlBcklDaDBhR2x6TG1Ob1lXNXVaV3h6SUNzZ1kyaGhibTVsYkNrZ0t5QW5YU0FxSUhObFkyOXVaRmRsYVdkb2RDazdKenRjYmlBZ2ZWeHVJQ0IwYjBOdmJYQnBiR1VnS3owZ0ozZGxhV2RvZENBclBTQW5JQ3NnZEdocGN5NXlZWFJwYjFkbGFXZG9kQ0FySUNjN1hGeGNiaUFnSUNBZ0lDQWdjMjkxY21ObFQyWm1jMlYwSUQwZ1RXRjBhQzVtYkc5dmNpaDNaV2xuYUhRcElDb2dKeUFySUhSb2FYTXVZMmhoYm01bGJITWdLeUFuTzF4Y1hHNGdJQ0FnSUNCOUp6dGNiaUFnWm05eUlDaGphR0Z1Ym1Wc0lEMGdNRHNnWTJoaGJtNWxiQ0E4SUhSb2FYTXVZMmhoYm01bGJITTdJQ3NyWTJoaGJtNWxiQ2tnZTF4dUlDQWdJSFJ2UTI5dGNHbHNaU0FyUFNBbmRHaHBjeTVzWVhOMFQzVjBjSFYwV3ljZ0t5QmphR0Z1Ym1Wc0lDc2dKMTBnUFNCaWRXWm1aWEpiYzI5MWNtTmxUMlptYzJWMEt5dGRPeWM3WEc0Z0lIMWNiaUFnZEc5RGIyMXdhV3hsSUNzOUlDZDBhR2x6TG14aGMzUlhaV2xuYUhRZ1BTQjNaV2xuYUhRZ0pTQXhPMXhjWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aWRXWm1aWEpUYkdsalpTaHZkWFJ3ZFhSUFptWnpaWFFwTzF4Y1hHNGdJQ0FnZlZ4Y1hHNGdJQ0FnWld4elpTQjdYRnhjYmlBZ0lDQWdJSEpsZEhWeWJpQW9kR2hwY3k1dWIxSmxkSFZ5YmlrZ1B5QXdJRG9nVzEwN1hGeGNiaUFnSUNCOVhGeGNiaUFnZlZ4Y1hHNGdJR1ZzYzJVZ2UxeGNYRzRnSUNBZ2RHaHliM2NvYm1WM0lFVnljbTl5S0Z3aVFuVm1abVZ5SUhkaGN5QnZaaUJwYm1OdmNuSmxZM1FnYzJGdGNHeGxJR3hsYm1kMGFDNWNJaWtwTzF4Y1hHNGdJSDBuTzF4dUlDQXZLaUJxYzJocGJuUWdhV2R1YjNKbE9uTjBZWEowSUNvdlhHNGdJSFJvYVhNdWNtVnpZVzF3YkdVZ1BTQkdkVzVqZEdsdmJpZ25ZblZtWm1WeUp5d2dKM1Z3Vkc4bkxDQjBiME52YlhCcGJHVXBPMXh1SUNBdktpQnFjMmhwYm5RZ2FXZHViM0psT21WdVpDQXFMMXh1ZlR0Y2JseHVVbVZ6WVcxd2JHVnlMbkJ5YjNSdmRIbHdaUzVqYjIxd2FXeGxUWFZzZEdsVVlYQkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQnNaWFFnWTJoaGJtNWxiRHRjYmlBZ0x5cHFjMmhwYm5RZ2JYVnNkR2x6ZEhJNklIUnlkV1VnS2k5Y2JpQWdiR1YwSUhSdlEyOXRjR2xzWlNBOUlDZDJZWElnWW5WbVptVnlUR1Z1WjNSb0lEMGdUV0YwYUM1dGFXNG9ZblZtWm1WeUxteGxibWQwYUN3Z2RYQlVieWs3WEZ4Y2JpQWdkbUZ5SUc5MWRFeGxibWQwYUNBOUlIUm9hWE11YjNWMGNIVjBRblZtWm1WeVUybDZaVHRjWEZ4dUlDQnBaaUFvS0dKMVptWmxja3hsYm1kMGFDQWxJQ2NnS3lCMGFHbHpMbU5vWVc1dVpXeHpJQ3NnSnlrZ1BUMGdNQ2tnZTF4Y1hHNGdJQ0FnYVdZZ0tHSjFabVpsY2t4bGJtZDBhQ0ErSURBcElIdGNYRnh1SUNBZ0lDQWdkbUZ5SUhkbGFXZG9kQ0E5SURBN0p6dGNiaUFnWm05eUlDaGphR0Z1Ym1Wc0lEMGdNRHNnWTJoaGJtNWxiQ0E4SUhSb2FYTXVZMmhoYm01bGJITTdJQ3NyWTJoaGJtNWxiQ2tnZTF4dUlDQWdJSFJ2UTI5dGNHbHNaU0FyUFNBbmRtRnlJRzkxZEhCMWRDY2dLeUJqYUdGdWJtVnNJQ3NnSnlBOUlEQTdKenRjYmlBZ2ZWeHVJQ0IwYjBOdmJYQnBiR1VnS3owZ0ozWmhjaUJoWTNSMVlXeFFiM05wZEdsdmJpQTlJREE3WEZ4Y2JpQWdJQ0FnSUhaaGNpQmhiVzkxYm5SVWIwNWxlSFFnUFNBd08xeGNYRzRnSUNBZ0lDQjJZWElnWVd4eVpXRmtlVkJ5YjJObGMzTmxaRlJoYVd3Z1BTQWhkR2hwY3k1MFlXbHNSWGhwYzNSek8xeGNYRzRnSUNBZ0lDQjBhR2x6TG5SaGFXeEZlR2x6ZEhNZ1BTQm1ZV3h6WlR0Y1hGeHVJQ0FnSUNBZ2RtRnlJRzkxZEhCMWRFSjFabVpsY2lBOUlIUm9hWE11YjNWMGNIVjBRblZtWm1WeU8xeGNYRzRnSUNBZ0lDQjJZWElnYjNWMGNIVjBUMlptYzJWMElEMGdNRHRjWEZ4dUlDQWdJQ0FnZG1GeUlHTjFjbkpsYm5SUWIzTnBkR2x2YmlBOUlEQTdYRnhjYmlBZ0lDQWdJR1J2SUh0Y1hGeHVJQ0FnSUNBZ0lDQnBaaUFvWVd4eVpXRmtlVkJ5YjJObGMzTmxaRlJoYVd3cElIdGNYRnh1SUNBZ0lDQWdJQ0FnSUhkbGFXZG9kQ0E5SUNjZ0t5QjBhR2x6TG5KaGRHbHZWMlZwWjJoMElDc2dKenNuTzF4dUlDQm1iM0lnS0dOb1lXNXVaV3dnUFNBd095QmphR0Z1Ym1Wc0lEd2dkR2hwY3k1amFHRnVibVZzY3pzZ0t5dGphR0Z1Ym1Wc0tTQjdYRzRnSUNBZ2RHOURiMjF3YVd4bElDczlJQ2R2ZFhSd2RYUW5JQ3NnWTJoaGJtNWxiQ0FySUNjZ1BTQXdPeWM3WEc0Z0lIMWNiaUFnZEc5RGIyMXdhV3hsSUNzOUlDZDlYRnhjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRnhjYmlBZ0lDQWdJQ0FnSUNCM1pXbG5hSFFnUFNCMGFHbHpMbXhoYzNSWFpXbG5hSFE3Snp0Y2JpQWdabTl5SUNoamFHRnVibVZzSUQwZ01Ec2dZMmhoYm01bGJDQThJSFJvYVhNdVkyaGhibTVsYkhNN0lDc3JZMmhoYm01bGJDa2dlMXh1SUNBZ0lIUnZRMjl0Y0dsc1pTQXJQU0FuYjNWMGNIVjBKeUFySUdOb1lXNXVaV3dnS3lBbklEMGdkR2hwY3k1c1lYTjBUM1YwY0hWMFd5Y2dLeUJqYUdGdWJtVnNJQ3NnSjEwN0p6dGNiaUFnZlZ4dUlDQjBiME52YlhCcGJHVWdLejBnSjJGc2NtVmhaSGxRY205alpYTnpaV1JVWVdsc0lEMGdkSEoxWlR0Y1hGeHVJQ0FnSUNBZ0lDQjlYRnhjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLSGRsYVdkb2RDQStJREFnSmlZZ1lXTjBkV0ZzVUc5emFYUnBiMjRnUENCaWRXWm1aWEpNWlc1bmRHZ3BJSHRjWEZ4dUlDQWdJQ0FnSUNBZ0lHRnRiM1Z1ZEZSdlRtVjRkQ0E5SURFZ0t5QmhZM1IxWVd4UWIzTnBkR2x2YmlBdElHTjFjbkpsYm5SUWIzTnBkR2x2Ymp0Y1hGeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXbG5hSFFnUGowZ1lXMXZkVzUwVkc5T1pYaDBLU0I3Snp0Y2JpQWdabTl5SUNoamFHRnVibVZzSUQwZ01Ec2dZMmhoYm01bGJDQThJSFJvYVhNdVkyaGhibTVsYkhNN0lDc3JZMmhoYm01bGJDa2dlMXh1SUNBZ0lIUnZRMjl0Y0dsc1pTQXJQU0FuYjNWMGNIVjBKeUFySUdOb1lXNXVaV3dnS3lBbklDczlJR0oxWm1abGNsdGhZM1IxWVd4UWIzTnBkR2x2YmlzclhTQXFJR0Z0YjNWdWRGUnZUbVY0ZERzbk8xeHVJQ0I5WEc0Z0lIUnZRMjl0Y0dsc1pTQXJQU0FuWTNWeWNtVnVkRkJ2YzJsMGFXOXVJRDBnWVdOMGRXRnNVRzl6YVhScGIyNDdYRnhjYmlBZ0lDQWdJQ0FnSUNBZ0lIZGxhV2RvZENBdFBTQmhiVzkxYm5SVWIwNWxlSFE3WEZ4Y2JpQWdJQ0FnSUNBZ0lDQjlYRnhjYmlBZ0lDQWdJQ0FnSUNCbGJITmxJSHNuTzF4dUlDQm1iM0lnS0dOb1lXNXVaV3dnUFNBd095QmphR0Z1Ym1Wc0lEd2dkR2hwY3k1amFHRnVibVZzY3pzZ0t5dGphR0Z1Ym1Wc0tTQjdYRzRnSUNBZ2RHOURiMjF3YVd4bElDczlJQ2R2ZFhSd2RYUW5JQ3NnWTJoaGJtNWxiQ0FySUNjZ0t6MGdZblZtWm1WeVcyRmpkSFZoYkZCdmMybDBhVzl1SnlBcklDZ29ZMmhoYm01bGJDQStJREFwSUQ4Z0tDY2dLeUFuSUNzZ1kyaGhibTVsYkNrZ09pQW5KeWtnS3lBblhTQXFJSGRsYVdkb2REc25PMXh1SUNCOVhHNGdJSFJ2UTI5dGNHbHNaU0FyUFNBblkzVnljbVZ1ZEZCdmMybDBhVzl1SUNzOUlIZGxhV2RvZER0Y1hGeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJWcFoyaDBJRDBnTUR0Y1hGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRnhjYmlBZ0lDQWdJQ0FnSUNCOVhGeGNiaUFnSUNBZ0lDQWdmVnhjWEc0Z0lDQWdJQ0FnSUdsbUlDaDNaV2xuYUhRZ1BEMGdNQ2tnZXljN1hHNGdJR1p2Y2lBb1kyaGhibTVsYkNBOUlEQTdJR05vWVc1dVpXd2dQQ0IwYUdsekxtTm9ZVzV1Wld4ek95QXJLMk5vWVc1dVpXd3BJSHRjYmlBZ0lDQjBiME52YlhCcGJHVWdLejBnSjI5MWRIQjFkRUoxWm1abGNsdHZkWFJ3ZFhSUFptWnpaWFFySzEwZ1BTQnZkWFJ3ZFhRbklDc2dZMmhoYm01bGJDQXJJQ2NnTHlBbklDc2dkR2hwY3k1eVlYUnBiMWRsYVdkb2RDQXJJQ2M3Snp0Y2JpQWdmVnh1SUNCMGIwTnZiWEJwYkdVZ0t6MGdKMzFjWEZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjWEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YkdGemRGZGxhV2RvZENBOUlIZGxhV2RvZERzbk8xeHVJQ0JtYjNJZ0tHTm9ZVzV1Wld3Z1BTQXdPeUJqYUdGdWJtVnNJRHdnZEdocGN5NWphR0Z1Ym1Wc2N6c2dLeXRqYUdGdWJtVnNLU0I3WEc0Z0lDQWdkRzlEYjIxd2FXeGxJQ3M5SUNkMGFHbHpMbXhoYzNSUGRYUndkWFJiSnlBcklHTm9ZVzV1Wld3Z0t5QW5YU0E5SUc5MWRIQjFkQ2NnS3lCamFHRnVibVZzSUNzZ0p6c25PMXh1SUNCOVhHNGdJSFJ2UTI5dGNHbHNaU0FyUFNBbmRHaHBjeTUwWVdsc1JYaHBjM1J6SUQwZ2RISjFaVHRjWEZ4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4Y1hHNGdJQ0FnSUNBZ0lIMWNYRnh1SUNBZ0lDQWdmU0IzYUdsc1pTQW9ZV04wZFdGc1VHOXphWFJwYjI0Z1BDQmlkV1ptWlhKTVpXNW5kR2dnSmlZZ2IzVjBjSFYwVDJabWMyVjBJRHdnYjNWMFRHVnVaM1JvS1R0Y1hGeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZblZtWm1WeVUyeHBZMlVvYjNWMGNIVjBUMlptYzJWMEtUdGNYRnh1SUNBZ0lIMWNYRnh1SUNBZ0lHVnNjMlVnZTF4Y1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVibTlTWlhSMWNtNHBJRDhnTUNBNklGdGRPMXhjWEc0Z0lDQWdmVnhjWEc0Z0lIMWNYRnh1SUNCbGJITmxJSHRjWEZ4dUlDQWdJSFJvY205M0tHNWxkeUJGY25KdmNpaGNJa0oxWm1abGNpQjNZWE1nYjJZZ2FXNWpiM0p5WldOMElITmhiWEJzWlNCc1pXNW5kR2d1WENJcEtUdGNYRnh1SUNCOUp6dGNiaUFnTHlvZ2FuTm9hVzUwSUdsbmJtOXlaVHB6ZEdGeWRDQXFMMXh1SUNCMGFHbHpMbkpsYzJGdGNHeGxJRDBnUm5WdVkzUnBiMjRvSjJKMVptWmxjaWNzSUNkMWNGUnZKeXdnZEc5RGIyMXdhV3hsS1R0Y2JpQWdMeW9nYW5Ob2FXNTBJR2xuYm05eVpUcGxibVFnS2k5Y2JuMDdYRzVjYmxKbGMyRnRjR3hsY2k1d2NtOTBiM1I1Y0dVdVlubHdZWE56VW1WellXMXdiR1Z5SUQwZ1puVnVZM1JwYjI0b1luVm1abVZ5TENCMWNGUnZLU0I3WEc0Z0lIUm9hWE11YjNWMGNIVjBRblZtWm1WeUlEMGdZblZtWm1WeU8xeHVJQ0J5WlhSMWNtNGdkR2hwY3k1aWRXWm1aWEpUYkdsalpTaDFjRlJ2S1R0Y2JuMDdYRzVjYmxKbGMyRnRjR3hsY2k1d2NtOTBiM1I1Y0dVdVluVm1abVZ5VTJ4cFkyVWdQU0JtZFc1amRHbHZiaWh6YkdsalpVRnRiM1Z1ZENrZ2UxeHVJQ0JwWmlBb2RHaHBjeTV1YjFKbGRIVnliaWtnZTF4dUlDQWdJQzh2U1dZZ2QyVW5jbVVnWjI5cGJtY2dkRzhnWVdOalpYTnpJSFJvWlNCd2NtOXdaWEowYVdWeklHUnBjbVZqZEd4NUlHWnliMjBnZEdocGN5QnZZbXBsWTNRNlhHNGdJQ0FnY21WMGRYSnVJSE5zYVdObFFXMXZkVzUwTzF4dUlDQjlYRzRnSUdWc2MyVWdlMXh1SUNBZ0lDOHZWSGx3WldRZ1lYSnlZWGtnWVc1a0lHNXZjbTFoYkNCaGNuSmhlU0JpZFdabVpYSWdjMlZqZEdsdmJpQnlaV1psY21WdVkybHVaenBjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzVjBjSFYwUW5WbVptVnlMbk4xWW1GeWNtRjVLREFzSUhOc2FXTmxRVzF2ZFc1MEtUdGNiaUFnSUNCOVhHNGdJQ0FnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBdkwxSmxaM1ZzWVhJZ1lYSnlZWGtnY0dGemN6cGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmRYUndkWFJDZFdabVpYSXViR1Z1WjNSb0lEMGdjMnhwWTJWQmJXOTFiblE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOTFkSEIxZEVKMVptWmxjanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMMDVwWjJoMGJIa2dSbWx5WldadmVDQTBJSFZ6WldRZ2RHOGdhR0YyWlNCMGFHVWdjM1ZpWVhKeVlYa2dablZ1WTNScGIyNGdibUZ0WldRZ1lYTWdjMnhwWTJVNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTkxZEhCMWRFSjFabVpsY2k1emJHbGpaU2d3TENCemJHbGpaVUZ0YjNWdWRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVTWlhOaGJYQnNaWEl1Y0hKdmRHOTBlWEJsTG1sdWFYUnBZV3hwZW1WQ2RXWm1aWEp6SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUM4dlNXNXBkR2xoYkdsNlpTQjBhR1VnYVc1MFpYSnVZV3dnWW5WbVptVnlPbHh1SUNCMGNua2dlMXh1SUNBZ0lIUm9hWE11YjNWMGNIVjBRblZtWm1WeUlEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaDBhR2x6TG05MWRIQjFkRUoxWm1abGNsTnBlbVVwTzF4dUlDQWdJSFJvYVhNdWJHRnpkRTkxZEhCMWRDQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29kR2hwY3k1amFHRnVibVZzY3lrN1hHNGdJSDFjYmlBZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdkR2hwY3k1dmRYUndkWFJDZFdabVpYSWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxteGhjM1JQZFhSd2RYUWdQU0JiWFR0Y2JpQWdmVnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaWE5oYlhCc1pYSTdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpOXpjbU12Ylc5a2RXeGxjeTl5WlhOaGJYQnNaWEl1YW5NaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcXCIpO1xcblxcbi8qKiovIH0pLFxcbi8qIDMgKi9cXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XFxuXFxuXFx0ZXZhbChcXFwiJ3VzZSBzdHJpY3QnO1xcXFxuXFxcXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFxcXFxcXFwidmFsdWVcXFxcXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xcXFxuXFxcXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcXFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFxcXFxcIik7IH0gfVxcXFxuXFxcXG52YXIgT3B1c0VuY29kZXIgPSBmdW5jdGlvbiAoKSB7XFxcXG4gIGZ1bmN0aW9uIE9wdXNFbmNvZGVyKHJhdGUsIGNoYW5uZWxzLCBmcmFtZVNpemUpIHtcXFxcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3B1c0VuY29kZXIpO1xcXFxuXFxcXG4gICAgaWYgKHJhdGUgIT09IDQ4MDAwKSB0aHJvdyAnT3B1c0VuYzogd3JvbmcgcmF0ZSAnICsgcmF0ZTtcXFxcbiAgICB0aGlzLnJhdGUgPSByYXRlO1xcXFxuICAgIHRoaXMuY2hhbm5lbHMgPSBjaGFubmVscztcXFxcbiAgICB0aGlzLmZyYW1lU2l6ZSA9IGZyYW1lU2l6ZTtcXFxcbiAgICB2YXIgZXJyX3B0ciA9IF9tYWxsb2MoNCk7XFxcXG4gICAgdGhpcy5jdHggPSBfb3B1c19lbmNvZGVyX2NyZWF0ZSh0aGlzLnJhdGUsIHRoaXMuY2hhbm5lbHMsIDIwNDksIGVycik7XFxcXG4gICAgdmFyIGVyciA9IGdldFZhbHVlKGVycl9wdHIsICdpMzInKTtcXFxcbiAgICBpZiAoZXJyICE9PSAwKSB0aHJvdyAnT3B1c0VuYzogb3B1c19lbmNvZGVyX2NyZWF0ZSBmYWlsZWQ6ICcgKyBlcnI7XFxcXG4gICAgX2ZyZWUoZXJyX3B0cik7XFxcXG4gICAgdGhpcy5yYXdfcHRyID0gX21hbGxvYyh0aGlzLmZyYW1lU2l6ZSAqIHRoaXMuY2hhbm5lbHMgKiA0KTtcXFxcbiAgICB0aGlzLnJhd19sZW4gPSB0aGlzLmZyYW1lU2l6ZSAqIHRoaXMuY2hhbm5lbHM7XFxcXG4gICAgdGhpcy5yYXcgPSBIRUFQRjMyLnN1YmFycmF5KHRoaXMucmF3X3B0ciA+PiAyLCAodGhpcy5yYXdfcHRyID4+IDIpICsgdGhpcy5yYXdfbGVuKTtcXFxcbiAgICB2YXIgbWF4X2NvZGVkX3N6ID0gNDA5NjtcXFxcbiAgICB0aGlzLmNvZGVkX3N6ID0gbWF4X2NvZGVkX3N6O1xcXFxuICAgIHRoaXMuY29kZWRfcHRyID0gX21hbGxvYyh0aGlzLmNvZGVkX3N6KTtcXFxcbiAgICB0aGlzLmNvZGVkID0gSEVBUFU4LnN1YmFycmF5KHRoaXMuY29kZWRfcHRyLCB0aGlzLmNvZGVkX3B0ciArIHRoaXMuY29kZWRfc3opO1xcXFxuICAgIHRoaXMucmF3X29mZiA9IDA7XFxcXG4gIH1cXFxcblxcXFxuICBfY3JlYXRlQ2xhc3MoT3B1c0VuY29kZXIsIFt7XFxcXG4gICAga2V5OiAnZW5jb2RlJyxcXFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jb2RlKHNhbXBsZXMpIHtcXFxcbiAgICAgIHZhciBwYWNrZXRzID0gW107XFxcXG4gICAgICB2YXIgb2ZmID0gMDtcXFxcbiAgICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCAtIG9mZiA+PSB0aGlzLnJhd19sZW4gLSB0aGlzLnJhd19vZmYpIHtcXFxcbiAgICAgICAgaWYgKHRoaXMucmF3X29mZiA+IDApIHtcXFxcbiAgICAgICAgICB0aGlzLnJhdy5zZXQoc2FtcGxlcy5zdWJhcnJheShvZmYsIG9mZiArIHRoaXMucmF3X2xlbiAtIHRoaXMucmF3X29mZiksIHRoaXMucmF3X29mZik7XFxcXG4gICAgICAgICAgb2ZmICs9IHRoaXMucmF3X2xlbiAtIHRoaXMucmF3X29mZjtcXFxcbiAgICAgICAgICB0aGlzLnJhd19vZmYgPSAwO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgIHRoaXMucmF3LnNldChzYW1wbGVzLnN1YmFycmF5KG9mZiwgb2ZmICsgdGhpcy5yYXdfbGVuKSk7XFxcXG4gICAgICAgICAgb2ZmICs9IHRoaXMucmF3X2xlbjtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB2YXIgcmV0ID0gX29wdXNfZW5jb2RlX2Zsb2F0KHRoaXMuY3R4LCB0aGlzLnJhd19wdHIsIHRoaXMuZnJhbWVTaXplLCB0aGlzLmNvZGVkX3B0ciwgdGhpcy5jb2RlZF9zeik7XFxcXG4gICAgICAgIGlmIChyZXQgPD0gMCkgdGhyb3cgJ09wdXNFbmM6IG9wdXNfZW5jb2RlX2Zsb2F0IGZhaWxlZDogJyArIHJldDtcXFxcbiAgICAgICAgdmFyIHBhY2tldCA9IG5ldyBBcnJheUJ1ZmZlcihyZXQpO1xcXFxuICAgICAgICBuZXcgVWludDhBcnJheShwYWNrZXQpLnNldCh0aGlzLmNvZGVkLnN1YmFycmF5KDAsIHJldCkpO1xcXFxuICAgICAgICBwYWNrZXRzLnB1c2gocGFja2V0KTtcXFxcbiAgICAgIH1cXFxcbiAgICAgIGlmIChvZmYgPCBzYW1wbGVzLmxlbmd0aCkge1xcXFxuICAgICAgICB0aGlzLnJhdy5zZXQoc2FtcGxlcy5zdWJhcnJheShvZmYpKTtcXFxcbiAgICAgICAgdGhpcy5yYXdfb2ZmID0gc2FtcGxlcy5sZW5ndGggLSBvZmY7XFxcXG4gICAgICB9XFxcXG4gICAgICByZXR1cm4gcGFja2V0cztcXFxcbiAgICB9XFxcXG4gIH0sIHtcXFxcbiAgICBrZXk6ICdjdGwnLFxcXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdGwoX2N0bCwgdmFsdWUpIHtcXFxcbiAgICAgIGlmIChfY3RsID09PSAnT1BVU19TRVRfQklUUkFURScpIHtcXFxcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkgdGhyb3cgJ09wdXNFbmM6IE5hTiB2YWx1ZSAnICsgdmFsdWU7XFxcXG4gICAgICAgIGlmICh2YWx1ZSA8IDUwMCB8fCB2YWx1ZSA+IDUxMjAwMCkge1xcXFxuICAgICAgICAgIHRocm93ICdPcHVzRW5jOiBpbnZhbGlkIHZhbHVlICcgKyB2YWx1ZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB2YXIgcHRyID0gX21hbGxvYyg0KTtcXFxcbiAgICAgICAgc2V0VmFsdWUocHRyLCB2YWx1ZSwgJ2kzMicpO1xcXFxuICAgICAgICB2YXIgcmV0ID0gX29wdXNfZW5jb2Rlcl9jdGwodGhpcy5jdHgsIDQwMDIsIHB0cik7XFxcXG4gICAgICAgIGlmIChyZXQgPCAwKSB0aHJvdyAnT3B1c0VuYzogb3B1c19lbmNvZGVyX2N0bCBmYWlsZWQ6ICcgKyByZXQ7XFxcXG4gICAgICAgIF9mcmVlKHB0cik7XFxcXG4gICAgICAgIHJldHVybjtcXFxcbiAgICAgIH1cXFxcbiAgICAgIHRocm93ICdPcHVzRW5jOiBpbnZhbGlkIGNvbnRyb2wgJyArIF9jdGw7XFxcXG4gICAgfVxcXFxuICB9LCB7XFxcXG4gICAga2V5OiAnZGVzdHJveScsXFxcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XFxcXG4gICAgICBpZiAoIXRoaXMuY3R4KSByZXR1cm47XFxcXG4gICAgICBfb3B1c19lbmNvZGVyX2Rlc3Ryb3kodGhpcy5jdHgpO1xcXFxuICAgICAgX2ZyZWUodGhpcy5yYXdfcHRyKTtcXFxcbiAgICAgIF9mcmVlKHRoaXMuY29kZWRfcHRyKTtcXFxcbiAgICAgIHRoaXMuY3R4ID0gbnVsbDtcXFxcbiAgICAgIHRoaXMuY29kZWRfcHRyID0gbnVsbDtcXFxcbiAgICAgIHRoaXMucmF3X3B0ciA9IG51bGw7XFxcXG4gICAgfVxcXFxuICB9XSk7XFxcXG5cXFxcbiAgcmV0dXJuIE9wdXNFbmNvZGVyO1xcXFxufSgpO1xcXFxuXFxcXG5tb2R1bGUuZXhwb3J0cyA9IE9wdXNFbmNvZGVyO1xcXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpjbU12Ylc5a2RXeGxjeTlsYm1OdlpHVnlMbXB6UHpnd1kyWWlYU3dpYm1GdFpYTWlPbHNpVDNCMWMwVnVZMjlrWlhJaUxDSnlZWFJsSWl3aVkyaGhibTVsYkhNaUxDSm1jbUZ0WlZOcGVtVWlMQ0psY25KZmNIUnlJaXdpWDIxaGJHeHZZeUlzSW1OMGVDSXNJbDl2Y0hWelgyVnVZMjlrWlhKZlkzSmxZWFJsSWl3aVpYSnlJaXdpWjJWMFZtRnNkV1VpTENKZlpuSmxaU0lzSW5KaGQxOXdkSElpTENKeVlYZGZiR1Z1SWl3aWNtRjNJaXdpU0VWQlVFWXpNaUlzSW5OMVltRnljbUY1SWl3aWJXRjRYMk52WkdWa1gzTjZJaXdpWTI5a1pXUmZjM29pTENKamIyUmxaRjl3ZEhJaUxDSmpiMlJsWkNJc0lraEZRVkJWT0NJc0luSmhkMTl2Wm1ZaUxDSnpZVzF3YkdWeklpd2ljR0ZqYTJWMGN5SXNJbTltWmlJc0lteGxibWQwYUNJc0luTmxkQ0lzSW5KbGRDSXNJbDl2Y0hWelgyVnVZMjlrWlY5bWJHOWhkQ0lzSW5CaFkydGxkQ0lzSWtGeWNtRjVRblZtWm1WeUlpd2lWV2x1ZERoQmNuSmhlU0lzSW5CMWMyZ2lMQ0pqZEd3aUxDSjJZV3gxWlNJc0ltbHpUbUZPSWl3aWNIUnlJaXdpYzJWMFZtRnNkV1VpTENKZmIzQjFjMTlsYm1OdlpHVnlYMk4wYkNJc0lsOXZjSFZ6WDJWdVkyOWtaWEpmWkdWemRISnZlU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdTVUZGVFVFc1Z6dEJRVU5LTEhWQ1FVRlpReXhKUVVGYUxFVkJRV3RDUXl4UlFVRnNRaXhGUVVFMFFrTXNVMEZCTlVJc1JVRkJkVU03UVVGQlFUczdRVUZEY2tNc1VVRkJTVVlzVTBGQlV5eExRVUZpTEVWQlFXOUNMRTFCUVUwc2VVSkJRWGxDUVN4SlFVRXZRanRCUVVOd1FpeFRRVUZMUVN4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFRRVUZMUXl4UlFVRk1MRWRCUVdkQ1FTeFJRVUZvUWp0QlFVTkJMRk5CUVV0RExGTkJRVXdzUjBGQmFVSkJMRk5CUVdwQ08wRkJRMEVzVVVGQlRVTXNWVUZCVlVNc1VVRkJVU3hEUVVGU0xFTkJRV2hDTzBGQlEwRXNVMEZCUzBNc1IwRkJUQ3hIUVVGWFF5eHhRa0ZCY1VJc1MwRkJTMDRzU1VGQk1VSXNSVUZCWjBNc1MwRkJTME1zVVVGQmNrTXNSVUZCSzBNc1NVRkJMME1zUlVGQmNVUk5MRWRCUVhKRUxFTkJRVmc3UVVGRFFTeFJRVUZOUVN4TlFVRk5ReXhUUVVGVFRDeFBRVUZVTEVWQlFXdENMRXRCUVd4Q0xFTkJRVm83UVVGRFFTeFJRVUZKU1N4UlFVRlJMRU5CUVZvc1JVRkJaU3hOUVVGTkxEQkRRVUV3UTBFc1IwRkJhRVE3UVVGRFprVXNWVUZCVFU0c1QwRkJUanRCUVVOQkxGTkJRVXRQTEU5QlFVd3NSMEZCWlU0c1VVRkJVU3hMUVVGTFJpeFRRVUZNTEVkQlFXbENMRXRCUVV0RUxGRkJRWFJDTEVkQlFXbERMRU5CUVhwRExFTkJRV1k3UVVGRFFTeFRRVUZMVlN4UFFVRk1MRWRCUVdVc1MwRkJTMVFzVTBGQlRDeEhRVUZwUWl4TFFVRkxSQ3hSUVVGeVF6dEJRVU5CTEZOQlFVdFhMRWRCUVV3c1IwRkJWME1zVVVGQlVVTXNVVUZCVWl4RFFVRnBRaXhMUVVGTFNpeFBRVUZNTEVsQlFXZENMRU5CUVdwRExFVkJRMVlzUTBGQlF5eExRVUZMUVN4UFFVRk1MRWxCUVdkQ0xFTkJRV3BDTEVsQlFYTkNMRXRCUVV0RExFOUJSR3BDTEVOQlFWZzdRVUZGUVN4UlFVRk5TU3hsUVVGbExFbEJRWEpDTzBGQlEwRXNVMEZCUzBNc1VVRkJUQ3hIUVVGblFrUXNXVUZCYUVJN1FVRkRRU3hUUVVGTFJTeFRRVUZNTEVkQlFXbENZaXhSUVVGUkxFdEJRVXRaTEZGQlFXSXNRMEZCYWtJN1FVRkRRU3hUUVVGTFJTeExRVUZNTEVkQlFXRkRMRTlCUVU5TUxGRkJRVkFzUTBGQlowSXNTMEZCUzBjc1UwRkJja0lzUlVGRFdpeExRVUZMUVN4VFFVRk1MRWRCUVdsQ0xFdEJRVXRFTEZGQlJGWXNRMEZCWWp0QlFVVkJMRk5CUVV0SkxFOUJRVXdzUjBGQlpTeERRVUZtTzBGQlEwUTdPenM3TWtKQlJVMURMRThzUlVGQlV6dEJRVU5rTEZWQlFVMURMRlZCUVZVc1JVRkJhRUk3UVVGRFFTeFZRVUZKUXl4TlFVRk5MRU5CUVZZN1FVRkRRU3hoUVVGUFJpeFJRVUZSUnl4TlFVRlNMRWRCUVdsQ1JDeEhRVUZxUWl4SlFVRjNRaXhMUVVGTFdpeFBRVUZNTEVkQlFXVXNTMEZCUzFNc1QwRkJia1FzUlVGQk5FUTdRVUZETVVRc1dVRkJTU3hMUVVGTFFTeFBRVUZNTEVkQlFXVXNRMEZCYmtJc1JVRkJjMEk3UVVGRGNFSXNaVUZCUzFJc1IwRkJUQ3hEUVVGVFlTeEhRVUZVTEVOQlFXRktMRkZCUVZGUUxGRkJRVklzUTBGQmFVSlRMRWRCUVdwQ0xFVkJRMXBCTEUxQlFVMHNTMEZCUzFvc1QwRkJXQ3hIUVVGeFFpeExRVUZMVXl4UFFVUmtMRU5CUVdJc1JVRkRjVU1zUzBGQlMwRXNUMEZFTVVNN1FVRkZRVWNzYVVKQlFVOHNTMEZCUzFvc1QwRkJUQ3hIUVVGbExFdEJRVXRUTEU5QlFUTkNPMEZCUTBFc1pVRkJTMEVzVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUkN4VFFVeEVMRTFCUzA4N1FVRkRUQ3hsUVVGTFVpeEhRVUZNTEVOQlFWTmhMRWRCUVZRc1EwRkJZVW9zVVVGQlVWQXNVVUZCVWl4RFFVRnBRbE1zUjBGQmFrSXNSVUZCYzBKQkxFMUJRVTBzUzBGQlMxb3NUMEZCYWtNc1EwRkJZanRCUVVOQldTeHBRa0ZCVHl4TFFVRkxXaXhQUVVGYU8wRkJRMFE3UVVGRFJDeFpRVUZOWlN4TlFVRk5ReXh0UWtGQmJVSXNTMEZCUzNSQ0xFZEJRWGhDTEVWQlFUWkNMRXRCUVV0TExFOUJRV3hETEVWQlExZ3NTMEZCUzFJc1UwRkVUU3hGUVVOTExFdEJRVXRsTEZOQlJGWXNSVUZEY1VJc1MwRkJTMFFzVVVGRU1VSXNRMEZCV2p0QlFVVkJMRmxCUVVsVkxFOUJRVThzUTBGQldDeEZRVUZqTEUxQlFVMHNkME5CUVhkRFFTeEhRVUU1UXp0QlFVTmtMRmxCUVUxRkxGTkJRVk1zU1VGQlNVTXNWMEZCU2l4RFFVRm5Ra2dzUjBGQmFFSXNRMEZCWmp0QlFVTkJMRmxCUVVsSkxGVkJRVW9zUTBGQlpVWXNUVUZCWml4RlFVRjFRa2dzUjBGQmRrSXNRMEZCTWtJc1MwRkJTMUFzUzBGQlRDeERRVUZYU2l4UlFVRllMRU5CUVc5Q0xFTkJRWEJDTEVWQlFYVkNXU3hIUVVGMlFpeERRVUV6UWp0QlFVTkJTaXhuUWtGQlVWTXNTVUZCVWl4RFFVRmhTQ3hOUVVGaU8wRkJRMFE3UVVGRFJDeFZRVUZKVEN4TlFVRk5SaXhSUVVGUlJ5eE5RVUZzUWl4RlFVRXdRanRCUVVONFFpeGhRVUZMV2l4SFFVRk1MRU5CUVZOaExFZEJRVlFzUTBGQllVb3NVVUZCVVZBc1VVRkJVaXhEUVVGcFFsTXNSMEZCYWtJc1EwRkJZanRCUVVOQkxHRkJRVXRJTEU5QlFVd3NSMEZCWlVNc1VVRkJVVWNzVFVGQlVpeEhRVUZwUWtRc1IwRkJhRU03UVVGRFJEdEJRVU5FTEdGQlFVOUVMRTlCUVZBN1FVRkRSRHM3TzNkQ1FVVkhWU3hKTEVWQlFVdERMRXNzUlVGQlR6dEJRVU5rTEZWQlFVbEVMRk5CUVZFc2EwSkJRVm9zUlVGQlowTTdRVUZET1VJc1dVRkJTVVVzVFVGQlRVUXNTMEZCVGl4RFFVRktMRVZCUVd0Q0xFMUJRVTBzZDBKQlFYZENRU3hMUVVFNVFqdEJRVU5zUWl4WlFVRkpRU3hSUVVGUkxFZEJRVklzU1VGQlpVRXNVVUZCVVN4TlFVRXpRaXhGUVVGdFF6dEJRVU5xUXl4blFrRkJUU3cwUWtGQk5FSkJMRXRCUVd4RE8wRkJRMFE3UVVGRFJDeFpRVUZOUlN4TlFVRk5MMElzVVVGQlVTeERRVUZTTEVOQlFWbzdRVUZEUVdkRExHbENRVUZUUkN4SFFVRlVMRVZCUVdOR0xFdEJRV1FzUlVGQmNVSXNTMEZCY2tJN1FVRkRRU3haUVVGTlVDeE5RVUZOVnl4clFrRkJhMElzUzBGQlMyaERMRWRCUVhaQ0xFVkJRVFJDTEVsQlFUVkNMRVZCUVd0RE9FSXNSMEZCYkVNc1EwRkJXanRCUVVOQkxGbEJRVWxVTEUxQlFVMHNRMEZCVml4RlFVRmhMRTFCUVUwc2RVTkJRWFZEUVN4SFFVRTNRenRCUVVOaWFrSXNZMEZCVFRCQ0xFZEJRVTQ3UVVGRFFUdEJRVU5FTzBGQlEwUXNXVUZCVFN3NFFrRkJPRUpJTEVsQlFYQkRPMEZCUTBRN096czRRa0ZGVXp0QlFVTlNMRlZCUVVrc1EwRkJReXhMUVVGTE0wSXNSMEZCVml4RlFVRmxPMEZCUTJacFF5dzBRa0ZCYzBJc1MwRkJTMnBETEVkQlFUTkNPMEZCUTBGSkxGbEJRVTBzUzBGQlMwTXNUMEZCV0R0QlFVTkJSQ3haUVVGTkxFdEJRVXRSTEZOQlFWZzdRVUZEUVN4WFFVRkxXaXhIUVVGTUxFZEJRVmNzU1VGQldEdEJRVU5CTEZkQlFVdFpMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEUVN4WFFVRkxVQ3hQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5FT3pzN096czdRVUZKU0RaQ0xFOUJRVTlETEU5QlFWQXNSMEZCYVVKNlF5eFhRVUZxUWlJc0ltWnBiR1VpT2lJekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVqYkdGemN5QlBjSFZ6Ulc1amIyUmxjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLSEpoZEdVc0lHTm9ZVzV1Wld4ekxDQm1jbUZ0WlZOcGVtVXBJSHRjYmlBZ0lDQnBaaUFvY21GMFpTQWhQVDBnTkRnd01EQXBJSFJvY205M0lDZFBjSFZ6Ulc1ak9pQjNjbTl1WnlCeVlYUmxJQ2NnS3lCeVlYUmxPMXh1SUNBZ0lIUm9hWE11Y21GMFpTQTlJSEpoZEdVN1hHNGdJQ0FnZEdocGN5NWphR0Z1Ym1Wc2N5QTlJR05vWVc1dVpXeHpPMXh1SUNBZ0lIUm9hWE11Wm5KaGJXVlRhWHBsSUQwZ1puSmhiV1ZUYVhwbE8xeHVJQ0FnSUdOdmJuTjBJR1Z5Y2w5d2RISWdQU0JmYldGc2JHOWpLRFFwTzF4dUlDQWdJSFJvYVhNdVkzUjRJRDBnWDI5d2RYTmZaVzVqYjJSbGNsOWpjbVZoZEdVb2RHaHBjeTV5WVhSbExDQjBhR2x6TG1Ob1lXNXVaV3h6TENBeU1EUTVMQ0JsY25JcE8xeHVJQ0FnSUdOdmJuTjBJR1Z5Y2lBOUlHZGxkRlpoYkhWbEtHVnljbDl3ZEhJc0lDZHBNekluS1R0Y2JpQWdJQ0JwWmlBb1pYSnlJQ0U5UFNBd0tTQjBhSEp2ZHlBblQzQjFjMFZ1WXpvZ2IzQjFjMTlsYm1OdlpHVnlYMk55WldGMFpTQm1ZV2xzWldRNklDY2dLeUJsY25JN1hHNGdJQ0FnWDJaeVpXVW9aWEp5WDNCMGNpazdYRzRnSUNBZ2RHaHBjeTV5WVhkZmNIUnlJRDBnWDIxaGJHeHZZeWgwYUdsekxtWnlZVzFsVTJsNlpTQXFJSFJvYVhNdVkyaGhibTVsYkhNZ0tpQTBLVHRjYmlBZ0lDQjBhR2x6TG5KaGQxOXNaVzRnUFNCMGFHbHpMbVp5WVcxbFUybDZaU0FxSUhSb2FYTXVZMmhoYm01bGJITTdYRzRnSUNBZ2RHaHBjeTV5WVhjZ1BTQklSVUZRUmpNeUxuTjFZbUZ5Y21GNUtIUm9hWE11Y21GM1gzQjBjaUErUGlBeUxGeHVJQ0FnSUNBb2RHaHBjeTV5WVhkZmNIUnlJRDQrSURJcElDc2dkR2hwY3k1eVlYZGZiR1Z1S1R0Y2JpQWdJQ0JqYjI1emRDQnRZWGhmWTI5a1pXUmZjM29nUFNBME1EazJPMXh1SUNBZ0lIUm9hWE11WTI5a1pXUmZjM29nUFNCdFlYaGZZMjlrWldSZmMzbzdYRzRnSUNBZ2RHaHBjeTVqYjJSbFpGOXdkSElnUFNCZmJXRnNiRzlqS0hSb2FYTXVZMjlrWldSZmMzb3BPMXh1SUNBZ0lIUm9hWE11WTI5a1pXUWdQU0JJUlVGUVZUZ3VjM1ZpWVhKeVlYa29kR2hwY3k1amIyUmxaRjl3ZEhJc1hHNGdJQ0FnSUhSb2FYTXVZMjlrWldSZmNIUnlJQ3NnZEdocGN5NWpiMlJsWkY5emVpazdYRzRnSUNBZ2RHaHBjeTV5WVhkZmIyWm1JRDBnTUR0Y2JpQWdmVnh1WEc0Z0lHVnVZMjlrWlNoellXMXdiR1Z6S1NCN1hHNGdJQ0FnWTI5dWMzUWdjR0ZqYTJWMGN5QTlJRnRkTzF4dUlDQWdJR3hsZENCdlptWWdQU0F3TzF4dUlDQWdJSGRvYVd4bElDaHpZVzF3YkdWekxteGxibWQwYUNBdElHOW1aaUErUFNCMGFHbHpMbkpoZDE5c1pXNGdMU0IwYUdsekxuSmhkMTl2Wm1ZcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuSmhkMTl2Wm1ZZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbUYzTG5ObGRDaHpZVzF3YkdWekxuTjFZbUZ5Y21GNUtHOW1aaXhjYmlBZ0lDQWdJQ0FnSUc5bVppQXJJSFJvYVhNdWNtRjNYMnhsYmlBdElIUm9hWE11Y21GM1gyOW1aaWtzSUhSb2FYTXVjbUYzWDI5bVppazdYRzRnSUNBZ0lDQWdJRzltWmlBclBTQjBhR2x6TG5KaGQxOXNaVzRnTFNCMGFHbHpMbkpoZDE5dlptWTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtRjNYMjltWmlBOUlEQTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KaGR5NXpaWFFvYzJGdGNHeGxjeTV6ZFdKaGNuSmhlU2h2Wm1Zc0lHOW1aaUFySUhSb2FYTXVjbUYzWDJ4bGJpa3BPMXh1SUNBZ0lDQWdJQ0J2Wm1ZZ0t6MGdkR2hwY3k1eVlYZGZiR1Z1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdjbVYwSUQwZ1gyOXdkWE5mWlc1amIyUmxYMlpzYjJGMEtIUm9hWE11WTNSNExDQjBhR2x6TG5KaGQxOXdkSElzWEc0Z0lDQWdJQ0FnZEdocGN5NW1jbUZ0WlZOcGVtVXNJSFJvYVhNdVkyOWtaV1JmY0hSeUxDQjBhR2x6TG1OdlpHVmtYM042S1R0Y2JpQWdJQ0FnSUdsbUlDaHlaWFFnUEQwZ01Da2dkR2h5YjNjZ0owOXdkWE5GYm1NNklHOXdkWE5mWlc1amIyUmxYMlpzYjJGMElHWmhhV3hsWkRvZ0p5QXJJSEpsZER0Y2JpQWdJQ0FnSUdOdmJuTjBJSEJoWTJ0bGRDQTlJRzVsZHlCQmNuSmhlVUoxWm1abGNpaHlaWFFwTzF4dUlDQWdJQ0FnYm1WM0lGVnBiblE0UVhKeVlYa29jR0ZqYTJWMEtTNXpaWFFvZEdocGN5NWpiMlJsWkM1emRXSmhjbkpoZVNnd0xDQnlaWFFwS1R0Y2JpQWdJQ0FnSUhCaFkydGxkSE11Y0hWemFDaHdZV05yWlhRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2IyWm1JRHdnYzJGdGNHeGxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNtRjNMbk5sZENoellXMXdiR1Z6TG5OMVltRnljbUY1S0c5bVppa3BPMXh1SUNBZ0lDQWdkR2hwY3k1eVlYZGZiMlptSUQwZ2MyRnRjR3hsY3k1c1pXNW5kR2dnTFNCdlptWTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ3WVdOclpYUnpPMXh1SUNCOVhHNWNiaUFnWTNSc0tHTjBiQ3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvWTNSc0lEMDlQU0FuVDFCVlUxOVRSVlJmUWtsVVVrRlVSU2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBjMDVoVGloMllXeDFaU2twSUhSb2NtOTNJQ2RQY0hWelJXNWpPaUJPWVU0Z2RtRnNkV1VnSnlBcklIWmhiSFZsTzF4dUlDQWdJQ0FnYVdZZ0tIWmhiSFZsSUR3Z05UQXdJSHg4SUhaaGJIVmxJRDRnTlRFeU1EQXdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJQ2RQY0hWelJXNWpPaUJwYm5aaGJHbGtJSFpoYkhWbElDY2dLeUIyWVd4MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTnZibk4wSUhCMGNpQTlJRjl0WVd4c2IyTW9OQ2s3WEc0Z0lDQWdJQ0J6WlhSV1lXeDFaU2h3ZEhJc0lIWmhiSFZsTENBbmFUTXlKeWs3WEc0Z0lDQWdJQ0JqYjI1emRDQnlaWFFnUFNCZmIzQjFjMTlsYm1OdlpHVnlYMk4wYkNoMGFHbHpMbU4wZUN3Z05EQXdNaXdnY0hSeUtUdGNiaUFnSUNBZ0lHbG1JQ2h5WlhRZ1BDQXdLU0IwYUhKdmR5QW5UM0IxYzBWdVl6b2diM0IxYzE5bGJtTnZaR1Z5WDJOMGJDQm1ZV2xzWldRNklDY2dLeUJ5WlhRN1hHNGdJQ0FnSUNCZlpuSmxaU2h3ZEhJcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjBhSEp2ZHlBblQzQjFjMFZ1WXpvZ2FXNTJZV3hwWkNCamIyNTBjbTlzSUNjZ0t5QmpkR3c3WEc0Z0lIMWNibHh1SUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1amRIZ3BJSEpsZEhWeWJqdGNiaUFnSUNCZmIzQjFjMTlsYm1OdlpHVnlYMlJsYzNSeWIza29kR2hwY3k1amRIZ3BPMXh1SUNBZ0lGOW1jbVZsS0hSb2FYTXVjbUYzWDNCMGNpazdYRzRnSUNBZ1gyWnlaV1VvZEdocGN5NWpiMlJsWkY5d2RISXBPMXh1SUNBZ0lIUm9hWE11WTNSNElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxtTnZaR1ZrWDNCMGNpQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NXlZWGRmY0hSeUlEMGdiblZzYkR0Y2JpQWdmVnh1WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdUM0IxYzBWdVkyOWtaWEk3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdmJXOWtkV3hsY3k5bGJtTnZaR1Z5TG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXFwiKTtcXG5cXG4vKioqLyB9KVxcbi8qKioqKiovIF0pO1wiLCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTNkOWE2Zjc1ZGI4ODAyZGQwYTAud29ya2VyLmpzXCIpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd29ya2VyLWxvYWRlcj9pbmxpbmUhLi9zcmMvbW9kdWxlcy90cmFuc21pdHRlci53b3JrZXIuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	eval("// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\r\n\r\nvar URL = window.URL || window.webkitURL;\r\nmodule.exports = function(content, url) {\r\n\ttry {\r\n\t\ttry {\r\n\t\t\tvar blob;\r\n\t\t\ttry { // BlobBuilder = Deprecated, but widely implemented\r\n\t\t\t\tvar BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\r\n\t\t\t\tblob = new BlobBuilder();\r\n\t\t\t\tblob.append(content);\r\n\t\t\t\tblob = blob.getBlob();\r\n\t\t\t} catch(e) { // The proposed API\r\n\t\t\t\tblob = new Blob([content]);\r\n\t\t\t}\r\n\t\t\treturn new Worker(URL.createObjectURL(blob));\r\n\t\t} catch(e) {\r\n\t\t\treturn new Worker('data:application/javascript,' + encodeURIComponent(content));\r\n\t\t}\r\n\t} catch(e) {\r\n\t\treturn new Worker(url);\r\n\t}\r\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dvcmtlci1sb2FkZXIvY3JlYXRlSW5saW5lV29ya2VyLmpzPzg0MTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksV0FBVztBQUNmO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDM0MzkxMy9ob3ctdG8tY3JlYXRlLWEtd2ViLXdvcmtlci1mcm9tLWEtc3RyaW5nXHJcblxyXG52YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbnRlbnQsIHVybCkge1xyXG5cdHRyeSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgYmxvYjtcclxuXHRcdFx0dHJ5IHsgLy8gQmxvYkJ1aWxkZXIgPSBEZXByZWNhdGVkLCBidXQgd2lkZWx5IGltcGxlbWVudGVkXHJcblx0XHRcdFx0dmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XHJcblx0XHRcdFx0YmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xyXG5cdFx0XHRcdGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xyXG5cdFx0XHRcdGJsb2IgPSBibG9iLmdldEJsb2IoKTtcclxuXHRcdFx0fSBjYXRjaChlKSB7IC8vIFRoZSBwcm9wb3NlZCBBUElcclxuXHRcdFx0XHRibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFdvcmtlcignZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCcgKyBlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpO1xyXG5cdFx0fVxyXG5cdH0gY2F0Y2goZSkge1xyXG5cdFx0cmV0dXJuIG5ldyBXb3JrZXIodXJsKTtcclxuXHR9XHJcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd29ya2VyLWxvYWRlci9jcmVhdGVJbmxpbmVXb3JrZXIuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(2);\nvar AudioBuffer = __webpack_require__(6);\n\nvar Receiver = function (_EventEmitter) {\n  _inherits(Receiver, _EventEmitter);\n\n  function Receiver(channel, options) {\n    _classCallCheck(this, Receiver);\n\n    var _this = _possibleConstructorReturn(this, (Receiver.__proto__ || Object.getPrototypeOf(Receiver)).call(this));\n\n    _this.audioCtx = null;\n    _this.procNode = null;\n    _this.worker = null;\n    _this.nsamples = 2048;\n    _this.buffer = null;\n    _this.started = false;\n    _this.events = ['error', 'connect', 'disconnect', 'eot'];\n    _this.bufferMax = 48000 * 4;\n    _this.bufferMin = _this.nsamples * 4;\n    _this.server = 'https://rx.facile.audio/rx';\n\n    if (typeof channel !== 'string') {\n      throw new Error('valid channel id is required');\n    } else {\n      _this.channel = channel;\n    }\n    if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n      _this.server = options.server || _this.server;\n    }\n    _this._init();\n    return _this;\n  }\n\n  _createClass(Receiver, [{\n    key: '_init',\n    value: function _init(setup) {\n      var AudioContext = window.AudioContext || window.webkitAudioContext;\n      if (!AudioContext) throw new Error('unsupported');\n      this.audioCtx = new AudioContext();\n      console.log(this.audioCtx);\n      this.buffer = new AudioBuffer(this.bufferMax, this.bufferMin);\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      if (this.started !== false) {\n        return Promise.reject(new Error('receiver is already running'));\n      }\n      this.procNode = this.audioCtx.createScriptProcessor(this.nsamples, 2, 2);\n      this.procNode.onaudioprocess = function (e) {\n        _this2._audioProcess(e);\n      };\n      this.procNode.connect(this.audioCtx.destination);\n      return this._startWorker();\n    }\n  }, {\n    key: '_audioProcess',\n    value: function _audioProcess(e) {\n      if (this.worker === null) return;\n      var left = e.outputBuffer.getChannelData(0);\n      var right = e.outputBuffer.getChannelData(1);\n      var samples = this.buffer.read(this.nsamples * 2);\n      var i = 0;\n      var k = 0;\n      if (samples) {\n        for (i = 0; i < this.nsamples * 2; i += 2) {\n          left[k] = samples[i];\n          right[k] = samples[i + 1];\n          ++k;\n        }\n      } else {\n        for (i = 0; i < this.nsamples; ++i) {\n          left[i] = 0;\n          right[i] = 0;\n        }\n      }\n    }\n  }, {\n    key: '_startWorker',\n    value: function _startWorker() {\n      var _this3 = this;\n\n      return new Promise(function (res, rej) {\n        var Worker = __webpack_require__(7);\n        var worker = new Worker();\n        worker.onmessage = function (e) {\n          if (e.data instanceof Float32Array) {\n            return _this3.buffer.write(e.data);\n          }\n          if (e.data.type === 'init') {\n            console.log('ReceiverWorker initialized');\n            _this3.worker = worker;\n            _this3.started = true;\n            res();\n          } else if (e.data.type === 'eot') {\n            _this3.emit('eot');\n          } else if (e.data.type === 'connect') {\n            _this3.emit('connect');\n          } else if (e.data.type === 'disconnect') {\n            _this3.emit('disconnect');\n          } else if (e.data.type === 'error') {\n            _this3.emit('error', e.data.err);\n          }\n        };\n        worker.onerror = function (e) {\n          _this3.emit('error', e);\n        };\n        worker.postMessage({\n          setup: {\n            sampleRate: _this3.audioCtx.sampleRate,\n            nsamples: _this3.nsamples,\n            channels: 2,\n            server: _this3.server,\n            channel: _this3.channel\n          }\n        });\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this.started !== true) return;\n      this.procNode.disconnect(this.audioCtx.destination);\n      this.procNode.onaudioprocess = null;\n      if (this.worker) {\n        this.worker.terminate();\n        this.worker = null;\n      }\n      this.started = false;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this4 = this;\n\n      this.stop();\n      this.events.forEach(function (ev) {\n        _this4.removeAllListeners(ev);\n      });\n    }\n  }]);\n\n  return Receiver;\n}(EventEmitter);\n\nmodule.exports = Receiver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar audioBuffer = function () {\n  function audioBuffer(size, bufLen) {\n    _classCallCheck(this, audioBuffer);\n\n    this.space = size;\n    this.data = new Float32Array(this.space);\n    this.free = this.space;\n    this.used = 0;\n    this.rpos = 0;\n    this.wpos = 0;\n    this.overruns = 0;\n    this.underruns = 0;\n    this.bufLen = bufLen;\n  }\n\n  _createClass(audioBuffer, [{\n    key: 'write',\n    value: function write(samples) {\n      if (this.free < samples.length) {\n        ++this.overruns;\n        console.log('AudioBuffer: overrun');\n        this.read(samples.length - this.free);\n      }\n      var left = this.space - this.wpos;\n      if (left >= samples.length) {\n        this.data.set(samples, this.wpos);\n        this.wpos += samples.length;\n      } else {\n        this.data.set(samples.subarray(0, left), this.wpos);\n        this.data.set(samples.subarray(left));\n        this.wpos = samples.length - left;\n      }\n      this.free -= samples.length;\n      this.used += samples.length;\n      return 0;\n    }\n  }, {\n    key: 'read',\n    value: function read(n) {\n      if (this.used < this.bufLen) {\n        ++this.underruns;\n        console.log('AudioBuffer: underrun ' + this.used);\n        return null;\n      }\n      var data = new Float32Array(n);\n      var left = this.space - this.rpos;\n      if (left >= n) {\n        data.set(this.data.subarray(this.rpos, this.rpos + n));\n        this.rpos += n;\n      } else {\n        data.set(this.data.subarray(this.rpos));\n        data.set(this.data.subarray(0, n - left), left);\n        this.rpos = n - left;\n      }\n      this.free += n;\n      this.used -= n;\n      return data;\n    }\n  }]);\n\n  return audioBuffer;\n}();\n\nmodule.exports = audioBuffer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9hYnVmZmVyLmpzPzQ2YzMiXSwibmFtZXMiOlsiYXVkaW9CdWZmZXIiLCJzaXplIiwiYnVmTGVuIiwic3BhY2UiLCJkYXRhIiwiRmxvYXQzMkFycmF5IiwiZnJlZSIsInVzZWQiLCJycG9zIiwid3BvcyIsIm92ZXJydW5zIiwidW5kZXJydW5zIiwic2FtcGxlcyIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJyZWFkIiwibGVmdCIsInNldCIsInN1YmFycmF5IiwibiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7SUFFTUEsVztBQUVKLHVCQUFZQyxJQUFaLEVBQWtCQyxNQUFsQixFQUEwQjtBQUFBOztBQUN4QixTQUFLQyxLQUFMLEdBQWFGLElBQWI7QUFDQSxTQUFLRyxJQUFMLEdBQVksSUFBSUMsWUFBSixDQUFpQixLQUFLRixLQUF0QixDQUFaO0FBQ0EsU0FBS0csSUFBTCxHQUFZLEtBQUtILEtBQWpCO0FBQ0EsU0FBS0ksSUFBTCxHQUFZLENBQVo7QUFDQSxTQUFLQyxJQUFMLEdBQVksQ0FBWjtBQUNBLFNBQUtDLElBQUwsR0FBWSxDQUFaO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsQ0FBakI7QUFDQSxTQUFLVCxNQUFMLEdBQWNBLE1BQWQ7QUFDRDs7OzswQkFFS1UsTyxFQUFTO0FBQ2IsVUFBSSxLQUFLTixJQUFMLEdBQVlNLFFBQVFDLE1BQXhCLEVBQWdDO0FBQzlCLFVBQUUsS0FBS0gsUUFBUDtBQUNBSSxnQkFBUUMsR0FBUixDQUFZLHNCQUFaO0FBQ0EsYUFBS0MsSUFBTCxDQUFVSixRQUFRQyxNQUFSLEdBQWlCLEtBQUtQLElBQWhDO0FBQ0Q7QUFDRCxVQUFNVyxPQUFPLEtBQUtkLEtBQUwsR0FBYSxLQUFLTSxJQUEvQjtBQUNBLFVBQUlRLFFBQVFMLFFBQVFDLE1BQXBCLEVBQTRCO0FBQzFCLGFBQUtULElBQUwsQ0FBVWMsR0FBVixDQUFjTixPQUFkLEVBQXVCLEtBQUtILElBQTVCO0FBQ0EsYUFBS0EsSUFBTCxJQUFhRyxRQUFRQyxNQUFyQjtBQUNELE9BSEQsTUFHTztBQUNMLGFBQUtULElBQUwsQ0FBVWMsR0FBVixDQUFjTixRQUFRTyxRQUFSLENBQWlCLENBQWpCLEVBQW9CRixJQUFwQixDQUFkLEVBQXlDLEtBQUtSLElBQTlDO0FBQ0EsYUFBS0wsSUFBTCxDQUFVYyxHQUFWLENBQWNOLFFBQVFPLFFBQVIsQ0FBaUJGLElBQWpCLENBQWQ7QUFDQSxhQUFLUixJQUFMLEdBQVlHLFFBQVFDLE1BQVIsR0FBaUJJLElBQTdCO0FBQ0Q7QUFDRCxXQUFLWCxJQUFMLElBQWFNLFFBQVFDLE1BQXJCO0FBQ0EsV0FBS04sSUFBTCxJQUFhSyxRQUFRQyxNQUFyQjtBQUNBLGFBQU8sQ0FBUDtBQUNEOzs7eUJBRUlPLEMsRUFBRztBQUNOLFVBQUksS0FBS2IsSUFBTCxHQUFZLEtBQUtMLE1BQXJCLEVBQTZCO0FBQzNCLFVBQUUsS0FBS1MsU0FBUDtBQUNBRyxnQkFBUUMsR0FBUixDQUFZLDJCQUEyQixLQUFLUixJQUE1QztBQUNBLGVBQU8sSUFBUDtBQUNEO0FBQ0QsVUFBTUgsT0FBTyxJQUFJQyxZQUFKLENBQWlCZSxDQUFqQixDQUFiO0FBQ0EsVUFBTUgsT0FBTyxLQUFLZCxLQUFMLEdBQWEsS0FBS0ssSUFBL0I7QUFDQSxVQUFJUyxRQUFRRyxDQUFaLEVBQWU7QUFDYmhCLGFBQUtjLEdBQUwsQ0FBUyxLQUFLZCxJQUFMLENBQVVlLFFBQVYsQ0FBbUIsS0FBS1gsSUFBeEIsRUFBOEIsS0FBS0EsSUFBTCxHQUFZWSxDQUExQyxDQUFUO0FBQ0EsYUFBS1osSUFBTCxJQUFhWSxDQUFiO0FBQ0QsT0FIRCxNQUdPO0FBQ0xoQixhQUFLYyxHQUFMLENBQVMsS0FBS2QsSUFBTCxDQUFVZSxRQUFWLENBQW1CLEtBQUtYLElBQXhCLENBQVQ7QUFDQUosYUFBS2MsR0FBTCxDQUFTLEtBQUtkLElBQUwsQ0FBVWUsUUFBVixDQUFtQixDQUFuQixFQUFzQkMsSUFBSUgsSUFBMUIsQ0FBVCxFQUEwQ0EsSUFBMUM7QUFDQSxhQUFLVCxJQUFMLEdBQVlZLElBQUlILElBQWhCO0FBQ0Q7QUFDRCxXQUFLWCxJQUFMLElBQWFjLENBQWI7QUFDQSxXQUFLYixJQUFMLElBQWFhLENBQWI7QUFDQSxhQUFPaEIsSUFBUDtBQUNEOzs7Ozs7QUFJSGlCLE9BQU9DLE9BQVAsR0FBaUJ0QixXQUFqQiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBhdWRpb0J1ZmZlciB7XG5cbiAgY29uc3RydWN0b3Ioc2l6ZSwgYnVmTGVuKSB7XG4gICAgdGhpcy5zcGFjZSA9IHNpemU7XG4gICAgdGhpcy5kYXRhID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnNwYWNlKTtcbiAgICB0aGlzLmZyZWUgPSB0aGlzLnNwYWNlO1xuICAgIHRoaXMudXNlZCA9IDA7XG4gICAgdGhpcy5ycG9zID0gMDtcbiAgICB0aGlzLndwb3MgPSAwO1xuICAgIHRoaXMub3ZlcnJ1bnMgPSAwO1xuICAgIHRoaXMudW5kZXJydW5zID0gMDtcbiAgICB0aGlzLmJ1ZkxlbiA9IGJ1ZkxlbjtcbiAgfVxuXG4gIHdyaXRlKHNhbXBsZXMpIHtcbiAgICBpZiAodGhpcy5mcmVlIDwgc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgICsrdGhpcy5vdmVycnVucztcbiAgICAgIGNvbnNvbGUubG9nKCdBdWRpb0J1ZmZlcjogb3ZlcnJ1bicpO1xuICAgICAgdGhpcy5yZWFkKHNhbXBsZXMubGVuZ3RoIC0gdGhpcy5mcmVlKTtcbiAgICB9XG4gICAgY29uc3QgbGVmdCA9IHRoaXMuc3BhY2UgLSB0aGlzLndwb3M7XG4gICAgaWYgKGxlZnQgPj0gc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGF0YS5zZXQoc2FtcGxlcywgdGhpcy53cG9zKTtcbiAgICAgIHRoaXMud3BvcyArPSBzYW1wbGVzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLnNldChzYW1wbGVzLnN1YmFycmF5KDAsIGxlZnQpLCB0aGlzLndwb3MpO1xuICAgICAgdGhpcy5kYXRhLnNldChzYW1wbGVzLnN1YmFycmF5KGxlZnQpKTtcbiAgICAgIHRoaXMud3BvcyA9IHNhbXBsZXMubGVuZ3RoIC0gbGVmdDtcbiAgICB9XG4gICAgdGhpcy5mcmVlIC09IHNhbXBsZXMubGVuZ3RoO1xuICAgIHRoaXMudXNlZCArPSBzYW1wbGVzLmxlbmd0aDtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJlYWQobikge1xuICAgIGlmICh0aGlzLnVzZWQgPCB0aGlzLmJ1Zkxlbikge1xuICAgICAgKyt0aGlzLnVuZGVycnVucztcbiAgICAgIGNvbnNvbGUubG9nKCdBdWRpb0J1ZmZlcjogdW5kZXJydW4gJyArIHRoaXMudXNlZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkobik7XG4gICAgY29uc3QgbGVmdCA9IHRoaXMuc3BhY2UgLSB0aGlzLnJwb3M7XG4gICAgaWYgKGxlZnQgPj0gbikge1xuICAgICAgZGF0YS5zZXQodGhpcy5kYXRhLnN1YmFycmF5KHRoaXMucnBvcywgdGhpcy5ycG9zICsgbikpO1xuICAgICAgdGhpcy5ycG9zICs9IG47XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuc2V0KHRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLnJwb3MpKTtcbiAgICAgIGRhdGEuc2V0KHRoaXMuZGF0YS5zdWJhcnJheSgwLCBuIC0gbGVmdCksIGxlZnQpO1xuICAgICAgdGhpcy5ycG9zID0gbiAtIGxlZnQ7XG4gICAgfVxuICAgIHRoaXMuZnJlZSArPSBuO1xuICAgIHRoaXMudXNlZCAtPSBuO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdWRpb0J1ZmZlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2FidWZmZXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	eval("module.exports = function() {\n\treturn __webpack_require__(4)(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId])\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\texports: {},\\n/******/ \\t\\t\\tid: moduleId,\\n/******/ \\t\\t\\tloaded: false\\n/******/ \\t\\t};\\n\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.loaded = true;\\n\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n\\n\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"/dist/\\\";\\n\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(0);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\\\n\\\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\"); } }\\\\n\\\\nvar Util = __webpack_require__(1);\\\\nvar Resampler = __webpack_require__(2);\\\\nvar OpusDecoder = __webpack_require__(3);\\\\n\\\\nvar rw = null;\\\\n\\\\nvar ReceiverWorker = function () {\\\\n  function ReceiverWorker() {\\\\n    _classCallCheck(this, ReceiverWorker);\\\\n\\\\n    this.decoder = null;\\\\n    this.resampler = null;\\\\n    this.rx = null;\\\\n    this.sampleRate = 48000;\\\\n  }\\\\n\\\\n  _createClass(ReceiverWorker, [{\\\\n    key: 'error',\\\\n    value: function error(e) {\\\\n      postMessage({ type: 'error', err: 'ReceiverWorker: ' + e });\\\\n    }\\\\n  }, {\\\\n    key: 'init',\\\\n    value: function init(setup) {\\\\n      var _this = this;\\\\n\\\\n      var ioURL = 'https://facile.audio/dist/socket.io-1.4.5.js';\\\\n      Util.loadScript(ioURL).then(function (libURL) {\\\\n        importScripts(libURL);\\\\n        _this._initIO(setup);\\\\n      }).catch(function (e) {\\\\n        postMessage({ type: 'error', err: e.message });\\\\n      });\\\\n    }\\\\n  }, {\\\\n    key: 'process',\\\\n    value: function process(data) {\\\\n      var samples = null;\\\\n      for (var i = 0; i < data.length; ++i) {\\\\n        try {\\\\n          samples = this.decoder.decode(data[i]);\\\\n        } catch (e) {\\\\n          console.log(e);\\\\n          continue;\\\\n        }\\\\n        if (samples.length !== this.config.frameSize * this.config.channels) {\\\\n          this.error('Wrong number of samples! ' + samples.length);\\\\n          break;\\\\n        }\\\\n        if (this.resampler) {\\\\n          this.resampler.initializeBuffers();\\\\n          samples = this.resampler.resample(samples, samples.length);\\\\n        } else {\\\\n          samples = new Float32Array(samples);\\\\n        }\\\\n        postMessage(samples, [samples.buffer]);\\\\n      }\\\\n    }\\\\n  }, {\\\\n    key: '_initIO',\\\\n    value: function _initIO(setup) {\\\\n      var _this2 = this;\\\\n\\\\n      var rx = io(setup.server);\\\\n      rx.on('connect', function () {\\\\n        _this2.rx = rx;\\\\n        rx.emit('channel', setup.channel);\\\\n        postMessage({ type: 'connect' });\\\\n      });\\\\n      rx.on('audio', function (data) {\\\\n        _this2.process(data);\\\\n      });\\\\n      rx.on('eot', function () {\\\\n        postMessage({ type: 'eot' });\\\\n      });\\\\n      rx.on('config', function (config) {\\\\n        _this2.config = config;\\\\n        if (setup.sampleRate !== _this2.sampleRate) {\\\\n          console.log('ReceiverWorker: need to resample 48000 --> ' + setup.sampleRate);\\\\n          _this2.resampler = new Resampler(_this2.sampleRate, setup.sampleRate, config.channels, Math.ceil(config.frameSize * config.channels * setup.sampleRate / _this2.sampleRate), 0);\\\\n        }\\\\n        try {\\\\n          _this2.decoder = new OpusDecoder(_this2.sampleRate, config.channels, config.frameSize);\\\\n        } catch (e) {\\\\n          console.log(e);\\\\n          return _this2.error(e);\\\\n        }\\\\n        postMessage({ type: 'init' });\\\\n      });\\\\n      rx.on('disconnect', function () {\\\\n        postMessage({ type: 'disconnect' });\\\\n      });\\\\n      rx.on('err', function (e) {\\\\n        postMessage({ type: 'error', err: e });\\\\n      });\\\\n    }\\\\n  }]);\\\\n\\\\n  return ReceiverWorker;\\\\n}();\\\\n\\\\nself.onmessage = function (ev) {\\\\n  if (ev.data.setup) {\\\\n    console.log('ReceiverWorker: initializing..');\\\\n    if (rw !== null) {\\\\n      rw.error('already initialized');\\\\n      return;\\\\n    }\\\\n    var decURL = 'https://facile.audio/dist/libopus_dec.js';\\\\n    Util.loadScript(decURL).then(function (libURL) {\\\\n      importScripts(libURL);\\\\n      rw = new ReceiverWorker();\\\\n      rw.init(ev.data.setup);\\\\n    }).catch(function (e) {\\\\n      postMessage({ type: 'error', err: e.message });\\\\n    });\\\\n  } else {\\\\n    if (rw === null) {\\\\n      postMessage({ type: 'error', err: 'ReceiverWorker: not initialized' });\\\\n      return;\\\\n    }\\\\n    rw.error('invalid message');\\\\n  }\\\\n};\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZWNlaXZlci53b3JrZXIuanM/YWQ5MSJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsIlJlc2FtcGxlciIsIk9wdXNEZWNvZGVyIiwicnciLCJSZWNlaXZlcldvcmtlciIsImRlY29kZXIiLCJyZXNhbXBsZXIiLCJyeCIsInNhbXBsZVJhdGUiLCJlIiwicG9zdE1lc3NhZ2UiLCJ0eXBlIiwiZXJyIiwic2V0dXAiLCJpb1VSTCIsImxvYWRTY3JpcHQiLCJ0aGVuIiwibGliVVJMIiwiaW1wb3J0U2NyaXB0cyIsIl9pbml0SU8iLCJjYXRjaCIsIm1lc3NhZ2UiLCJkYXRhIiwic2FtcGxlcyIsImkiLCJsZW5ndGgiLCJkZWNvZGUiLCJjb25zb2xlIiwibG9nIiwiY29uZmlnIiwiZnJhbWVTaXplIiwiY2hhbm5lbHMiLCJlcnJvciIsImluaXRpYWxpemVCdWZmZXJzIiwicmVzYW1wbGUiLCJGbG9hdDMyQXJyYXkiLCJidWZmZXIiLCJpbyIsInNlcnZlciIsIm9uIiwiZW1pdCIsImNoYW5uZWwiLCJwcm9jZXNzIiwiTWF0aCIsImNlaWwiLCJzZWxmIiwib25tZXNzYWdlIiwiZXYiLCJkZWNVUkwiLCJpbml0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQWI7QUFDQSxJQUFNQyxZQUFZLG1CQUFBRCxDQUFRLENBQVIsQ0FBbEI7QUFDQSxJQUFNRSxjQUFjLG1CQUFBRixDQUFRLENBQVIsQ0FBcEI7O0FBRUEsSUFBSUcsS0FBSyxJQUFUOztJQUVNQyxjO0FBQ0osNEJBQWM7QUFBQTs7QUFDWixTQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFLQyxFQUFMLEdBQVUsSUFBVjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsS0FBbEI7QUFDRDs7OzswQkFFS0MsQyxFQUFHO0FBQ1BDLGtCQUFZLEVBQUNDLE1BQU0s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QVgsRUFBaUI7QUFDZk8sa0JBQVksRUFBQ0MsTUFBTSxPQUFQLEVBQWdCQyxLQUFLLGlDQUFyQixFQUFaO0FBQ0E7QUFDRDtBQUNEVCxPQUFHNkIsS0FBSCxDQUFTLGlCQUFUO0FBQ0Q7QUFDRixDQXRCRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5jb25zdCBSZXNhbXBsZXIgPSByZXF1aXJlKCcuL3Jlc2FtcGxlcicpO1xuY29uc3QgT3B1c0RlY29kZXIgPSByZXF1aXJlKCcuL2RlY29kZXInKTtcblxubGV0IHJ3ID0gbnVsbDtcblxuY2xhc3MgUmVjZWl2ZXJXb3JrZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICAgIHRoaXMucmVzYW1wbGVyID0gbnVsbDtcbiAgICB0aGlzLnJ4ID0gbnVsbDtcbiAgICB0aGlzLnNhbXBsZVJhdGUgPSA0ODAwMDtcbiAgfVxuXG4gIGVycm9yKGUpIHtcbiAgICBwb3N0TWVzc2FnZSh7dHlwZTogJ2Vycm9yJywgZXJyOiAnUmVjZWl2ZXJXb3JrZXI6ICcgKyBlfSk7XG4gIH1cblxuICBpbml0KHNldHVwKSB7XG4gICAgY29uc3QgaW9VUkwgPSAnaHR0cHM6Ly9mYWNpbGUuYXVkaW8vZGlzdC9zb2NrZXQuaW8tMS40LjUuanMnO1xuICAgIFV0aWwubG9hZFNjcmlwdChpb1VSTCkudGhlbigobGliVVJMKSA9PiB7XG4gICAgICBpbXBvcnRTY3JpcHRzKGxpYlVSTCk7XG4gICAgICB0aGlzLl9pbml0SU8oc2V0dXApO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICBwb3N0TWVzc2FnZSh7dHlwZTogJ2Vycm9yJywgZXJyOiBlLm1lc3NhZ2V9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb2Nlc3MoZGF0YSkge1xuICAgIGxldCBzYW1wbGVzID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNhbXBsZXMgPSB0aGlzLmRlY29kZXIuZGVjb2RlKGRhdGFbaV0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGggIT09ICh0aGlzLmNvbmZpZy5mcmFtZVNpemUgKiB0aGlzLmNvbmZpZy5jaGFubmVscykpIHtcbiAgICAgICAgdGhpcy5lcnJvcignV3JvbmcgbnVtYmVyIG9mIHNhbXBsZXMhICcgKyBzYW1wbGVzLmxlbmd0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmVzYW1wbGVyKSB7XG4gICAgICAgIHRoaXMucmVzYW1wbGVyLmluaXRpYWxpemVCdWZmZXJzKCk7XG4gICAgICAgIHNhbXBsZXMgPSB0aGlzLnJlc2FtcGxlci5yZXNhbXBsZShzYW1wbGVzLCBzYW1wbGVzLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1wbGVzID0gbmV3IEZsb2F0MzJBcnJheShzYW1wbGVzKTtcbiAgICAgIH1cbiAgICAgIHBvc3RNZXNzYWdlKHNhbXBsZXMsIFtzYW1wbGVzLmJ1ZmZlcl0pO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0SU8oc2V0dXApIHtcbiAgICBjb25zdCByeCA9IGlvKHNldHVwLnNlcnZlcik7XG4gICAgcngub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJ4ID0gcng7XG4gICAgICByeC5lbWl0KCdjaGFubmVsJywgc2V0dXAuY2hhbm5lbCk7XG4gICAgICBwb3N0TWVzc2FnZSh7dHlwZTogJ2Nvbm5lY3QnfSk7XG4gICAgfSk7XG4gICAgcngub24oJ2F1ZGlvJywgKGRhdGEpID0+IHtcbiAgICAgIHRoaXMucHJvY2VzcyhkYXRhKTtcbiAgICB9KTtcbiAgICByeC5vbignZW90JywgKCkgPT4ge1xuICAgICAgcG9zdE1lc3NhZ2Uoe3R5cGU6ICdlb3QnfSk7XG4gICAgfSk7XG4gICAgcngub24oJ2NvbmZpZycsIChjb25maWcpID0+IHtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgaWYgKHNldHVwLnNhbXBsZVJhdGUgIT09IHRoaXMuc2FtcGxlUmF0ZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnUmVjZWl2ZXJXb3JrZXI6IG5lZWQgdG8gcmVzYW1wbGUgNDgwMDAgLS0+ICcgK1xuICAgICAgICAgc2V0dXAuc2FtcGxlUmF0ZSk7XG4gICAgICAgIHRoaXMucmVzYW1wbGVyID0gbmV3IFJlc2FtcGxlcih0aGlzLnNhbXBsZVJhdGUsXG4gICAgICAgICBzZXR1cC5zYW1wbGVSYXRlLCBjb25maWcuY2hhbm5lbHMsIE1hdGguY2VpbChjb25maWcuZnJhbWVTaXplICpcbiAgICAgICAgICAgY29uZmlnLmNoYW5uZWxzICogc2V0dXAuc2FtcGxlUmF0ZSAvIHRoaXMuc2FtcGxlUmF0ZSksIDApO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5kZWNvZGVyID0gbmV3IE9wdXNEZWNvZGVyKHRoaXMuc2FtcGxlUmF0ZSxcbiAgICAgICAgIGNvbmZpZy5jaGFubmVscywgY29uZmlnLmZyYW1lU2l6ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihlKTtcbiAgICAgIH1cbiAgICAgIHBvc3RNZXNzYWdlKHt0eXBlOiAnaW5pdCd9KTtcbiAgICB9KTtcbiAgICByeC5vbignZGlzY29ubmVjdCcsICgpID0+IHtcbiAgICAgIHBvc3RNZXNzYWdlKHt0eXBlOiAnZGlzY29ubmVjdCd9KTtcbiAgICB9KTtcbiAgICByeC5vbignZXJyJywgKGUpID0+IHtcbiAgICAgIHBvc3RNZXNzYWdlKHt0eXBlOiAnZXJyb3InLCBlcnI6IGV9KTtcbiAgICB9KTtcbiAgfVxuXG59XG5cbnNlbGYub25tZXNzYWdlID0gKGV2KSA9PiB7XG4gIGlmIChldi5kYXRhLnNldHVwKSB7XG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmVyV29ya2VyOiBpbml0aWFsaXppbmcuLicpO1xuICAgIGlmIChydyAhPT0gbnVsbCkge1xuICAgICAgcncuZXJyb3IoJ2FscmVhZHkgaW5pdGlhbGl6ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVjVVJMID0gJ2h0dHBzOi8vZmFjaWxlLmF1ZGlvL2Rpc3QvbGlib3B1c19kZWMuanMnO1xuICAgIFV0aWwubG9hZFNjcmlwdChkZWNVUkwpLnRoZW4oKGxpYlVSTCkgPT4ge1xuICAgICAgaW1wb3J0U2NyaXB0cyhsaWJVUkwpO1xuICAgICAgcncgPSBuZXcgUmVjZWl2ZXJXb3JrZXIoKTtcbiAgICAgIHJ3LmluaXQoZXYuZGF0YS5zZXR1cCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgIHBvc3RNZXNzYWdlKHt0eXBlOiAnZXJyb3InLCBlcnI6IGUubWVzc2FnZX0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChydyA9PT0gbnVsbCkge1xuICAgICAgcG9zdE1lc3NhZ2Uoe3R5cGU6ICdlcnJvcicsIGVycjogJ1JlY2VpdmVyV29ya2VyOiBub3QgaW5pdGlhbGl6ZWQnfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJ3LmVycm9yKCdpbnZhbGlkIG1lc3NhZ2UnKTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3JlY2VpdmVyLndvcmtlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\\");\\n\\n/***/ }),\\n/* 1 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nfunction loadScript(url) {\\\\n  return new Promise(function (res, rej) {\\\\n    var req = new XMLHttpRequest();\\\\n    req.open('GET', url, true);\\\\n    req.responseType = 'blob';\\\\n    req.onload = function () {\\\\n      var blob = req.response;\\\\n      var blobURL = URL.createObjectURL(blob);\\\\n      res(blobURL);\\\\n    };\\\\n    req.onerror = function (e) {\\\\n      rej(e);\\\\n    };\\\\n    req.send();\\\\n  });\\\\n}\\\\n\\\\nmodule.exports = {\\\\n  loadScript: loadScript\\\\n};\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy91dGlsLmpzP2FmOTkiXSwibmFtZXMiOlsibG9hZFNjcmlwdCIsInVybCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXEiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJvbmxvYWQiLCJibG9iIiwicmVzcG9uc2UiLCJibG9iVVJMIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwib25lcnJvciIsImUiLCJzZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUI7QUFDdkIsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDL0IsUUFBTUMsTUFBTSxJQUFJQyxjQUFKLEVBQVo7QUFDQUQsUUFBSUUsSUFBSixDQUFTLEtBQVQsRUFBZ0JOLEdBQWhCLEVBQXFCLElBQXJCO0FBQ0FJLFFBQUlHLFlBQUosR0FBbUIsTUFBbkI7QUFDQUgsUUFBSUksTUFBSixHQUFhLFlBQU07QUFDakIsVUFBTUMsT0FBT0wsSUFBSU0sUUFBakI7QUFDQSxVQUFNQyxVQUFVQyxJQUFJQyxlQUFKLENBQW9CSixJQUFwQixDQUFoQjtBQUNBUCxVQUFJUyxPQUFKO0FBQ0QsS0FKRDtBQUtBUCxRQUFJVSxPQUFKLEdBQWMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ25CWixVQUFJWSxDQUFKO0FBQ0QsS0FGRDtBQUdBWCxRQUFJWSxJQUFKO0FBQ0QsR0FiTSxDQUFQO0FBY0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZm5CO0FBRGUsQ0FBakIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbG9hZFNjcmlwdCh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHJlcS5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGJsb2IgPSByZXEucmVzcG9uc2U7XG4gICAgICBjb25zdCBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHJlcyhibG9iVVJMKTtcbiAgICB9O1xuICAgIHJlcS5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgIHJlaihlKTtcbiAgICB9O1xuICAgIHJlcS5zZW5kKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9hZFNjcmlwdFxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3V0aWwuanMiXSwic291cmNlUm9vdCI6IiJ9\\\");\\n\\n/***/ }),\\n/* 2 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nfunction Resampler(fromSampleRate, toSampleRate, channels, outputBufferSize, noReturn) {\\\\n  this.fromSampleRate = fromSampleRate;\\\\n  this.toSampleRate = toSampleRate;\\\\n  this.channels = channels | 0;\\\\n  this.outputBufferSize = outputBufferSize;\\\\n  this.noReturn = !!noReturn;\\\\n  this.initialize();\\\\n}\\\\n\\\\nResampler.prototype.initialize = function () {\\\\n  if (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\\\\n    if (this.fromSampleRate == this.toSampleRate) {\\\\n      this.resample = this.bypassResampler;\\\\n      this.ratioWeight = 1;\\\\n    } else {\\\\n      this.ratioWeight = this.fromSampleRate / this.toSampleRate;\\\\n      if (this.fromSampleRate < this.toSampleRate) {\\\\n        this.compileLinearInterpolationFunction();\\\\n        this.lastWeight = 1;\\\\n      } else {\\\\n        this.compileMultiTapFunction();\\\\n        this.tailExists = false;\\\\n        this.lastWeight = 0;\\\\n      }\\\\n      this.initializeBuffers();\\\\n    }\\\\n  } else {\\\\n    throw new Error('Invalid settings specified for the resampler.');\\\\n  }\\\\n};\\\\n\\\\nResampler.prototype.compileLinearInterpolationFunction = function () {\\\\n  var channel = void 0;\\\\n\\\\n  var toCompile = 'var bufferLength = Math.min(buffer.length, upTo);\\\\\\\\\\\\n  var outLength = this.outputBufferSize;\\\\\\\\\\\\n  if ((bufferLength % ' + this.channels + ') == 0) {\\\\\\\\\\\\n    if (bufferLength > 0) {\\\\\\\\\\\\n      var weight = this.lastWeight;\\\\\\\\\\\\n      var firstWeight = 0;\\\\\\\\\\\\n      var secondWeight = 0;\\\\\\\\\\\\n      var sourceOffset = 0;\\\\\\\\\\\\n      var outputOffset = 0;\\\\\\\\\\\\n      var outputBuffer = this.outputBuffer;\\\\\\\\\\\\n      for (; weight < 1; weight += ' + this.ratioWeight + ') {\\\\\\\\\\\\n        secondWeight = weight % 1;\\\\\\\\\\\\n        firstWeight = 1 - secondWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = (this.lastOutput[' + channel + '] * firstWeight) + (buffer[' + channel + '] * secondWeight);';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n      weight -= 1;\\\\\\\\\\\\n      for (bufferLength -= ' + this.channels + ', sourceOffset = Math.floor(weight) * ' + this.channels + '; outputOffset < outLength && sourceOffset < bufferLength;) {\\\\\\\\\\\\n        secondWeight = weight % 1;\\\\\\\\\\\\n        firstWeight = 1 - secondWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = (buffer[sourceOffset' + (channel > 0 ? ' + ' + channel : '') + '] * firstWeight) + (buffer[sourceOffset + ' + (this.channels + channel) + '] * secondWeight);';\\\\n  }\\\\n  toCompile += 'weight += ' + this.ratioWeight + ';\\\\\\\\\\\\n        sourceOffset = Math.floor(weight) * ' + this.channels + ';\\\\\\\\\\\\n      }';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'this.lastOutput[' + channel + '] = buffer[sourceOffset++];';\\\\n  }\\\\n  toCompile += 'this.lastWeight = weight % 1;\\\\\\\\\\\\n      return this.bufferSlice(outputOffset);\\\\\\\\\\\\n    }\\\\\\\\\\\\n    else {\\\\\\\\\\\\n      return (this.noReturn) ? 0 : [];\\\\\\\\\\\\n    }\\\\\\\\\\\\n  }\\\\\\\\\\\\n  else {\\\\\\\\\\\\n    throw(new Error(\\\\\\\"Buffer was of incorrect sample length.\\\\\\\"));\\\\\\\\\\\\n  }';\\\\n\\\\n  this.resample = Function('buffer', 'upTo', toCompile);\\\\n};\\\\n\\\\nResampler.prototype.compileMultiTapFunction = function () {\\\\n  var channel = void 0;\\\\n\\\\n  var toCompile = 'var bufferLength = Math.min(buffer.length, upTo);\\\\\\\\\\\\n  var outLength = this.outputBufferSize;\\\\\\\\\\\\n  if ((bufferLength % ' + this.channels + ') == 0) {\\\\\\\\\\\\n    if (bufferLength > 0) {\\\\\\\\\\\\n      var weight = 0;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'var output' + channel + ' = 0;';\\\\n  }\\\\n  toCompile += 'var actualPosition = 0;\\\\\\\\\\\\n      var amountToNext = 0;\\\\\\\\\\\\n      var alreadyProcessedTail = !this.tailExists;\\\\\\\\\\\\n      this.tailExists = false;\\\\\\\\\\\\n      var outputBuffer = this.outputBuffer;\\\\\\\\\\\\n      var outputOffset = 0;\\\\\\\\\\\\n      var currentPosition = 0;\\\\\\\\\\\\n      do {\\\\\\\\\\\\n        if (alreadyProcessedTail) {\\\\\\\\\\\\n          weight = ' + this.ratioWeight + ';';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' = 0;';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n        else {\\\\\\\\\\\\n          weight = this.lastWeight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' = this.lastOutput[' + channel + '];';\\\\n  }\\\\n  toCompile += 'alreadyProcessedTail = true;\\\\\\\\\\\\n        }\\\\\\\\\\\\n        while (weight > 0 && actualPosition < bufferLength) {\\\\\\\\\\\\n          amountToNext = 1 + actualPosition - currentPosition;\\\\\\\\\\\\n          if (weight >= amountToNext) {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' += buffer[actualPosition++] * amountToNext;';\\\\n  }\\\\n  toCompile += 'currentPosition = actualPosition;\\\\\\\\\\\\n            weight -= amountToNext;\\\\\\\\\\\\n          }\\\\\\\\\\\\n          else {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'output' + channel + ' += buffer[actualPosition' + (channel > 0 ? ' + ' + channel : '') + '] * weight;';\\\\n  }\\\\n  toCompile += 'currentPosition += weight;\\\\\\\\\\\\n            weight = 0;\\\\\\\\\\\\n            break;\\\\\\\\\\\\n          }\\\\\\\\\\\\n        }\\\\\\\\\\\\n        if (weight <= 0) {';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'outputBuffer[outputOffset++] = output' + channel + ' / ' + this.ratioWeight + ';';\\\\n  }\\\\n  toCompile += '}\\\\\\\\\\\\n        else {\\\\\\\\\\\\n          this.lastWeight = weight;';\\\\n  for (channel = 0; channel < this.channels; ++channel) {\\\\n    toCompile += 'this.lastOutput[' + channel + '] = output' + channel + ';';\\\\n  }\\\\n  toCompile += 'this.tailExists = true;\\\\\\\\\\\\n          break;\\\\\\\\\\\\n        }\\\\\\\\\\\\n      } while (actualPosition < bufferLength && outputOffset < outLength);\\\\\\\\\\\\n      return this.bufferSlice(outputOffset);\\\\\\\\\\\\n    }\\\\\\\\\\\\n    else {\\\\\\\\\\\\n      return (this.noReturn) ? 0 : [];\\\\\\\\\\\\n    }\\\\\\\\\\\\n  }\\\\\\\\\\\\n  else {\\\\\\\\\\\\n    throw(new Error(\\\\\\\"Buffer was of incorrect sample length.\\\\\\\"));\\\\\\\\\\\\n  }';\\\\n\\\\n  this.resample = Function('buffer', 'upTo', toCompile);\\\\n};\\\\n\\\\nResampler.prototype.bypassResampler = function (buffer, upTo) {\\\\n  this.outputBuffer = buffer;\\\\n  return this.bufferSlice(upTo);\\\\n};\\\\n\\\\nResampler.prototype.bufferSlice = function (sliceAmount) {\\\\n  if (this.noReturn) {\\\\n    return sliceAmount;\\\\n  } else {\\\\n    try {\\\\n      return this.outputBuffer.subarray(0, sliceAmount);\\\\n    } catch (error) {\\\\n      try {\\\\n        this.outputBuffer.length = sliceAmount;\\\\n        return this.outputBuffer;\\\\n      } catch (error) {\\\\n        return this.outputBuffer.slice(0, sliceAmount);\\\\n      }\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nResampler.prototype.initializeBuffers = function () {\\\\n  try {\\\\n    this.outputBuffer = new Float32Array(this.outputBufferSize);\\\\n    this.lastOutput = new Float32Array(this.channels);\\\\n  } catch (error) {\\\\n    this.outputBuffer = [];\\\\n    this.lastOutput = [];\\\\n  }\\\\n};\\\\n\\\\nmodule.exports = Resampler;\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\");\\n\\n/***/ }),\\n/* 3 */\\n/***/ (function(module, exports) {\\n\\n\\teval(\\\"'use strict';\\\\n\\\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\\\\\"value\\\\\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\\\n\\\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\\\\\"Cannot call a class as a function\\\\\\\"); } }\\\\n\\\\nvar OpusDecoder = function () {\\\\n  function OpusDecoder(rate, channels, frameSize) {\\\\n    _classCallCheck(this, OpusDecoder);\\\\n\\\\n    if (rate !== 48000) throw 'OpusDec: wrong rate ' + rate;\\\\n    this.rate = rate;\\\\n    this.channels = channels;\\\\n    this.frameSize = frameSize;\\\\n    this.ctx = null;\\\\n    this.coded_ptr = null;\\\\n    this.raw_ptr = null;\\\\n    var coded_sz = 4096;\\\\n    var raw_sz = 8192 * 2;\\\\n    var err_ptr = _malloc(4);\\\\n    this.ctx = _opus_decoder_create(rate, channels, err_ptr);\\\\n    var err = getValue(err_ptr, 'i32');\\\\n    if (err !== 0) throw 'OpusDec: opus_decoder_create failed: ' + err;\\\\n    _free(err_ptr);\\\\n    this.coded_ptr = _malloc(coded_sz);\\\\n    this.coded = HEAPU8.subarray(this.coded_ptr, this.coded_ptr + coded_sz);\\\\n    this.raw_ptr = _malloc(raw_sz);\\\\n    this.raw = HEAPF32.subarray(this.raw_ptr >> 2, this.raw_ptr + raw_sz >> 2);\\\\n  }\\\\n\\\\n  _createClass(OpusDecoder, [{\\\\n    key: 'decode',\\\\n    value: function decode(packet) {\\\\n      this.coded.set(new Uint8Array(packet));\\\\n      var ret = _opus_decode_float(this.ctx, this.coded_ptr, packet.byteLength, this.raw_ptr, this.raw.byteLength, 0);\\\\n      if (ret < 0) throw 'OpusDec: opus_decode failed: ' + ret;\\\\n      var samples = this.raw.subarray(0, ret * this.channels);\\\\n      return samples;\\\\n    }\\\\n  }, {\\\\n    key: 'destroy',\\\\n    value: function destroy() {\\\\n      if (!this.ctx) return;\\\\n      _opus_decoder_destroy(this.ctx);\\\\n      _free(this.coded_ptr);\\\\n      _free(this.raw_ptr);\\\\n      this.ctx = null;\\\\n      this.coded_ptr = null;\\\\n      this.raw_ptr = null;\\\\n    }\\\\n  }]);\\\\n\\\\n  return OpusDecoder;\\\\n}();\\\\n\\\\nmodule.exports = OpusDecoder;\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9kZWNvZGVyLmpzP2FiODMiXSwibmFtZXMiOlsiT3B1c0RlY29kZXIiLCJyYXRlIiwiY2hhbm5lbHMiLCJmcmFtZVNpemUiLCJjdHgiLCJjb2RlZF9wdHIiLCJyYXdfcHRyIiwiY29kZWRfc3oiLCJyYXdfc3oiLCJlcnJfcHRyIiwiX21hbGxvYyIsIl9vcHVzX2RlY29kZXJfY3JlYXRlIiwiZXJyIiwiZ2V0VmFsdWUiLCJfZnJlZSIsImNvZGVkIiwiSEVBUFU4Iiwic3ViYXJyYXkiLCJyYXciLCJIRUFQRjMyIiwicGFja2V0Iiwic2V0IiwiVWludDhBcnJheSIsInJldCIsIl9vcHVzX2RlY29kZV9mbG9hdCIsImJ5dGVMZW5ndGgiLCJzYW1wbGVzIiwiX29wdXNfZGVjb2Rlcl9kZXN0cm95IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztJQUVNQSxXO0FBQ0osdUJBQVlDLElBQVosRUFBa0JDLFFBQWxCLEVBQTRCQyxTQUE1QixFQUF1QztBQUFBOztBQUNyQyxRQUFJRixTQUFTLEtBQWIsRUFBb0IsTUFBTSx5QkFBeUJBLElBQS9CO0FBQ3BCLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxHQUFMLEdBQVcsSUFBWDtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNBLFFBQU1DLFdBQVcsSUFBakI7QUFDQSxRQUFNQyxTQUFTLE9BQU8sQ0FBdEI7QUFDQSxRQUFNQyxVQUFVQyxRQUFRLENBQVIsQ0FBaEI7QUFDQSxTQUFLTixHQUFMLEdBQVdPLHFCQUFxQlYsSUFBckIsRUFBMkJDLFFBQTNCLEVBQXFDTyxPQUFyQyxDQUFYO0FBQ0EsUUFBTUcsTUFBTUMsU0FBU0osT0FBVCxFQUFrQixLQUFsQixDQUFaO0FBQ0EsUUFBSUcsUUFBUSxDQUFaLEVBQWUsTUFBTSwwQ0FBMENBLEdBQWhEO0FBQ2ZFLFVBQU1MLE9BQU47QUFDQSxTQUFLSixTQUFMLEdBQWlCSyxRQUFRSCxRQUFSLENBQWpCO0FBQ0EsU0FBS1EsS0FBTCxHQUFhQyxPQUFPQyxRQUFQLENBQWdCLEtBQUtaLFNBQXJCLEVBQWdDLEtBQUtBLFNBQUwsR0FBaUJFLFFBQWpELENBQWI7QUFDQSxTQUFLRCxPQUFMLEdBQWVJLFFBQVFGLE1BQVIsQ0FBZjtBQUNBLFNBQUtVLEdBQUwsR0FBV0MsUUFBUUYsUUFBUixDQUFpQixLQUFLWCxPQUFMLElBQWdCLENBQWpDLEVBQ1QsS0FBS0EsT0FBTCxHQUFlRSxNQUFoQixJQUEyQixDQURqQixDQUFYO0FBRUQ7Ozs7MkJBRU1ZLE0sRUFBUTtBQUNiLFdBQUtMLEtBQUwsQ0FBV00sR0FBWCxDQUFlLElBQUlDLFVBQUosQ0FBZUYsTUFBZixDQUFmO0FBQ0EsVUFBTUcsTUFBTUMsbUJBQW1CLEtBQUtwQixHQUF4QixFQUE2QixLQUFLQyxTQUFsQyxFQUNYZSxPQUFPSyxVQURJLEVBQ1EsS0FBS25CLE9BRGIsRUFDc0IsS0FBS1ksR0FBTCxDQUFTTyxVQUQvQixFQUMyQyxDQUQzQyxDQUFaO0FBRUEsVUFBSUYsTUFBTSxDQUFWLEVBQWEsTUFBTSxrQ0FBa0NBLEdBQXhDO0FBQ2IsVUFBTUcsVUFBVSxLQUFLUixHQUFMLENBQVNELFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUJNLE1BQU0sS0FBS3JCLFFBQWhDLENBQWhCO0FBQ0EsYUFBT3dCLE9BQVA7QUFDRDs7OzhCQUVTO0FBQ1IsVUFBSSxDQUFDLEtBQUt0QixHQUFWLEVBQWU7QUFDZnVCLDRCQUFzQixLQUFLdkIsR0FBM0I7QUFDQVUsWUFBTSxLQUFLVCxTQUFYO0FBQ0FTLFlBQU0sS0FBS1IsT0FBWDtBQUNBLFdBQUtGLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFdBQUtDLE9BQUwsR0FBZSxJQUFmO0FBQ0Q7Ozs7OztBQUdIc0IsT0FBT0MsT0FBUCxHQUFpQjdCLFdBQWpCIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIE9wdXNEZWNvZGVyIHtcbiAgY29uc3RydWN0b3IocmF0ZSwgY2hhbm5lbHMsIGZyYW1lU2l6ZSkge1xuICAgIGlmIChyYXRlICE9PSA0ODAwMCkgdGhyb3cgJ09wdXNEZWM6IHdyb25nIHJhdGUgJyArIHJhdGU7XG4gICAgdGhpcy5yYXRlID0gcmF0ZTtcbiAgICB0aGlzLmNoYW5uZWxzID0gY2hhbm5lbHM7XG4gICAgdGhpcy5mcmFtZVNpemUgPSBmcmFtZVNpemU7XG4gICAgdGhpcy5jdHggPSBudWxsO1xuICAgIHRoaXMuY29kZWRfcHRyID0gbnVsbDtcbiAgICB0aGlzLnJhd19wdHIgPSBudWxsO1xuICAgIGNvbnN0IGNvZGVkX3N6ID0gNDA5NjtcbiAgICBjb25zdCByYXdfc3ogPSA4MTkyICogMjtcbiAgICBjb25zdCBlcnJfcHRyID0gX21hbGxvYyg0KTtcbiAgICB0aGlzLmN0eCA9IF9vcHVzX2RlY29kZXJfY3JlYXRlKHJhdGUsIGNoYW5uZWxzLCBlcnJfcHRyKTtcbiAgICBjb25zdCBlcnIgPSBnZXRWYWx1ZShlcnJfcHRyLCAnaTMyJyk7XG4gICAgaWYgKGVyciAhPT0gMCkgdGhyb3cgJ09wdXNEZWM6IG9wdXNfZGVjb2Rlcl9jcmVhdGUgZmFpbGVkOiAnICsgZXJyO1xuICAgIF9mcmVlKGVycl9wdHIpO1xuICAgIHRoaXMuY29kZWRfcHRyID0gX21hbGxvYyhjb2RlZF9zeik7XG4gICAgdGhpcy5jb2RlZCA9IEhFQVBVOC5zdWJhcnJheSh0aGlzLmNvZGVkX3B0ciwgdGhpcy5jb2RlZF9wdHIgKyBjb2RlZF9zeik7XG4gICAgdGhpcy5yYXdfcHRyID0gX21hbGxvYyhyYXdfc3opO1xuICAgIHRoaXMucmF3ID0gSEVBUEYzMi5zdWJhcnJheSh0aGlzLnJhd19wdHIgPj4gMixcbiAgICAgKHRoaXMucmF3X3B0ciArIHJhd19zeikgPj4gMik7XG4gIH1cblxuICBkZWNvZGUocGFja2V0KSB7XG4gICAgdGhpcy5jb2RlZC5zZXQobmV3IFVpbnQ4QXJyYXkocGFja2V0KSk7XG4gICAgY29uc3QgcmV0ID0gX29wdXNfZGVjb2RlX2Zsb2F0KHRoaXMuY3R4LCB0aGlzLmNvZGVkX3B0cixcbiAgICAgcGFja2V0LmJ5dGVMZW5ndGgsIHRoaXMucmF3X3B0ciwgdGhpcy5yYXcuYnl0ZUxlbmd0aCwgMCk7XG4gICAgaWYgKHJldCA8IDApIHRocm93ICdPcHVzRGVjOiBvcHVzX2RlY29kZSBmYWlsZWQ6ICcgKyByZXQ7XG4gICAgY29uc3Qgc2FtcGxlcyA9IHRoaXMucmF3LnN1YmFycmF5KDAsIHJldCAqIHRoaXMuY2hhbm5lbHMpO1xuICAgIHJldHVybiBzYW1wbGVzO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAoIXRoaXMuY3R4KSByZXR1cm47XG4gICAgX29wdXNfZGVjb2Rlcl9kZXN0cm95KHRoaXMuY3R4KTtcbiAgICBfZnJlZSh0aGlzLmNvZGVkX3B0cik7XG4gICAgX2ZyZWUodGhpcy5yYXdfcHRyKTtcbiAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgdGhpcy5jb2RlZF9wdHIgPSBudWxsO1xuICAgIHRoaXMucmF3X3B0ciA9IG51bGw7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPcHVzRGVjb2RlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2RlY29kZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\\\");\\n\\n/***/ })\\n/******/ ]);\", __webpack_require__.p + \"faa5e54f38320d925d11.worker.js\");\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);